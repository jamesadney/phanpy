{"version":3,"file":"main-ayNCIgn2.js","sources":["../../src/utils/usePageVisibility.js","../../src/components/background-service.jsx","../../src/components/compose-button.jsx","../../src/components/keyboard-shortcuts-help.jsx","../../src/pages/accounts.jsx","../../src/assets/logo.svg","../../src/utils/push-notifications.js","../../src/pages/settings.jsx","../../src/utils/focus-deck.jsx","../../src/utils/useLocationChange.js","../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/components/embed-modal.jsx","../../src/utils/relationships.js","../../src/components/generic-accounts.jsx","../../src/components/media-alt-modal.jsx","../../src/utils/color-utils.js","../../src/components/media-modal.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/utils/followed-tags.js","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/modals.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/components/notification-service.jsx","../../src/components/search-form.jsx","../../src/components/search-command.jsx","../../src/components/shortcuts.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/useScroll.js","../../src/utils/useScrollFn.js","../../src/components/media-post.jsx","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/followed-hashtags.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/utils/group-notifications.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/search.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/http-route.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/status.jsx","../../src/pages/status-route.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/utils/toast-alert.js","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn);\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [deps]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states, { saveStatus } from '../utils/states';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nconst STREAMING_TIMEOUT = 1000 * 3; // 3 seconds\nconst POLL_INTERVAL = 15_000; // 15 seconds\n\nexport default memo(function BackgroundService({ isLoggedIn }) {\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  const checkLatestNotification = async (masto, instance, skipCheckMarkers) => {\n    if (states.notificationsLast) {\n      const notificationsIterator = masto.v1.notifications.list({\n        limit: 1,\n        sinceId: states.notificationsLast.id,\n      });\n      const { value: notifications } = await notificationsIterator.next();\n      if (notifications?.length) {\n        if (skipCheckMarkers) {\n          states.notificationsShowNew = true;\n        } else {\n          let lastReadId;\n          try {\n            const markers = await masto.v1.markers.fetch({\n              timeline: 'notifications',\n            });\n            lastReadId = markers?.notifications?.lastReadId;\n          } catch (e) {}\n          if (lastReadId) {\n            states.notificationsShowNew = notifications[0].id !== lastReadId;\n          } else {\n            states.notificationsShowNew = true;\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    let sub;\n    let pollNotifications;\n    if (isLoggedIn && visible) {\n      const { masto, streaming, instance } = api();\n      (async () => {\n        // 1. Get the latest notification\n        await checkLatestNotification(masto, instance);\n\n        let hasStreaming = false;\n        // 2. Start streaming\n        if (streaming) {\n          pollNotifications = setTimeout(() => {\n            (async () => {\n              try {\n                hasStreaming = true;\n                sub = streaming.user.notification.subscribe();\n                console.log('🎏 Streaming notification', sub);\n                for await (const entry of sub) {\n                  if (!sub) break;\n                  if (!visible) break;\n                  console.log('🔔🔔 Notification entry', entry);\n                  if (entry.event === 'notification') {\n                    console.log('🔔🔔 Notification', entry);\n                    saveStatus(entry.payload, instance, {\n                      skipThreading: true,\n                    });\n                  }\n                  states.notificationsShowNew = true;\n                }\n                console.log('💥 Streaming notification loop STOPPED');\n              } catch (e) {\n                hasStreaming = false;\n                console.error(e);\n              }\n\n              if (!hasStreaming) {\n                console.log('🎏 Streaming failed, fallback to polling');\n                pollNotifications = setInterval(() => {\n                  checkLatestNotification(masto, instance, true);\n                }, POLL_INTERVAL);\n              }\n            })();\n          }, STREAMING_TIMEOUT);\n        }\n      })();\n    }\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n      clearTimeout(pollNotifications);\n      clearInterval(pollNotifications);\n    };\n  }, [visible, isLoggedIn]);\n\n  // Check for updates service\n  const lastCheckDate = useRef();\n  const checkForUpdates = () => {\n    lastCheckDate.current = Date.now();\n    console.log('✨ Check app update');\n    fetch('./version.json')\n      .then((r) => r.json())\n      .then((info) => {\n        if (info) states.appVersion = info;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\n  usePageVisibility((visible) => {\n    if (visible) {\n      if (!lastCheckDate.current) {\n        checkForUpdates();\n      } else {\n        const diff = Date.now() - lastCheckDate.current;\n        if (diff > 1000 * 60 * 60) {\n          // 1 hour\n          checkForUpdates();\n        }\n      }\n    }\n  });\n\n  // Global keyboard shortcuts \"service\"\n  useHotkeys('shift+alt+k', () => {\n    const currentCloakMode = states.settings.cloakMode;\n    states.settings.cloakMode = !currentCloakMode;\n    showToast({\n      text: `Cloak mode ${currentCloakMode ? 'disabled' : 'enabled'}`,\n    });\n  });\n\n  return null;\n});\n","import { useHotkeys } from 'react-hotkeys-hook';\n\nimport openCompose from '../utils/open-compose';\nimport states from '../utils/states';\n\nimport Icon from './icon';\n\nexport default function ComposeButton() {\n  function handleButton(e) {\n    if (e.shiftKey) {\n      const newWin = openCompose();\n\n      if (!newWin) {\n        states.showCompose = true;\n      }\n    } else {\n      states.showCompose = true;\n    }\n  }\n\n  useHotkeys('c, shift+c', handleButton, {\n    ignoreEventWhen: (e) => {\n      const hasModal = !!document.querySelector('#modal-container > *');\n      return hasModal;\n    },\n  });\n\n  return (\n    <button type=\"button\" id=\"compose-button\" onClick={handleButton}>\n      <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n    </button>\n  );\n}\n","import './keyboard-shortcuts-help.css';\n\nimport { memo } from 'preact/compat';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Modal from './modal';\n\nexport default memo(function KeyboardShortcutsHelp() {\n  const snapStates = useSnapshot(states);\n\n  function onClose() {\n    states.showKeyboardShortcutsHelp = false;\n  }\n\n  useHotkeys(\n    '?, shift+?, shift+slash',\n    (e) => {\n      console.log('help');\n      states.showKeyboardShortcutsHelp = true;\n    },\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n\n  return (\n    !!snapStates.showKeyboardShortcutsHelp && (\n      <Modal class=\"light\" onClose={onClose}>\n        <div id=\"keyboard-shortcuts-help-container\" class=\"sheet\" tabindex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <h2>Keyboard shortcuts</h2>\n          </header>\n          <main>\n            <table>\n              {[\n                {\n                  action: 'Keyboard shortcuts help',\n                  keys: <kbd>?</kbd>,\n                },\n                {\n                  action: 'Next post',\n                  keys: <kbd>j</kbd>,\n                },\n                {\n                  action: 'Previous post',\n                  keys: <kbd>k</kbd>,\n                },\n                {\n                  action: 'Skip carousel to next post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>j</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Skip carousel to previous post',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Load new posts',\n                  keys: <kbd>.</kbd>,\n                },\n                {\n                  action: 'Open post details',\n                  keys: (\n                    <>\n                      <kbd>Enter</kbd> or <kbd>o</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: (\n                    <>\n                      Expand content warning or\n                      <br />\n                      toggle expanded/collapsed thread\n                    </>\n                  ),\n                  keys: <kbd>x</kbd>,\n                },\n                {\n                  action: 'Close post or dialogs',\n                  keys: (\n                    <>\n                      <kbd>Esc</kbd> or <kbd>Backspace</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Focus column in multi-column mode',\n                  keys: (\n                    <>\n                      <kbd>1</kbd> to <kbd>9</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Compose new post',\n                  keys: <kbd>c</kbd>,\n                },\n                {\n                  action: 'Compose new post (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>c</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Send post',\n                  keys: (\n                    <>\n                      <kbd>Ctrl</kbd> + <kbd>Enter</kbd> or <kbd>⌘</kbd> +{' '}\n                      <kbd>Enter</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Search',\n                  keys: <kbd>/</kbd>,\n                },\n                {\n                  action: 'Reply',\n                  keys: <kbd>r</kbd>,\n                },\n                {\n                  action: 'Reply (new window)',\n                  className: 'insignificant',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>r</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Like (favourite)',\n                  keys: (\n                    <>\n                      <kbd>l</kbd> or <kbd>f</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Boost',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>b</kbd>\n                    </>\n                  ),\n                },\n                {\n                  action: 'Bookmark',\n                  keys: <kbd>d</kbd>,\n                },\n                {\n                  action: 'Toggle Cloak mode',\n                  keys: (\n                    <>\n                      <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>k</kbd>\n                    </>\n                  ),\n                },\n              ].map(({ action, className, keys }) => (\n                <tr key={action}>\n                  <th class={className}>{action}</th>\n                  <td>{keys}</td>\n                </tr>\n              ))}\n            </table>\n          </main>\n        </div>\n      </Modal>\n    )\n  );\n});\n","import './accounts.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useReducer } from 'preact/hooks';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport NameText from '../components/name-text';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nfunction Accounts({ onClose }) {\n  const { masto } = api();\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = store.session.get('currentAccount');\n  const moreThanOneAccount = accounts.length > 1;\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n  const [accountsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Accounts</h2>\n      </header>\n      <main>\n        <section>\n          <ul class=\"accounts-list\" ref={accountsListParent}>\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === 0; // first account is always default\n              return (\n                <li key={account.info.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts\n                              .$select(account.info.id)\n                              .fetch();\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={\n                        moreThanOneAccount\n                          ? {\n                              ...account.info,\n                              acct: /@/.test(account.info.acct)\n                                ? account.info.acct\n                                : `${account.info.acct}@${account.instanceURL}`,\n                            }\n                          : account.info\n                      }\n                      showAcct\n                      onClick={() => {\n                        if (isCurrent) {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        } else {\n                          store.session.set('currentAccount', account.info.id);\n                          location.reload();\n                        }\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    <Menu2\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      <MenuItem\n                        onClick={() => {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        }}\n                      >\n                        <Icon icon=\"user\" />\n                        <span>View profile…</span>\n                      </MenuItem>\n                      <MenuDivider />\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          }}\n                        >\n                          <Icon icon=\"check-circle\" />\n                          <span>Set as default</span>\n                        </MenuItem>\n                      )}\n                      <MenuConfirm\n                        subMenu\n                        confirmLabel={\n                          <>\n                            <Icon icon=\"exit\" />\n                            <span>Log out @{account.info.acct}?</span>\n                          </>\n                        }\n                        disabled={!isCurrent}\n                        menuItemClassName=\"danger\"\n                        onClick={() => {\n                          // const yes = confirm('Log out?');\n                          // if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = location.pathname || '/';\n                        }}\n                      >\n                        <Icon icon=\"exit\" />\n                        <span>Log out…</span>\n                      </MenuConfirm>\n                    </Menu2>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <p>\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\n            </Link>\n          </p>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Accounts;\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%2064%2064'%3e%3cpath%20fill='none'%20d='M0%200h63.994v63.994H0z'/%3e%3cpath%20fill='%23a4bff7'%20d='M37.774%2011.471c14.639%203.752%2019.034%2016.557%2015.889%2031.304-.696%203.261-2.563%206.661-6.356%208.693-3.204%201.717-8.07%202.537-15.338.55l-9.634-2.404C11.651%2046.992%208.378%2038.733%2010.027%2031.823c3.627-15.201%2015.543-23.48%2027.747-20.352Z'/%3e%3cpath%20fill='%23d8e7fe'%20d='M36.76%2015.429c12.289%203.15%2015.547%2014.114%2012.907%2026.493-.947%204.44-4.937%209.365-16.664%206.143l-9.684-2.417c-7.854-1.923-10.53-7.8-9.318-12.877%203.016-12.639%2012.611-19.943%2022.759-17.342Z'/%3e%3cpath%20fill='%236081e6'%20d='M27.471%2024.991c-1.457-.698-7.229%203.213-7.663%208.926-.182%202.39%204.55%203.237%205.071-.169.725-4.743%203.715-8.218%202.592-8.757Zm10.746%202.005c-2.083.327-.382%205.901-.595%2010.727-.123%202.8%204.388%203.464%204.703%202.011%201.098-5.073-2.066-13.058-4.108-12.738Z'/%3e%3c/svg%3e\"","// Utils for push notifications\nimport { api } from './api';\nimport { getCurrentAccount } from './store-utils';\n\n// Subscription is an object with the following structure:\n// {\n//   data: {\n//     alerts: {\n//       admin: {\n//         report: boolean,\n//         signUp: boolean,\n//       },\n//       favourite: boolean,\n//       follow: boolean,\n//       mention: boolean,\n//       poll: boolean,\n//       reblog: boolean,\n//       status: boolean,\n//       update: boolean,\n//     }\n//   },\n//   policy: \"all\" | \"followed\" | \"follower\" | \"none\",\n//   subscription: {\n//     endpoint: string,\n//     keys: {\n//       auth: string,\n//       p256dh: string,\n//     },\n//   },\n// }\n\n// Back-end CRUD\n// =============\n\nfunction createBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.create(subscription);\n}\n\nfunction fetchBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.fetch();\n}\n\nfunction updateBackendPushSubscription(subscription) {\n  const { masto } = api();\n  return masto.v1.push.subscription.update(subscription);\n}\n\nfunction removeBackendPushSubscription() {\n  const { masto } = api();\n  return masto.v1.push.subscription.remove();\n}\n\n// Front-end\n// =========\n\nexport function isPushSupported() {\n  return 'serviceWorker' in navigator && 'PushManager' in window;\n}\n\nexport function getRegistration() {\n  // return navigator.serviceWorker.ready;\n  return navigator.serviceWorker.getRegistration();\n}\n\nasync function getSubscription() {\n  const registration = await getRegistration();\n  const subscription = registration\n    ? await registration.pushManager.getSubscription()\n    : undefined;\n  return { registration, subscription };\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = `${base64String}${padding}`\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\n// Front-end <-> back-end\n// ======================\n\nexport async function initSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  let backendSubscription = null;\n  try {\n    backendSubscription = await fetchBackendPushSubscription();\n  } catch (err) {\n    if (/(not found|unknown)/i.test(err.message)) {\n      // No subscription found\n    } else {\n      // Other error\n      throw err;\n    }\n  }\n  console.log('INIT subscription', {\n    subscription,\n    backendSubscription,\n  });\n\n  // Check if the subscription changed\n  if (backendSubscription && subscription) {\n    const sameEndpoint = backendSubscription.endpoint === subscription.endpoint;\n    const { vapidKey } = getCurrentAccount();\n    const sameKey = backendSubscription.serverKey === vapidKey;\n    if (!sameEndpoint) {\n      throw new Error('Backend subscription endpoint changed');\n    }\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        sameEndpoint,\n        serverKey: backendSubscription.serverKey,\n        vapIdKey: vapidKey,\n        endpoint1: backendSubscription.endpoint,\n        endpoint2: subscription.endpoint,\n        sameKey,\n        key1: backendSubscription.serverKey,\n        key2: vapidKey,\n      });\n      throw new Error('Backend subscription key and vapid key changed');\n      // Only unsubscribe from backend, not from browser\n      // await removeBackendPushSubscription();\n      // // Now let's resubscribe\n      // // NOTE: I have no idea if this works\n      // return await updateSubscription({\n      //   data: backendSubscription.data,\n      //   policy: backendSubscription.policy,\n      // });\n    }\n  }\n\n  if (subscription && !backendSubscription) {\n    // check if account's vapidKey is same as subscription's applicationServerKey\n    const { vapidKey } = getCurrentAccount();\n    const { applicationServerKey } = subscription.options;\n    const vapidKeyStr = urlBase64ToUint8Array(vapidKey).toString();\n    const applicationServerKeyStr = new Uint8Array(\n      applicationServerKey,\n    ).toString();\n    const sameKey = vapidKeyStr === applicationServerKeyStr;\n    if (sameKey) {\n      // Subscription didn't change\n    } else {\n      // Subscription changed\n      console.error('🔔 Subscription changed', {\n        vapidKeyStr,\n        applicationServerKeyStr,\n        sameKey,\n      });\n      // Unsubscribe since backend doesn't have a subscription\n      await subscription.unsubscribe();\n      throw new Error('Subscription key and vapid key changed');\n    }\n  }\n\n  // Check if backend subscription returns 404\n  // if (subscription && !backendSubscription) {\n  //   // Re-subscribe to backend\n  //   backendSubscription = await createBackendPushSubscription({\n  //     subscription,\n  //     data: {},\n  //     policy: 'all',\n  //   });\n  // }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function updateSubscription({ data, policy }) {\n  console.log('🔔 Updating subscription', { data, policy });\n  if (!isPushSupported()) return;\n  let { registration, subscription } = await getSubscription();\n  let backendSubscription = null;\n\n  if (subscription) {\n    try {\n      backendSubscription = await updateBackendPushSubscription({\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    } catch (error) {\n      // Backend doesn't have a subscription for this user\n      // Create a new one\n      backendSubscription = await createBackendPushSubscription({\n        subscription,\n        data,\n        policy,\n      });\n      // TODO: save subscription in user settings\n    }\n  } else {\n    // User is not subscribed\n    const { vapidKey } = getCurrentAccount();\n    if (!vapidKey) throw new Error('No server key found');\n    subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidKey),\n    });\n    backendSubscription = await createBackendPushSubscription({\n      subscription,\n      data,\n      policy,\n    });\n    // TODO: save subscription in user settings\n  }\n\n  return { subscription, backendSubscription };\n}\n\nexport async function removeSubscription() {\n  if (!isPushSupported()) return;\n  const { subscription } = await getSubscription();\n  if (subscription) {\n    await removeBackendPushSubscription();\n    await subscription.unsubscribe();\n  }\n}\n","import './settings.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport RelativeTime from '../components/relative-time';\nimport targetLanguages from '../data/lingva-target-languages';\nimport { api } from '../utils/api';\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeCode2Text from '../utils/localeCode2Text';\nimport {\n  initSubscription,\n  isPushSupported,\n  removeSubscription,\n  updateSubscription,\n} from '../utils/push-notifications';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nconst DEFAULT_TEXT_SIZE = 16;\nconst TEXT_SIZES = [15, 16, 17, 18, 19, 20];\nconst {\n  PHANPY_WEBSITE: WEBSITE,\n  PHANPY_PRIVACY_POLICY_URL: PRIVACY_POLICY_URL,\n  PHANPY_IMG_ALT_API_URL: IMG_ALT_API_URL,\n} = import.meta.env;\n\nfunction Settings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const targetLanguage =\n    snapStates.settings.contentTranslationTargetLanguage || null;\n  const systemTargetLanguage = getTranslateTargetLanguage();\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\n\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\n  const { masto, authenticated, instance } = api();\n  // Get preferences every time Settings is opened\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\n  // useEffect(() => {\n  //   const { masto } = api();\n  //   (async () => {\n  //     try {\n  //       const preferences = await masto.v1.preferences.fetch();\n  //       setPrefs(preferences);\n  //       store.account.set('preferences', preferences);\n  //     } catch (e) {\n  //       // Silently fail\n  //       console.error(e);\n  //     }\n  //   })();\n  // }, []);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Settings</h2>\n      </header>\n      <main>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label>Appearance</label>\n              </div>\n              <div>\n                <form\n                  ref={themeFormRef}\n                  onInput={(e) => {\n                    console.log(e);\n                    e.preventDefault();\n                    const formData = new FormData(themeFormRef.current);\n                    const theme = formData.get('theme');\n                    const html = document.documentElement;\n\n                    if (theme === 'auto') {\n                      html.classList.remove('is-light', 'is-dark');\n\n                      // Disable manual theme <meta>\n                      const $manualMeta = document.querySelector(\n                        'meta[data-theme-setting=\"manual\"]',\n                      );\n                      if ($manualMeta) {\n                        $manualMeta.name = '';\n                      }\n                      // Enable auto theme <meta>s\n                      const $autoMetas = document.querySelectorAll(\n                        'meta[data-theme-setting=\"auto\"]',\n                      );\n                      $autoMetas.forEach((m) => {\n                        m.name = 'theme-color';\n                      });\n                    } else {\n                      html.classList.toggle('is-light', theme === 'light');\n                      html.classList.toggle('is-dark', theme === 'dark');\n\n                      // Enable manual theme <meta>\n                      const $manualMeta = document.querySelector(\n                        'meta[data-theme-setting=\"manual\"]',\n                      );\n                      if ($manualMeta) {\n                        $manualMeta.name = 'theme-color';\n                        $manualMeta.content =\n                          theme === 'light'\n                            ? $manualMeta.dataset.themeLightColor\n                            : $manualMeta.dataset.themeDarkColor;\n                      }\n                      // Disable auto theme <meta>s\n                      const $autoMetas = document.querySelectorAll(\n                        'meta[data-theme-setting=\"auto\"]',\n                      );\n                      $autoMetas.forEach((m) => {\n                        m.name = '';\n                      });\n                    }\n                    document\n                      .querySelector('meta[name=\"color-scheme\"]')\n                      .setAttribute(\n                        'content',\n                        theme === 'auto' ? 'dark light' : theme,\n                      );\n\n                    if (theme === 'auto') {\n                      store.local.del('theme');\n                    } else {\n                      store.local.set('theme', theme);\n                    }\n                  }}\n                >\n                  <div class=\"radio-group\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"light\"\n                        defaultChecked={currentTheme === 'light'}\n                      />\n                      <span>Light</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"dark\"\n                        defaultChecked={currentTheme === 'dark'}\n                      />\n                      <span>Dark</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"auto\"\n                        defaultChecked={\n                          currentTheme !== 'light' && currentTheme !== 'dark'\n                        }\n                      />\n                      <span>Auto</span>\n                    </label>\n                  </div>\n                </form>\n              </div>\n            </li>\n            <li>\n              <div>\n                <label>Text size</label>\n              </div>\n              <div class=\"range-group\">\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\n                <input\n                  type=\"range\"\n                  min={TEXT_SIZES[0]}\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\n                  step=\"1\"\n                  value={currentTextSize}\n                  list=\"sizes\"\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value, 10);\n                    const html = document.documentElement;\n                    // set CSS variable\n                    html.style.setProperty('--text-size', `${value}px`);\n                    // save to local storage\n                    if (value === DEFAULT_TEXT_SIZE) {\n                      store.local.del('textSize');\n                    } else {\n                      store.local.set('textSize', e.target.value);\n                    }\n                  }}\n                />{' '}\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\n                  A\n                </span>\n                <datalist id=\"sizes\">\n                  {TEXT_SIZES.map((size) => (\n                    <option value={size} />\n                  ))}\n                </datalist>\n              </div>\n            </li>\n          </ul>\n        </section>\n        {authenticated && (\n          <>\n            <h3>Posting</h3>\n            <section>\n              <ul>\n                <li>\n                  <div>\n                    <label for=\"posting-privacy-field\">\n                      Default visibility{' '}\n                      <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />\n                    </label>\n                  </div>\n                  <div>\n                    <select\n                      id=\"posting-privacy-field\"\n                      value={prefs['posting:default:visibility'] || 'public'}\n                      onChange={(e) => {\n                        const { value } = e.target;\n                        (async () => {\n                          try {\n                            await masto.v1.accounts.updateCredentials({\n                              source: {\n                                privacy: value,\n                              },\n                            });\n                            setPrefs({\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                            store.account.set('preferences', {\n                              ...prefs,\n                              'posting:default:visibility': value,\n                            });\n                          } catch (e) {\n                            alert('Failed to update posting privacy');\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <option value=\"public\">Public</option>\n                      <option value=\"unlisted\">Unlisted</option>\n                      <option value=\"private\">Followers only</option>\n                    </select>\n                  </div>\n                </li>\n              </ul>\n            </section>\n            <p class=\"section-postnote\">\n              <Icon icon=\"cloud\" alt=\"Synced\" class=\"synced-icon\" />{' '}\n              <small>\n                Synced to your instance server's settings.{' '}\n                <a\n                  href={`https://${instance}/`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Go to your instance ({instance}) for more settings.\n                </a>\n              </small>\n            </p>\n          </>\n        )}\n        <h3>Experiments</h3>\n        <section>\n          <ul>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.autoRefresh}\n                  onChange={(e) => {\n                    states.settings.autoRefresh = e.target.checked;\n                  }}\n                />{' '}\n                Auto refresh timeline posts\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.boostsCarousel}\n                  onChange={(e) => {\n                    states.settings.boostsCarousel = e.target.checked;\n                  }}\n                />{' '}\n                Boosts carousel\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.contentTranslation}\n                  onChange={(e) => {\n                    const { checked } = e.target;\n                    states.settings.contentTranslation = checked;\n                    if (!checked) {\n                      states.settings.contentTranslationTargetLanguage = null;\n                    }\n                  }}\n                />{' '}\n                Post translation\n              </label>\n              <div\n                class={`sub-section ${\n                  !snapStates.settings.contentTranslation\n                    ? 'more-insignificant'\n                    : ''\n                }`}\n              >\n                <div>\n                  <label>\n                    Translate to{' '}\n                    <select\n                      value={targetLanguage || ''}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationTargetLanguage =\n                          e.target.value || null;\n                      }}\n                    >\n                      <option value=\"\">\n                        System language ({systemTargetLanguageText})\n                      </option>\n                      <option disabled>──────────</option>\n                      {targetLanguages.map((lang) => (\n                        <option value={lang.code}>{lang.name}</option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <hr />\n                <p class=\"checkbox-fieldset\">\n                  Hide \"Translate\" button for\n                  {snapStates.settings.contentTranslationHideLanguages.length >\n                    0 && (\n                    <>\n                      {' '}\n                      (\n                      {\n                        snapStates.settings.contentTranslationHideLanguages\n                          .length\n                      }\n                      )\n                    </>\n                  )}\n                  :\n                  <div class=\"checkbox-fields\">\n                    {targetLanguages.map((lang) => (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\n                            lang.code,\n                          )}\n                          onChange={(e) => {\n                            const { checked } = e.target;\n                            if (checked) {\n                              states.settings.contentTranslationHideLanguages.push(\n                                lang.code,\n                              );\n                            } else {\n                              states.settings.contentTranslationHideLanguages =\n                                snapStates.settings.contentTranslationHideLanguages.filter(\n                                  (code) => code !== lang.code,\n                                );\n                            }\n                          }}\n                        />{' '}\n                        {lang.name}\n                      </label>\n                    ))}\n                  </div>\n                </p>\n                <p class=\"insignificant\">\n                  <small>\n                    Note: This feature uses external translation services,\n                    powered by{' '}\n                    <a\n                      href=\"https://github.com/cheeaun/lingva-api\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva API\n                    </a>{' '}\n                    &amp;{' '}\n                    <a\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Lingva Translate\n                    </a>\n                    .\n                  </small>\n                </p>\n                <hr />\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={snapStates.settings.contentTranslationAutoInline}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationAutoInline =\n                          e.target.checked;\n                      }}\n                    />{' '}\n                    Auto inline translation\n                  </label>\n                  <p class=\"insignificant\">\n                    <small>\n                      Automatically show translation for posts in timeline. Only\n                      works for <b>short</b> posts without content warning,\n                      media and poll.\n                    </small>\n                  </p>\n                </div>\n              </div>\n            </li>\n            {!!IMG_ALT_API_URL && (\n              <li>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={snapStates.settings.mediaAltGenerator}\n                    onChange={(e) => {\n                      states.settings.mediaAltGenerator = e.target.checked;\n                    }}\n                  />{' '}\n                  Image description generator{' '}\n                  <Icon icon=\"sparkles2\" class=\"more-insignificant\" />\n                </label>\n                <div class=\"sub-section insignificant\">\n                  <small>Only for new images while composing new posts.</small>\n                </div>\n                <div class=\"sub-section insignificant\">\n                  <small>\n                    Note: This feature uses external AI service, powered by{' '}\n                    <a\n                      href=\"https://github.com/cheeaun/img-alt-api\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      img-alt-api\n                    </a>\n                    . May not work well. Only for images and in English.\n                  </small>\n                </div>\n              </li>\n            )}\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.cloakMode}\n                  onChange={(e) => {\n                    states.settings.cloakMode = e.target.checked;\n                  }}\n                />{' '}\n                Cloak mode{' '}\n                <span class=\"insignificant\">\n                  (<samp>Text</samp> → <samp>████</samp>)\n                </span>\n              </label>\n              <div class=\"sub-section insignificant\">\n                <small>\n                  Replace text as blocks, useful when taking screenshots, for\n                  privacy reasons.\n                </small>\n              </div>\n            </li>\n            {authenticated && (\n              <li>\n                <button\n                  type=\"button\"\n                  class=\"light\"\n                  onClick={() => {\n                    states.showDrafts = true;\n                    states.showSettings = false;\n                  }}\n                >\n                  Unsent drafts\n                </button>\n              </li>\n            )}\n          </ul>\n        </section>\n        {authenticated && <PushNotificationsSection onClose={onClose} />}\n        <h3>About</h3>\n        <section>\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 8,\n              lineHeight: 1.25,\n              alignItems: 'center',\n              marginTop: 8,\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"64\"\n              height=\"64\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n                background: '#b7cdf9',\n                borderRadius: 12,\n              }}\n            />\n            <div>\n              <b>Phanpy</b>{' '}\n              <a\n                href=\"https://hachyderm.io/@phanpy\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'phanpy@hachyderm.io';\n                }}\n              >\n                @phanpy\n              </a>\n              <br />\n              <a\n                href=\"https://github.com/cheeaun/phanpy\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Built\n              </a>{' '}\n              by{' '}\n              <a\n                href=\"https://mastodon.social/@cheeaun\"\n                // target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'cheeaun@mastodon.social';\n                }}\n              >\n                @cheeaun\n              </a>\n            </div>\n          </div>\n          <p>\n            <a\n              href=\"https://github.com/sponsors/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Sponsor\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href=\"https://www.buymeacoffee.com/cheeaun\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Donate\n            </a>{' '}\n            &middot;{' '}\n            <a\n              href={PRIVACY_POLICY_URL}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Privacy Policy\n            </a>\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              {WEBSITE && (\n                <>\n                  <span class=\"insignificant\">Site:</span>{' '}\n                  {WEBSITE.replace(/https?:\\/\\//g, '').replace(/\\/$/, '')}\n                  <br />\n                </>\n              )}\n              <span class=\"insignificant\">Version:</span>{' '}\n              <input\n                type=\"text\"\n                class=\"version-string\"\n                readOnly\n                size=\"18\" // Manually calculated here\n                value={`${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n                  __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n                }`}\n                onClick={(e) => {\n                  e.target.select();\n                  // Copy to clipboard\n                  try {\n                    navigator.clipboard.writeText(e.target.value);\n                    showToast('Version string copied');\n                  } catch (e) {\n                    console.warn(e);\n                    showToast('Unable to copy version string');\n                  }\n                }}\n              />{' '}\n              {!__FAKE_COMMIT_HASH__ && (\n                <span class=\"ib insignificant\">\n                  (\n                  <a\n                    href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <RelativeTime datetime={new Date(__BUILD_TIME__)} />\n                  </a>\n                  )\n                </span>\n              )}\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nfunction PushNotificationsSection({ onClose }) {\n  if (!isPushSupported()) return null;\n\n  const { instance } = api();\n  const [uiState, setUIState] = useState('default');\n  const pushFormRef = useRef();\n  const [allowNotifications, setAllowNotifications] = useState(false);\n  const [needRelogin, setNeedRelogin] = useState(false);\n  const previousPolicyRef = useRef();\n  useEffect(() => {\n    (async () => {\n      setUIState('loading');\n      try {\n        const { subscription, backendSubscription } = await initSubscription();\n        if (\n          backendSubscription?.policy &&\n          backendSubscription.policy !== 'none'\n        ) {\n          setAllowNotifications(true);\n          const { alerts, policy } = backendSubscription;\n          previousPolicyRef.current = policy;\n          const { elements } = pushFormRef.current;\n          const policyEl = elements.namedItem(policy);\n          if (policyEl) policyEl.value = policy;\n          // alerts is {}, iterate it\n          Object.keys(alerts).forEach((alert) => {\n            const el = elements.namedItem(alert);\n            if (el?.type === 'checkbox') {\n              el.checked = true;\n            }\n          });\n        }\n        setUIState('default');\n      } catch (err) {\n        console.warn(err);\n        if (/outside.*authorized/i.test(err.message)) {\n          setNeedRelogin(true);\n        } else {\n          alert(err?.message || err);\n        }\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  const isLoading = uiState === 'loading';\n\n  return (\n    <form\n      ref={pushFormRef}\n      onChange={() => {\n        const values = Object.fromEntries(new FormData(pushFormRef.current));\n        const allowNotifications = !!values['policy-allow'];\n        const params = {\n          policy: values.policy,\n          data: {\n            alerts: {\n              mention: !!values.mention,\n              favourite: !!values.favourite,\n              reblog: !!values.reblog,\n              follow: !!values.follow,\n              follow_request: !!values.followRequest,\n              poll: !!values.poll,\n              update: !!values.update,\n              status: !!values.status,\n            },\n          },\n        };\n\n        let alertsCount = 0;\n        // Remove false values from data.alerts\n        // API defaults to false anyway\n        Object.keys(params.data.alerts).forEach((key) => {\n          if (!params.data.alerts[key]) {\n            delete params.data.alerts[key];\n          } else {\n            alertsCount++;\n          }\n        });\n        const policyChanged = previousPolicyRef.current !== params.policy;\n\n        console.log('PN Form', {\n          values,\n          allowNotifications: allowNotifications,\n          params,\n        });\n\n        if (allowNotifications && alertsCount > 0) {\n          if (policyChanged) {\n            console.debug('Policy changed.');\n            removeSubscription()\n              .then(() => {\n                updateSubscription(params);\n              })\n              .catch((err) => {\n                console.warn(err);\n                alert('Failed to update subscription. Please try again.');\n              });\n          } else {\n            updateSubscription(params).catch((err) => {\n              console.warn(err);\n              alert('Failed to update subscription. Please try again.');\n            });\n          }\n        } else {\n          removeSubscription().catch((err) => {\n            console.warn(err);\n            alert('Failed to remove subscription. Please try again.');\n          });\n        }\n      }}\n    >\n      <h3>Push Notifications (beta)</h3>\n      <section>\n        <ul>\n          <li>\n            <label>\n              <input\n                type=\"checkbox\"\n                disabled={isLoading || needRelogin}\n                name=\"policy-allow\"\n                checked={allowNotifications}\n                onChange={async (e) => {\n                  const { checked } = e.target;\n                  if (checked) {\n                    // Request permission\n                    const permission = await Notification.requestPermission();\n                    if (permission === 'granted') {\n                      setAllowNotifications(true);\n                    } else {\n                      setAllowNotifications(false);\n                      if (permission === 'denied') {\n                        alert(\n                          'Push notifications are blocked. Please enable them in your browser settings.',\n                        );\n                      }\n                    }\n                  } else {\n                    setAllowNotifications(false);\n                  }\n                }}\n              />{' '}\n              Allow from{' '}\n              <select\n                name=\"policy\"\n                disabled={isLoading || needRelogin || !allowNotifications}\n              >\n                {[\n                  {\n                    value: 'all',\n                    label: 'anyone',\n                  },\n                  {\n                    value: 'followed',\n                    label: 'people I follow',\n                  },\n                  {\n                    value: 'follower',\n                    label: 'followers',\n                  },\n                ].map((type) => (\n                  <option value={type.value}>{type.label}</option>\n                ))}\n              </select>\n            </label>\n            <div\n              class=\"shazam-container no-animation\"\n              style={{\n                width: '100%',\n              }}\n              hidden={!allowNotifications}\n            >\n              <div class=\"shazam-container-inner\">\n                <div class=\"sub-section\">\n                  <ul>\n                    {[\n                      {\n                        value: 'mention',\n                        label: 'Mentions',\n                      },\n                      {\n                        value: 'favourite',\n                        label: 'Likes',\n                      },\n                      {\n                        value: 'reblog',\n                        label: 'Boosts',\n                      },\n                      {\n                        value: 'follow',\n                        label: 'Follows',\n                      },\n                      {\n                        value: 'followRequest',\n                        label: 'Follow requests',\n                      },\n                      {\n                        value: 'poll',\n                        label: 'Polls',\n                      },\n                      {\n                        value: 'update',\n                        label: 'Post edits',\n                      },\n                      {\n                        value: 'status',\n                        label: 'New posts',\n                      },\n                    ].map((alert) => (\n                      <li>\n                        <label>\n                          <input type=\"checkbox\" name={alert.value} />{' '}\n                          {alert.label}\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n            {needRelogin && (\n              <div class=\"sub-section\">\n                <p>\n                  Push permission was not granted since your last login. You'll\n                  need to{' '}\n                  <Link to={`/login?instance=${instance}`} onClick={onClose}>\n                    <b>log in</b> again to grant push permission\n                  </Link>\n                  .\n                </p>\n              </div>\n            )}\n          </li>\n        </ul>\n      </section>\n      <p class=\"section-postnote\">\n        <small>\n          NOTE: Push notifications only work for <b>one account</b>.\n        </small>\n      </p>\n    </form>\n  );\n}\n\nexport default Settings;\n","const focusDeck = () => {\n  let timer = setTimeout(() => {\n    const columns = document.getElementById('columns');\n    if (columns) {\n      // Focus first column\n      // columns.querySelector('.deck-container')?.focus?.();\n    } else {\n      const modals = document.querySelectorAll('#modal-container > *');\n      if (modals?.length) {\n        // Focus last modal\n        const modal = modals[modals.length - 1]; // last one\n        const modalFocusElement =\n          modal.querySelector('[tabindex=\"-1\"]') || modal;\n        if (modalFocusElement) {\n          modalFocusElement.focus();\n          return;\n        }\n      }\n      const backDrop = document.querySelector('.deck-backdrop');\n      if (backDrop) return;\n      // Focus last deck\n      const pages = document.querySelectorAll('.deck-container');\n      const page = pages[pages.length - 1]; // last one\n      if (page && page.tabIndex === -1) {\n        console.log('FOCUS', page);\n        page.focus();\n      }\n    }\n  }, 100);\n  return () => clearTimeout(timer);\n};\n\nexport default focusDeck;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\n// Hook that runs a callback when the location changes\n// Won't run on the first render\n\nexport default function useLocationChange(fn) {\n  if (!fn) return;\n  const location = useLocation();\n  const currentLocationRef = useRef(location.pathname);\n  useEffect(() => {\n    // console.log('location', {\n    //   current: currentLocationRef.current,\n    //   next: location.pathname,\n    // });\n    if (\n      currentLocationRef.current &&\n      location.pathname !== currentLocationRef.current\n    ) {\n      fn?.();\n    }\n  }, [location.pathname, fn]);\n}\n","import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport supports from '../utils/supports';\n\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\n\nfunction ListAddEdit({ list, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!list;\n  const nameFieldRef = useRef();\n  const repliesPolicyFieldRef = useRef();\n  const exclusiveFieldRef = useRef();\n  useEffect(() => {\n    if (editMode) {\n      nameFieldRef.current.value = list.title;\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\n      if (exclusiveFieldRef.current) {\n        exclusiveFieldRef.current.checked = list.exclusive;\n      }\n    }\n  }, [editMode]);\n  const supportsExclusive = supports('@mastodon/list-exclusive');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}{' '}\n      <header>\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\n      </header>\n      <main>\n        <form\n          class=\"list-form\"\n          onSubmit={(e) => {\n            e.preventDefault(); // Get form values\n\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const repliesPolicy = formData.get('replies_policy');\n            const exclusive = formData.get('exclusive') === 'on';\n            console.log({\n              title,\n              repliesPolicy,\n              exclusive,\n            });\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let listResult;\n\n                if (editMode) {\n                  listResult = await masto.v1.lists.$select(list.id).update({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                } else {\n                  listResult = await masto.v1.lists.create({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                }\n\n                console.log(listResult);\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  list: listResult,\n                });\n              } catch (e) {\n                console.error(e);\n                setUIState('error');\n                alert(\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"list-form-row\">\n            <label for=\"list-title\">\n              Name{' '}\n              <input\n                ref={nameFieldRef}\n                type=\"text\"\n                id=\"list-title\"\n                name=\"title\"\n                required\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n              />\n            </label>\n          </div>\n          <div class=\"list-form-row\">\n            <select\n              ref={repliesPolicyFieldRef}\n              name=\"replies_policy\"\n              required\n              disabled={uiState === 'loading'}\n            >\n              <option value=\"list\">Show replies to list members</option>\n              <option value=\"followed\">Show replies to people I follow</option>\n              <option value=\"none\">Don't show replies</option>\n            </select>\n          </div>\n          {supportsExclusive && (\n            <div class=\"list-form-row\">\n              <label class=\"label-block\">\n                <input\n                  ref={exclusiveFieldRef}\n                  type=\"checkbox\"\n                  name=\"exclusive\"\n                  disabled={uiState === 'loading'}\n                />{' '}\n                Hide posts on this list from Home/Following\n              </label>\n            </div>\n          )}\n          <div class=\"list-form-footer\">\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              {editMode ? 'Save' : 'Create'}\n            </button>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this list?\"\n                onClick={() => {\n                  // const yes = confirm('Delete this list?');\n                  // if (!yes) return;\n                  setUIState('loading');\n\n                  (async () => {\n                    try {\n                      await masto.v1.lists.$select(list.id).remove();\n                      setUIState('default');\n                      onClose?.({\n                        state: 'deleted',\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete list.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ListAddEdit;\n","import './account-info.css';\n\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport getHTMLText from '../utils/getHTMLText';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\nimport { updateAccount } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport EmojiText from './emoji-text';\nimport Icon from './icon';\nimport Link from './link';\nimport ListAddEdit from './list-add-edit';\nimport Loader from './loader';\nimport Menu2 from './menu2';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nconst MUTE_DURATIONS = [\n  60 * 5, // 5 minutes\n  60 * 30, // 30 minutes\n  60 * 60, // 1 hour\n  60 * 60 * 6, // 6 hours\n  60 * 60 * 24, // 1 day\n  60 * 60 * 24 * 3, // 3 days\n  60 * 60 * 24 * 7, // 1 week\n  0, // forever\n];\nconst MUTE_DURATIONS_LABELS = {\n  0: 'Forever',\n  300: '5 minutes',\n  1_800: '30 minutes',\n  3_600: '1 hour',\n  21_600: '6 hours',\n  86_400: '1 day',\n  259_200: '3 days',\n  604_800: '1 week',\n};\n\nconst LIMIT = 80;\n\nconst ACCOUNT_INFO_MAX_AGE = 1000 * 60 * 10; // 10 mins\n\nfunction fetchFamiliarFollowers(currentID, masto) {\n  return masto.v1.accounts.familiarFollowers.fetch({\n    id: [currentID],\n  });\n}\nconst memFetchFamiliarFollowers = pmem(fetchFamiliarFollowers, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nasync function fetchPostingStats(accountID, masto) {\n  const fetchStatuses = masto.v1.accounts\n    .$select(accountID)\n    .statuses.list({\n      limit: 20,\n    })\n    .next();\n\n  const { value: statuses } = await fetchStatuses;\n  console.log('fetched statuses', statuses);\n  const stats = {\n    total: statuses.length,\n    originals: 0,\n    replies: 0,\n    boosts: 0,\n  };\n  // Categories statuses by type\n  // - Original posts (not replies to others)\n  // - Threads (self-replies + 1st original post)\n  // - Boosts (reblogs)\n  // - Replies (not-self replies)\n  statuses.forEach((status) => {\n    if (status.reblog) {\n      stats.boosts++;\n    } else if (\n      !!status.inReplyToId &&\n      status.inReplyToAccountId !== status.account.id // Not self-reply\n    ) {\n      stats.replies++;\n    } else {\n      stats.originals++;\n    }\n  });\n\n  // Count days since last post\n  if (statuses.length) {\n    stats.daysSinceLastPost = Math.ceil(\n      (Date.now() - new Date(statuses[statuses.length - 1].createdAt)) /\n        86400000,\n    );\n  }\n\n  console.log('posting stats', stats);\n  return stats;\n}\nconst memFetchPostingStats = pmem(fetchPostingStats, {\n  maxAge: ACCOUNT_INFO_MAX_AGE,\n});\n\nfunction AccountInfo({\n  account,\n  fetchAccount = () => {},\n  standalone,\n  instance,\n  authenticated,\n}) {\n  const { masto } = api({\n    instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n\n  useEffect(() => {\n    if (!isString) {\n      setInfo(account);\n      return;\n    }\n    setUIState('loading');\n    (async () => {\n      try {\n        const info = await fetchAccount();\n        states.accounts[`${info.id}@${instance}`] = info;\n        setInfo(info);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setInfo(null);\n        setUIState('error');\n      }\n    })();\n  }, [isString, account, fetchAccount]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    // header,\n    // headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n    memorial,\n    moved,\n    roles,\n  } = info || {};\n  let headerIsAvatar = false;\n  let { header, headerStatic } = info || {};\n  if (!header || /missing\\.png$/.test(header)) {\n    if (avatar && !/missing\\.png$/.test(avatar)) {\n      header = avatar;\n      headerIsAvatar = true;\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\n        headerStatic = avatarStatic;\n      }\n    }\n  }\n\n  const isSelf = useMemo(\n    () => id === store.session.get('currentAccount'),\n    [id],\n  );\n\n  useEffect(() => {\n    const infoHasEssentials = !!(\n      info?.id &&\n      info?.username &&\n      info?.acct &&\n      info?.avatar &&\n      info?.avatarStatic &&\n      info?.displayName &&\n      info?.url\n    );\n    if (isSelf && instance && infoHasEssentials) {\n      const accounts = store.local.getJSON('accounts');\n      let updated = false;\n      accounts.forEach((account) => {\n        if (account.info.id === info.id && account.instanceURL === instance) {\n          account.info = info;\n          updated = true;\n        }\n      });\n      if (updated) {\n        console.log('Updated account info', info);\n        store.local.setJSON('accounts', accounts);\n      }\n    }\n  }, [isSelf, info, instance]);\n\n  const accountInstance = useMemo(() => {\n    if (!url) return null;\n    const domain = new URL(url).hostname;\n    return domain;\n  }, [url]);\n\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\n\n  const followersIterator = useRef();\n  const familiarFollowersCache = useRef([]);\n  async function fetchFollowers(firstLoad) {\n    if (firstLoad || !followersIterator.current) {\n      followersIterator.current = masto.v1.accounts.$select(id).followers.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followersIterator.current.next();\n    if (isSelf) return results;\n    if (!sameCurrentInstance) return results;\n\n    const { value } = results;\n    let newValue = [];\n    // On first load, fetch familiar followers, merge to top of results' `value`\n    // Remove dups on every fetch\n    if (firstLoad) {\n      const familiarFollowers = await masto.v1.accounts.familiarFollowers.fetch(\n        {\n          id: [id],\n        },\n      );\n      familiarFollowersCache.current = familiarFollowers[0].accounts;\n      newValue = [\n        ...familiarFollowersCache.current,\n        ...value.filter(\n          (account) =>\n            !familiarFollowersCache.current.some(\n              (familiar) => familiar.id === account.id,\n            ),\n        ),\n      ];\n    } else if (value?.length) {\n      newValue = value.filter(\n        (account) =>\n          !familiarFollowersCache.current.some(\n            (familiar) => familiar.id === account.id,\n          ),\n      );\n    }\n\n    return {\n      ...results,\n      value: newValue,\n    };\n  }\n\n  const followingIterator = useRef();\n  async function fetchFollowing(firstLoad) {\n    if (firstLoad || !followingIterator.current) {\n      followingIterator.current = masto.v1.accounts.$select(id).following.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await followingIterator.current.next();\n    return results;\n  }\n\n  const LinkOrDiv = standalone ? 'div' : Link;\n  const accountLink = instance ? `/${instance}/a/${id}` : `/a/${id}`;\n\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n  const [postingStats, setPostingStats] = useState();\n  const [postingStatsUIState, setPostingStatsUIState] = useState('default');\n  const hasPostingStats = !!postingStats?.total;\n\n  const renderFamiliarFollowers = async (currentID) => {\n    try {\n      const followers = await memFetchFamiliarFollowers(\n        currentID,\n        currentMasto,\n      );\n      console.log('fetched familiar followers', followers);\n      setFamiliarFollowers(\n        followers[0].accounts.slice(0, FAMILIAR_FOLLOWERS_LIMIT),\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const renderPostingStats = async () => {\n    if (!id) return;\n    setPostingStatsUIState('loading');\n    try {\n      const stats = await memFetchPostingStats(id, masto);\n      setPostingStats(stats);\n      setPostingStatsUIState('default');\n    } catch (e) {\n      console.error(e);\n      setPostingStatsUIState('error');\n    }\n  };\n\n  const onRelationshipChange = useCallback(\n    ({ relationship, currentID }) => {\n      if (!relationship.following) {\n        renderFamiliarFollowers(currentID);\n        if (!standalone && statusesCount > 0) {\n          // Only render posting stats if not standalone and has posts\n          renderPostingStats();\n        }\n      }\n    },\n    [standalone, id, statusesCount],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      class={`account-container  ${uiState === 'loading' ? 'skeleton' : ''}`}\n      style={{\n        '--header-color-1': headerCornerColors[0],\n        '--header-color-2': headerCornerColors[1],\n        '--header-color-3': headerCornerColors[2],\n        '--header-color-4': headerCornerColors[3],\n      }}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a\n              href={isString ? account : url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>███████ ████ ████</p>\n              <p>████ ████████ ██████ █████████ ████ ██</p>\n            </div>\n            <div class=\"account-metadata-box\">\n              <div class=\"profile-metadata\">\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">███</b>\n                  <p>██████</p>\n                </div>\n                <div class=\"profile-field\">\n                  <b class=\"more-insignificant\">████</b>\n                  <p>███████████</p>\n                </div>\n              </div>\n              <div class=\"stats\">\n                <div>\n                  <span>██</span> Followers\n                </div>\n                <div>\n                  <span>██</span> Following\n                </div>\n                <div>\n                  <span>██</span> Posts\n                </div>\n              </div>\n            </div>\n            <div class=\"actions\">\n              <span />\n              <span class=\"buttons\">\n                <button type=\"button\" title=\"More\" class=\"plain\" disabled>\n                  <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                </button>\n              </span>\n            </div>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            {!!moved && (\n              <div class=\"account-moved\">\n                <p>\n                  <b>{displayName}</b> has indicated that their new account is\n                  now:\n                </p>\n                <AccountBlock\n                  account={moved}\n                  instance={instance}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    states.showAccount = moved;\n                  }}\n                />\n              </div>\n            )}\n            {!!header && !/missing\\.png$/.test(header) && (\n              <img\n                src={header}\n                alt=\"\"\n                class={`header-banner ${\n                  headerIsAvatar ? 'header-is-avatar' : ''\n                }`}\n                onError={(e) => {\n                  if (e.target.crossOrigin) {\n                    if (e.target.src !== headerStatic) {\n                      e.target.src = headerStatic;\n                    } else {\n                      e.target.removeAttribute('crossorigin');\n                      e.target.src = header;\n                    }\n                  } else if (e.target.src !== headerStatic) {\n                    e.target.src = headerStatic;\n                  } else {\n                    e.target.remove();\n                  }\n                }}\n                crossOrigin=\"anonymous\"\n                onLoad={(e) => {\n                  e.target.classList.add('loaded');\n                  try {\n                    // Get color from four corners of image\n                    const canvas = document.createElement('canvas');\n                    const ctx = canvas.getContext('2d', {\n                      willReadFrequently: true,\n                    });\n                    canvas.width = e.target.width;\n                    canvas.height = e.target.height;\n                    ctx.drawImage(e.target, 0, 0);\n                    // const colors = [\n                    //   ctx.getImageData(0, 0, 1, 1).data,\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\n                    //   ctx.getImageData(\n                    //     e.target.width - 1,\n                    //     e.target.height - 1,\n                    //     1,\n                    //     1,\n                    //   ).data,\n                    // ];\n                    // Get 10x10 pixels from corners, get average color from each\n                    const pixelDimension = 10;\n                    const colors = [\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\n                        .data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        0,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        0,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                    ].map((data) => {\n                      let r = 0;\n                      let g = 0;\n                      let b = 0;\n                      let a = 0;\n                      for (let i = 0; i < data.length; i += 4) {\n                        r += data[i];\n                        g += data[i + 1];\n                        b += data[i + 2];\n                        a += data[i + 3];\n                      }\n                      const dataLength = data.length / 4;\n                      return [\n                        r / dataLength,\n                        g / dataLength,\n                        b / dataLength,\n                        a / dataLength,\n                      ];\n                    });\n                    const rgbColors = colors.map((color) => {\n                      const [r, g, b, a] = lightenRGB(color);\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\n                    });\n                    setHeaderCornerColors(rgbColors);\n                    console.log({ colors, rgbColors });\n                  } catch (e) {\n                    // Silently fail\n                  }\n                }}\n              />\n            )}\n            <header>\n              <AccountBlock\n                account={info}\n                instance={instance}\n                avatarSize=\"xxxl\"\n                external={standalone}\n                internal={!standalone}\n              />\n            </header>\n            <div class=\"faux-header-bg\" aria-hidden=\"true\" />\n            <main>\n              {!!memorial && <span class=\"tag\">In Memoriam</span>}\n              {!!bot && (\n                <span class=\"tag\">\n                  <Icon icon=\"bot\" /> Automated\n                </span>\n              )}\n              {!!group && (\n                <span class=\"tag\">\n                  <Icon icon=\"group\" /> Group\n                </span>\n              )}\n              {roles?.map((role) => (\n                <span class=\"tag\">\n                  {role.name}\n                  {!!accountInstance && (\n                    <>\n                      {' '}\n                      <span class=\"more-insignificant\">{accountInstance}</span>\n                    </>\n                  )}\n                </span>\n              ))}\n              <div\n                class=\"note\"\n                dir=\"auto\"\n                onClick={handleContentLinks({\n                  instance: currentInstance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              <div class=\"account-metadata-box\">\n                {fields?.length > 0 && (\n                  <div class=\"profile-metadata\">\n                    {fields.map(({ name, value, verifiedAt }, i) => (\n                      <div\n                        class={`profile-field ${\n                          verifiedAt ? 'profile-verified' : ''\n                        }`}\n                        key={name + i}\n                        dir=\"auto\"\n                      >\n                        <b>\n                          <EmojiText text={name} emojis={emojis} />{' '}\n                          {!!verifiedAt && (\n                            <Icon icon=\"check-circle\" size=\"s\" />\n                          )}\n                        </b>\n                        <p\n                          dangerouslySetInnerHTML={{\n                            __html: enhanceContent(value, { emojis }),\n                          }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <div class=\"stats\">\n                  <LinkOrDiv\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Followers',\n                          fetchAccounts: fetchFollowers,\n                          instance,\n                          excludeRelationshipAttrs: isSelf\n                            ? ['followedBy']\n                            : [],\n                        };\n                      }, 0);\n                    }}\n                  >\n                    {!!familiarFollowers.length && (\n                      <span class=\"shazam-container-horizontal\">\n                        <span class=\"shazam-container-inner stats-avatars-bunch\">\n                          {familiarFollowers.map((follower) => (\n                            <Avatar\n                              url={follower.avatarStatic}\n                              size=\"s\"\n                              alt={`${follower.displayName} @${follower.acct}`}\n                              squircle={follower?.bot}\n                            />\n                          ))}\n                        </span>\n                      </span>\n                    )}\n                    <span title={followersCount}>\n                      {shortenNumber(followersCount)}\n                    </span>{' '}\n                    Followers\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    tabIndex={0}\n                    to={accountLink}\n                    onClick={() => {\n                      // states.showAccount = false;\n                      setTimeout(() => {\n                        states.showGenericAccounts = {\n                          heading: 'Following',\n                          fetchAccounts: fetchFollowing,\n                          instance,\n                          excludeRelationshipAttrs: isSelf ? ['following'] : [],\n                        };\n                      }, 0);\n                    }}\n                  >\n                    <span title={followingCount}>\n                      {shortenNumber(followingCount)}\n                    </span>{' '}\n                    Following\n                    <br />\n                  </LinkOrDiv>\n                  <LinkOrDiv\n                    class=\"insignificant\"\n                    to={accountLink}\n                    // onClick={\n                    //   standalone\n                    //     ? undefined\n                    //     : () => {\n                    //         hideAllModals();\n                    //       }\n                    // }\n                  >\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </LinkOrDiv>\n                  {!!createdAt && (\n                    <div class=\"insignificant\">\n                      Joined{' '}\n                      <time datetime={createdAt}>\n                        {niceDateTime(createdAt, {\n                          hideTime: true,\n                        })}\n                      </time>\n                    </div>\n                  )}\n                </div>\n              </div>\n              {!!postingStats && (\n                <LinkOrDiv\n                  to={accountLink}\n                  class=\"account-metadata-box\"\n                  // onClick={() => {\n                  //   states.showAccount = false;\n                  // }}\n                >\n                  <div class=\"shazam-container\">\n                    <div class=\"shazam-container-inner\">\n                      {hasPostingStats ? (\n                        <div\n                          class=\"posting-stats\"\n                          title={`${Math.round(\n                            (postingStats.originals / postingStats.total) * 100,\n                          )}% original posts, ${Math.round(\n                            (postingStats.replies / postingStats.total) * 100,\n                          )}% replies, ${Math.round(\n                            (postingStats.boosts / postingStats.total) * 100,\n                          )}% boosts`}\n                        >\n                          <div>\n                            {postingStats.daysSinceLastPost < 365\n                              ? `Last ${postingStats.total} post${\n                                  postingStats.total > 1 ? 's' : ''\n                                } in the past \n                      ${postingStats.daysSinceLastPost} day${\n                                  postingStats.daysSinceLastPost > 1 ? 's' : ''\n                                }`\n                              : `\n                      Last ${postingStats.total} posts in the past year(s)\n                      `}\n                          </div>\n                          <div\n                            class=\"posting-stats-bar\"\n                            style={{\n                              // [originals | replies | boosts]\n                              '--originals-percentage': `${\n                                (postingStats.originals / postingStats.total) *\n                                100\n                              }%`,\n                              '--replies-percentage': `${\n                                ((postingStats.originals +\n                                  postingStats.replies) /\n                                  postingStats.total) *\n                                100\n                              }%`,\n                            }}\n                          />\n                          <div class=\"posting-stats-legends\">\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-originals\" />{' '}\n                              Original\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-replies\" />{' '}\n                              Replies\n                            </span>{' '}\n                            <span class=\"ib\">\n                              <span class=\"posting-stats-legend-item posting-stats-legend-item-boosts\" />{' '}\n                              Boosts\n                            </span>\n                          </div>\n                        </div>\n                      ) : (\n                        <div class=\"posting-stats\">Post stats unavailable.</div>\n                      )}\n                    </div>\n                  </div>\n                </LinkOrDiv>\n              )}\n              <div class=\"account-metadata-box\">\n                <div\n                  class=\"shazam-container no-animation\"\n                  hidden={!!postingStats}\n                >\n                  <div class=\"shazam-container-inner\">\n                    <button\n                      type=\"button\"\n                      class=\"posting-stats-button\"\n                      disabled={postingStatsUIState === 'loading'}\n                      onClick={() => {\n                        renderPostingStats();\n                      }}\n                    >\n                      <div\n                        class={`posting-stats-bar posting-stats-icon ${\n                          postingStatsUIState === 'loading' ? 'loading' : ''\n                        }`}\n                        style={{\n                          '--originals-percentage': '33%',\n                          '--replies-percentage': '66%',\n                        }}\n                      />\n                      View post stats{' '}\n                      {/* <Loader\n                        abrupt\n                        hidden={postingStatsUIState !== 'loading'}\n                      /> */}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </main>\n            <footer>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                authenticated={authenticated}\n                onRelationshipChange={onRelationshipChange}\n              />\n            </footer>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nconst FAMILIAR_FOLLOWERS_LIMIT = 3;\n\nfunction RelatedActions({\n  info,\n  instance,\n  authenticated,\n  onRelationshipChange = () => {},\n}) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n\n  const { id, acct, url, username, locked, lastStatusAt, note, fields, moved } =\n    info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n    note: privateNote,\n  } = relationship || {};\n\n  const [currentInfo, setCurrentInfo] = useState(null);\n  const [isSelf, setIsSelf] = useState(false);\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = store.session.get('currentAccount');\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search.fetch({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            if (results.accounts.length) {\n              currentID = results.accounts[0].id;\n              setCurrentInfo(results.accounts[0]);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          setIsSelf(true);\n          return;\n        }\n\n        accountID.current = currentID;\n\n        if (moved) return;\n\n        setRelationshipUIState('loading');\n\n        const fetchRelationships = currentMasto.v1.accounts.relationships.fetch(\n          {\n            id: [currentID],\n          },\n        );\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          setRelationshipUIState('default');\n\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n            onRelationshipChange({ relationship, currentID });\n          }\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  useEffect(() => {\n    if (info && isSelf) {\n      updateAccount(info);\n    }\n  }, [info, isSelf]);\n\n  const loading = relationshipUIState === 'loading';\n\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\n  const [showPrivateNoteModal, setShowPrivateNoteModal] = useState(false);\n\n  return (\n    <>\n      <div class=\"actions\">\n        <span>\n          {followedBy ? (\n            <span class=\"tag\">Follows you</span>\n          ) : !!lastStatusAt ? (\n            <small class=\"insignificant\">\n              Last post:{' '}\n              <span class=\"ib\">\n                {niceDateTime(lastStatusAt, {\n                  hideTime: true,\n                })}\n              </span>\n            </small>\n          ) : (\n            <span />\n          )}\n          {muting && <span class=\"tag danger\">Muted</span>}\n          {blocking && <span class=\"tag danger\">Blocked</span>}\n        </span>{' '}\n        <span class=\"buttons\">\n          {!!privateNote && (\n            <button\n              type=\"button\"\n              class=\"private-note-tag\"\n              title=\"Private note\"\n              onClick={() => {\n                setShowPrivateNoteModal(true);\n              }}\n              dir=\"auto\"\n            >\n              <span>{privateNote}</span>\n            </button>\n          )}\n          <Menu2\n            portal={{\n              target: document.body,\n            }}\n            containerProps={{\n              style: {\n                // Higher than the backdrop\n                zIndex: 1001,\n              },\n            }}\n            align=\"center\"\n            position=\"anchor\"\n            overflow=\"auto\"\n            menuButton={\n              <button\n                type=\"button\"\n                title=\"More\"\n                class=\"plain\"\n                disabled={loading}\n              >\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n              </button>\n            }\n          >\n            {currentAuthenticated && !isSelf && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    states.showCompose = {\n                      draftStatus: {\n                        status: `@${currentInfo?.acct || acct} `,\n                      },\n                    };\n                  }}\n                >\n                  <Icon icon=\"at\" />\n                  <span>Mention @{username}</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowTranslatedBio(true);\n                  }}\n                >\n                  <Icon icon=\"translate\" />\n                  <span>Translate bio</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowPrivateNoteModal(true);\n                  }}\n                >\n                  <Icon icon=\"pencil\" />\n                  <span>\n                    {privateNote ? 'Edit private note' : 'Add private note'}\n                  </span>\n                </MenuItem>\n                {/* Add/remove from lists is only possible if following the account */}\n                {following && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowAddRemoveLists(true);\n                    }}\n                  >\n                    <Icon icon=\"list\" />\n                    <span>Add/remove from Lists</span>\n                  </MenuItem>\n                )}\n                <MenuDivider />\n              </>\n            )}\n            <MenuItem href={url} target=\"_blank\">\n              <Icon icon=\"external\" />\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\n            </MenuItem>\n            <div class=\"menu-horizontal\">\n              <MenuItem\n                onClick={() => {\n                  // Copy url to clipboard\n                  try {\n                    navigator.clipboard.writeText(url);\n                    showToast('Link copied');\n                  } catch (e) {\n                    console.error(e);\n                    showToast('Unable to copy link');\n                  }\n                }}\n              >\n                <Icon icon=\"link\" />\n                <span>Copy</span>\n              </MenuItem>\n              {navigator?.share &&\n                navigator?.canShare?.({\n                  url,\n                }) && (\n                  <MenuItem\n                    onClick={() => {\n                      try {\n                        navigator.share({\n                          url,\n                        });\n                      } catch (e) {\n                        console.error(e);\n                        alert(\"Sharing doesn't seem to work.\");\n                      }\n                    }}\n                  >\n                    <Icon icon=\"share\" />\n                    <span>Share…</span>\n                  </MenuItem>\n                )}\n            </div>\n            {!!relationship && (\n              <>\n                <MenuDivider />\n                {muting ? (\n                  <MenuItem\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unmute();\n                          console.log('unmuting', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unmuted @${username}`);\n                          states.reloadGenericAccounts.id = 'mute';\n                          states.reloadGenericAccounts.counter++;\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"unmute\" />\n                    <span>Unmute @{username}</span>\n                  </MenuItem>\n                ) : (\n                  <SubMenu\n                    openTrigger=\"clickOnly\"\n                    direction=\"bottom\"\n                    overflow=\"auto\"\n                    shift={16}\n                    label={\n                      <>\n                        <Icon icon=\"mute\" />\n                        <span class=\"menu-grow\">Mute @{username}…</span>\n                        <span\n                          style={{\n                            textOverflow: 'clip',\n                          }}\n                        >\n                          <Icon icon=\"time\" />\n                          <Icon icon=\"chevron-right\" />\n                        </span>\n                      </>\n                    }\n                  >\n                    <div class=\"menu-wrap\">\n                      {MUTE_DURATIONS.map((duration) => (\n                        <MenuItem\n                          onClick={() => {\n                            setRelationshipUIState('loading');\n                            (async () => {\n                              try {\n                                const newRelationship =\n                                  await currentMasto.v1.accounts\n                                    .$select(currentInfo?.id || id)\n                                    .mute({\n                                      duration,\n                                    });\n                                console.log('muting', newRelationship);\n                                setRelationship(newRelationship);\n                                setRelationshipUIState('default');\n                                showToast(\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\n                                );\n                                states.reloadGenericAccounts.id = 'mute';\n                                states.reloadGenericAccounts.counter++;\n                              } catch (e) {\n                                console.error(e);\n                                setRelationshipUIState('error');\n                                showToast(`Unable to mute @${username}`);\n                              }\n                            })();\n                          }}\n                        >\n                          {MUTE_DURATIONS_LABELS[duration]}\n                        </MenuItem>\n                      ))}\n                    </div>\n                  </SubMenu>\n                )}\n                <MenuConfirm\n                  subMenu\n                  confirm={!blocking}\n                  confirmLabel={\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}?</span>\n                    </>\n                  }\n                  menuItemClassName=\"danger\"\n                  onClick={() => {\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\n                    //   return;\n                    // }\n                    setRelationshipUIState('loading');\n                    (async () => {\n                      try {\n                        if (blocking) {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .unblock();\n                          console.log('unblocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unblocked @${username}`);\n                        } else {\n                          const newRelationship = await currentMasto.v1.accounts\n                            .$select(currentInfo?.id || id)\n                            .block();\n                          console.log('blocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Blocked @${username}`);\n                        }\n                        states.reloadGenericAccounts.id = 'block';\n                        states.reloadGenericAccounts.counter++;\n                      } catch (e) {\n                        console.error(e);\n                        setRelationshipUIState('error');\n                        if (blocking) {\n                          showToast(`Unable to unblock @${username}`);\n                        } else {\n                          showToast(`Unable to block @${username}`);\n                        }\n                      }\n                    })();\n                  }}\n                >\n                  {blocking ? (\n                    <>\n                      <Icon icon=\"unblock\" />\n                      <span>Unblock @{username}</span>\n                    </>\n                  ) : (\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}…</span>\n                    </>\n                  )}\n                </MenuConfirm>\n                {/* <MenuItem>\n                <Icon icon=\"flag\" />\n                <span>Report @{username}…</span>\n              </MenuItem> */}\n              </>\n            )}\n          </Menu2>\n          {!relationship && relationshipUIState === 'loading' && (\n            <Loader abrupt />\n          )}\n          {!!relationship && (\n            <MenuConfirm\n              confirm={following || requested}\n              confirmLabel={\n                <span>\n                  {requested\n                    ? 'Withdraw follow request?'\n                    : `Unfollow @${info.acct || info.username}?`}\n                </span>\n              }\n              menuItemClassName=\"danger\"\n              align=\"end\"\n              disabled={loading}\n              onClick={() => {\n                setRelationshipUIState('loading');\n                (async () => {\n                  try {\n                    let newRelationship;\n\n                    if (following || requested) {\n                      // const yes = confirm(\n                      //   requested\n                      //     ? 'Withdraw follow request?'\n                      //     : `Unfollow @${info.acct || info.username}?`,\n                      // );\n\n                      // if (yes) {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .unfollow();\n                      // }\n                    } else {\n                      newRelationship = await currentMasto.v1.accounts\n                        .$select(accountID.current)\n                        .follow();\n                    }\n\n                    if (newRelationship) setRelationship(newRelationship);\n                    setRelationshipUIState('default');\n                  } catch (e) {\n                    alert(e);\n                    setRelationshipUIState('error');\n                  }\n                })();\n              }}\n            >\n              <button\n                type=\"button\"\n                class={`${following || requested ? 'light swap' : ''}`}\n                data-swap-state={following || requested ? 'danger' : ''}\n                disabled={loading}\n              >\n                {following ? (\n                  <>\n                    <span>Following</span>\n                    <span>Unfollow…</span>\n                  </>\n                ) : requested ? (\n                  <>\n                    <span>Requested</span>\n                    <span>Withdraw…</span>\n                  </>\n                ) : locked ? (\n                  <>\n                    <Icon icon=\"lock\" /> <span>Follow</span>\n                  </>\n                ) : (\n                  'Follow'\n                )}\n              </button>\n            </MenuConfirm>\n          )}\n        </span>\n      </div>\n      {!!showTranslatedBio && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowTranslatedBio(false);\n          }}\n        >\n          <TranslatedBioSheet\n            note={note}\n            fields={fields}\n            onClose={() => setShowTranslatedBio(false)}\n          />\n        </Modal>\n      )}\n      {!!showAddRemoveLists && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowAddRemoveLists(false);\n          }}\n        >\n          <AddRemoveListsSheet\n            accountID={accountID.current}\n            onClose={() => setShowAddRemoveLists(false)}\n          />\n        </Modal>\n      )}\n      {!!showPrivateNoteModal && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            setShowPrivateNoteModal(false);\n          }}\n        >\n          <PrivateNoteSheet\n            account={info}\n            note={privateNote}\n            onRelationshipChange={(relationship) => {\n              setRelationship(relationship);\n              // onRelationshipChange({ relationship, currentID: accountID.current });\n            }}\n            onClose={() => setShowPrivateNoteModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// Apply more alpha if high luminence\nfunction lightenRGB([r, g, b]) {\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  console.log('luminence', luminence);\n  let alpha;\n  if (luminence >= 220) {\n    alpha = 1;\n  } else if (luminence <= 50) {\n    alpha = 0.1;\n  } else {\n    alpha = luminence / 255;\n  }\n  alpha = Math.min(1, alpha);\n  return [r, g, b, alpha];\n}\n\nfunction niceAccountURL(url) {\n  if (!url) return;\n  const urlObj = new URL(url);\n  const { host, pathname } = urlObj;\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\n  return (\n    <>\n      <span class=\"more-insignificant\">{host}/</span>\n      <wbr />\n      <span>{path}</span>\n    </>\n  );\n}\n\nfunction TranslatedBioSheet({ note, fields, onClose }) {\n  const fieldsText =\n    fields\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\n      .join('\\n\\n') || '';\n\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Translated Bio</h2>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {text}\n        </p>\n        <TranslationBlock forceTranslate text={text} />\n      </main>\n    </div>\n  );\n}\n\nfunction AddRemoveListsSheet({ accountID, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        const listsContainingAccount = await masto.v1.accounts\n          .$select(accountID)\n          .lists.list();\n        console.log({ lists, listsContainingAccount });\n        setLists(lists);\n        setListsContainingAccount(listsContainingAccount);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div class=\"sheet\" id=\"list-add-remove-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Add/Remove from Lists</h2>\n      </header>\n      <main>\n        {lists.length > 0 ? (\n          <ul class=\"list-add-remove\">\n            {lists.map((list) => {\n              const inList = listsContainingAccount.some(\n                (l) => l.id === list.id,\n              );\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    class={`light ${inList ? 'checked' : ''}`}\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          if (inList) {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.remove({\n                                accountIds: [accountID],\n                              });\n                          } else {\n                            await masto.v1.lists\n                              .$select(list.id)\n                              .accounts.create({\n                                accountIds: [accountID],\n                              });\n                          }\n                          // setUIState('default');\n                          reload();\n                        } catch (e) {\n                          console.error(e);\n                          setUIState('error');\n                          alert(\n                            inList\n                              ? 'Unable to remove from list.'\n                              : 'Unable to add to list.',\n                          );\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"check-circle\" />\n                    <span>{list.title}</span>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Unable to load lists.</p>\n        ) : (\n          <p class=\"ui-state\">No lists.</p>\n        )}\n        <button\n          type=\"button\"\n          class=\"plain2\"\n          onClick={() => setShowListAddEditModal(true)}\n          disabled={uiState !== 'default'}\n        >\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\n        </button>\n      </main>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction PrivateNoteSheet({\n  account,\n  note: initialNote,\n  onRelationshipChange = () => {},\n  onClose = () => {},\n}) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    let timer;\n    if (textareaRef.current && !initialNote) {\n      timer = setTimeout(() => {\n        textareaRef.current.focus?.();\n      }, 100);\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"private-note-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <b>Private note about @{account?.username || account?.acct}</b>\n      </header>\n      <main>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const note = formData.get('note');\n            if (note?.trim() !== initialNote?.trim()) {\n              setUIState('loading');\n              (async () => {\n                try {\n                  const newRelationship = await masto.v1.accounts\n                    .$select(account?.id)\n                    .note.create({\n                      comment: note,\n                    });\n                  console.log('updated relationship', newRelationship);\n                  setUIState('default');\n                  onRelationshipChange(newRelationship);\n                  onClose();\n                } catch (e) {\n                  console.error(e);\n                  setUIState('error');\n                  alert(e?.message || 'Unable to update private note.');\n                }\n              })();\n            }\n          }}\n        >\n          <textarea\n            ref={textareaRef}\n            name=\"note\"\n            disabled={uiState === 'loading'}\n          >\n            {initialNote}\n          </textarea>\n          <footer>\n            <button\n              type=\"button\"\n              class=\"light\"\n              disabled={uiState === 'loading'}\n              onClick={() => {\n                onClose?.();\n              }}\n            >\n              Cancel\n            </button>\n            <span>\n              <Loader abrupt hidden={uiState !== 'loading'} />\n              <button disabled={uiState === 'loading'} type=\"submit\">\n                Save &amp; close\n              </button>\n            </span>\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default AccountInfo;\n","import { useEffect } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountInfo from './account-info';\nimport Icon from './icon';\n\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const isString = typeof account === 'string';\n\n  useEffect(() => {\n    if (!isString) {\n      states.accounts[`${account.id}@${instance}`] = account;\n    }\n  }, [account]);\n\n  useLocationChange(onClose);\n\n  return (\n    <div\n      class=\"sheet\"\n      // onClick={(e) => {\n      //   const accountBlock = e.target.closest('.account-block');\n      //   if (accountBlock) {\n      //     onClose({\n      //       destination: 'account-statuses',\n      //     });\n      //   }\n      // }}\n    >\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <AccountInfo\n        instance={instance}\n        authenticated={authenticated}\n        account={account}\n        fetchAccount={async () => {\n          if (isString) {\n            try {\n              const info = await masto.v1.accounts.lookup({\n                acct: account,\n                skip_webfinger: false,\n              });\n              return info;\n            } catch (e) {\n              const result = await masto.v2.search.fetch({\n                q: account,\n                type: 'accounts',\n                limit: 1,\n                resolve: authenticated,\n              });\n              if (result.accounts.length) {\n                return result.accounts[0];\n              } else if (/https?:\\/\\/[^/]+\\/@/.test(account)) {\n                const accountURL = new URL(account);\n                const { hostname, pathname } = accountURL;\n                const acct =\n                  pathname.replace(/^\\//, '').replace(/\\/$/, '') +\n                  '@' +\n                  hostname;\n                const result = await masto.v2.search.fetch({\n                  q: acct,\n                  type: 'accounts',\n                  limit: 1,\n                  resolve: authenticated,\n                });\n                if (result.accounts.length) {\n                  return result.accounts[0];\n                }\n              }\n            }\n          } else {\n            return account;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountSheet;\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport niceDateTime from '../utils/nice-date-time';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\n\nfunction Drafts({ onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {niceDateTime(updatedAtDate)}\n                        </time>\n                      </b>\n                      <MenuConfirm\n                        confirmLabel={<span>Delete this draft?</span>}\n                        menuItemClassName=\"danger\"\n                        align=\"end\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              // const yes = confirm('Delete this draft?');\n                              // if (yes) {\n                              await db.drafts.del(key);\n                              reload();\n                              // }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        <button\n                          type=\"button\"\n                          class=\"small light\"\n                          disabled={uiState === 'loading'}\n                        >\n                          Delete&hellip;\n                        </button>\n                      </MenuConfirm>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses\n                              .$select(replyTo.id)\n                              .fetch();\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            {drafts.length > 1 && (\n              <p>\n                <MenuConfirm\n                  confirmLabel={<span>Delete all drafts?</span>}\n                  menuItemClassName=\"danger\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => {\n                    (async () => {\n                      // const yes = confirm('Delete all drafts?');\n                      // if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                      // }\n                    })();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"light danger\"\n                    disabled={uiState === 'loading'}\n                  >\n                    Delete all&hellip;\n                  </button>\n                </MenuConfirm>\n              </p>\n            )}\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import './embed-modal.css';\n\nimport Icon from './icon';\n\nfunction EmbedModal({ html, url, width, height, onClose = () => {} }) {\n  return (\n    <div class=\"embed-modal-container\">\n      <div class=\"top-controls\">\n        <button type=\"button\" class=\"light\" onClick={() => onClose()}>\n          <Icon icon=\"x\" />\n        </button>\n        {url && (\n          <a\n            href={url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            class=\"button plain\"\n          >\n            <span>Open link</span> <Icon icon=\"external\" />\n          </a>\n        )}\n      </div>\n      <div\n        class=\"embed-content\"\n        dangerouslySetInnerHTML={{ __html: html }}\n        style={{\n          '--width': width + 'px',\n          '--height': height + 'px',\n          '--aspect-ratio': `${width}/${height}`,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default EmbedModal;\n","import { api } from './api';\nimport store from './store';\n\nexport async function fetchRelationships(accounts, relationshipsMap = {}) {\n  if (!accounts?.length) return;\n  const { masto } = api();\n\n  const currentAccount = store.session.get('currentAccount');\n  const uniqueAccountIds = accounts.reduce((acc, a) => {\n    // 1. Ignore duplicate accounts\n    // 2. Ignore accounts that are already inside relationshipsMap\n    // 3. Ignore currently logged in account\n    if (\n      !acc.includes(a.id) &&\n      !relationshipsMap[a.id] &&\n      a.id !== currentAccount\n    ) {\n      acc.push(a.id);\n    }\n    return acc;\n  }, []);\n  if (!uniqueAccountIds.length) return null;\n\n  try {\n    const relationships = await masto.v1.accounts.relationships.fetch({\n      id: uniqueAccountIds,\n    });\n    const newRelationshipsMap = relationships.reduce((acc, r) => {\n      acc[r.id] = r;\n      return acc;\n    }, {});\n    return newRelationshipsMap;\n  } catch (e) {\n    console.error(e);\n    // It's okay to fail\n    return null;\n  }\n}\n","import './generic-accounts.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport { fetchRelationships } from '../utils/relationships';\nimport states from '../utils/states';\nimport useLocationChange from '../utils/useLocationChange';\n\nimport AccountBlock from './account-block';\nimport Icon from './icon';\nimport Loader from './loader';\n\nexport default function GenericAccounts({\n  instance,\n  excludeRelationshipAttrs = [],\n  onClose = () => {},\n}) {\n  const { masto, instance: currentInstance } = api();\n  const isCurrentInstance = instance ? instance === currentInstance : true;\n  const snapStates = useSnapshot(states);\n  ``;\n  const [uiState, setUIState] = useState('default');\n  const [accounts, setAccounts] = useState([]);\n  const [showMore, setShowMore] = useState(false);\n\n  useLocationChange(onClose);\n\n  if (!snapStates.showGenericAccounts) {\n    return null;\n  }\n\n  const {\n    id,\n    heading,\n    fetchAccounts,\n    accounts: staticAccounts,\n    showReactions,\n  } = snapStates.showGenericAccounts;\n\n  const [relationshipsMap, setRelationshipsMap] = useState({});\n\n  const loadRelationships = async (accounts) => {\n    if (!accounts?.length) return;\n    if (!isCurrentInstance) return;\n    const relationships = await fetchRelationships(accounts, relationshipsMap);\n    if (relationships) {\n      setRelationshipsMap({\n        ...relationshipsMap,\n        ...relationships,\n      });\n    }\n  };\n\n  const loadAccounts = (firstLoad) => {\n    if (!fetchAccounts) return;\n    if (firstLoad) setAccounts([]);\n    setUIState('loading');\n    (async () => {\n      try {\n        const { done, value } = await fetchAccounts(firstLoad);\n        if (Array.isArray(value)) {\n          if (firstLoad) {\n            const accounts = [];\n            for (let i = 0; i < value.length; i++) {\n              const account = value[i];\n              const theAccount = accounts.find(\n                (a, j) => a.id === account.id && i !== j,\n              );\n              if (!theAccount) {\n                accounts.push({\n                  _types: [],\n                  ...account,\n                });\n              } else {\n                theAccount._types.push(...account._types);\n              }\n            }\n            setAccounts(accounts);\n          } else {\n            // setAccounts((prev) => [...prev, ...value]);\n            // Merge accounts by id and _types\n            setAccounts((prev) => {\n              const newAccounts = prev;\n              for (const account of value) {\n                const theAccount = newAccounts.find((a) => a.id === account.id);\n                if (!theAccount) {\n                  newAccounts.push(account);\n                } else {\n                  theAccount._types.push(...account._types);\n                }\n              }\n              return newAccounts;\n            });\n          }\n          setShowMore(!done);\n\n          loadRelationships(value);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const firstLoad = useRef(true);\n  useEffect(() => {\n    if (staticAccounts?.length > 0) {\n      setAccounts(staticAccounts);\n      loadRelationships(staticAccounts);\n    } else {\n      loadAccounts(true);\n      firstLoad.current = false;\n    }\n  }, [staticAccounts, fetchAccounts]);\n\n  useEffect(() => {\n    if (firstLoad.current) return;\n    // reloadGenericAccounts contains value like {id: 'mute', counter: 1}\n    // We only need to reload if the id matches\n    if (snapStates.reloadGenericAccounts?.id === id) {\n      loadAccounts(true);\n    }\n  }, [snapStates.reloadGenericAccounts.counter]);\n\n  return (\n    <div id=\"generic-accounts-container\" class=\"sheet\" tabindex=\"-1\">\n      <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n        <Icon icon=\"x\" />\n      </button>\n      <header>\n        <h2>{heading || 'Accounts'}</h2>\n      </header>\n      <main>\n        {accounts.length > 0 ? (\n          <>\n            <ul class=\"accounts-list\">\n              {accounts.map((account) => {\n                const relationship = relationshipsMap[account.id];\n                const key = `${account.id}-${account._types?.length || ''}`;\n                return (\n                  <li key={key}>\n                    {showReactions && account._types?.length > 0 && (\n                      <div class=\"reactions-block\">\n                        {account._types.map((type) => (\n                          <Icon\n                            icon={\n                              {\n                                reblog: 'rocket',\n                                favourite: 'heart',\n                              }[type]\n                            }\n                            class={`${type}-icon`}\n                          />\n                        ))}\n                      </div>\n                    )}\n                    <div class=\"account-relationships\">\n                      <AccountBlock\n                        account={account}\n                        showStats\n                        relationship={relationship}\n                        excludeRelationshipAttrs={excludeRelationshipAttrs}\n                      />\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n            {uiState === 'default' ? (\n              showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadAccounts();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadAccounts()}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              )\n            ) : (\n              uiState === 'loading' && (\n                <p class=\"ui-state\">\n                  <Loader abrupt />\n                </p>\n              )\n            )}\n          </>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Error loading accounts</p>\n        ) : (\n          <p class=\"ui-state insignificant\">Nothing to show</p>\n        )}\n      </main>\n    </div>\n  );\n}\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeMatch from '../utils/locale-match';\nimport { speak, supportsTTS } from '../utils/speech';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Menu2 from './menu2';\nimport TranslationBlock from './translation-block';\n\nexport default function MediaAltModal({ alt, lang, onClose }) {\n  const snapStates = useSnapshot(states);\n  const [forceTranslate, setForceTranslate] = useState(false);\n  const targetLanguage = getTranslateTargetLanguage(true);\n  const contentTranslationHideLanguages =\n    snapStates.settings.contentTranslationHideLanguages || [];\n  const differentLanguage =\n    !!lang &&\n    lang !== targetLanguage &&\n    !localeMatch([lang], [targetLanguage]) &&\n    !contentTranslationHideLanguages.find(\n      (l) => lang === l || localeMatch([lang], [l]),\n    );\n\n  return (\n    <div class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Media description</h2>\n        <div class=\"header-side\">\n          <Menu2\n            align=\"end\"\n            menuButton={\n              <button type=\"button\" class=\"plain4\">\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\n              </button>\n            }\n          >\n            <MenuItem\n              disabled={forceTranslate}\n              onClick={() => {\n                setForceTranslate(true);\n              }}\n            >\n              <Icon icon=\"translate\" />\n              <span>Translate</span>\n            </MenuItem>\n            {supportsTTS && (\n              <MenuItem\n                onClick={() => {\n                  speak(alt, lang);\n                }}\n              >\n                <Icon icon=\"speak\" />\n                <span>Speak</span>\n              </MenuItem>\n            )}\n          </Menu2>\n        </div>\n      </header>\n      <main lang={lang} dir=\"auto\">\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n            textWrap: 'pretty',\n          }}\n        >\n          {alt}\n        </p>\n        {(differentLanguage || forceTranslate) && (\n          <TranslationBlock\n            forceTranslate={forceTranslate}\n            sourceLanguage={lang}\n            text={alt}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n","// https://gist.github.com/earthbound19/e7fe15fdf8ca3ef814750a61bc75b5ce\nfunction clamp(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst gammaToLinear = (c) =>\n  c >= 0.04045 ? Math.pow((c + 0.055) / 1.055, 2.4) : c / 12.92;\nconst linearToGamma = (c) =>\n  c >= 0.0031308 ? 1.055 * Math.pow(c, 1 / 2.4) - 0.055 : 12.92 * c;\n\nexport function rgb2oklab([r, g, b]) {\n  r = gammaToLinear(r / 255);\n  g = gammaToLinear(g / 255);\n  b = gammaToLinear(b / 255);\n  var l = 0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b;\n  var m = 0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b;\n  var s = 0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b;\n  l = Math.cbrt(l);\n  m = Math.cbrt(m);\n  s = Math.cbrt(s);\n  return [\n    l * +0.2104542553 + m * +0.793617785 + s * -0.0040720468,\n    l * +1.9779984951 + m * -2.428592205 + s * +0.4505937099,\n    l * +0.0259040371 + m * +0.7827717662 + s * -0.808675766,\n  ];\n}\n\nexport function oklab2rgb([L, a, b]) {\n  var l = L + a * +0.3963377774 + b * +0.2158037573;\n  var m = L + a * -0.1055613458 + b * -0.0638541728;\n  var s = L + a * -0.0894841775 + b * -1.291485548;\n  // The ** operator here cubes; same as l_*l_*l_ in the C++ example:\n  l = l ** 3;\n  m = m ** 3;\n  s = s ** 3;\n  var r = l * +4.0767416621 + m * -3.3077115913 + s * +0.2309699292;\n  var g = l * -1.2684380046 + m * +2.6097574011 + s * -0.3413193965;\n  var b = l * -0.0041960863 + m * -0.7034186147 + s * +1.707614701;\n  // Convert linear RGB values returned from oklab math to sRGB for our use before returning them:\n  r = 255 * linearToGamma(r);\n  g = 255 * linearToGamma(g);\n  b = 255 * linearToGamma(b);\n  // OPTION: clamp r g and b values to the range 0-255; but if you use the values immediately to draw, JavaScript clamps them on use:\n  r = clamp(r, 0, 255);\n  g = clamp(g, 0, 255);\n  b = clamp(b, 0, 255);\n  // OPTION: round the values. May not be necessary if you use them immediately for rendering in JavaScript, as JavaScript (also) discards decimals on render:\n  r = Math.round(r);\n  g = Math.round(g);\n  b = Math.round(b);\n  return [r, g, b];\n}\n","import { MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport Menu2 from './menu2';\nimport MenuLink from './menu-link';\n\nconst { PHANPY_IMG_ALT_API_URL: IMG_ALT_API_URL } = import.meta.env;\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  lang,\n  index = 0,\n  onClose = () => {},\n}) {\n  const [uiState, setUIState] = useState('default');\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n\n    // history.pushState({ mediaModal: true }, '');\n    // const handlePopState = (e) => {\n    //   if (e.state?.mediaModal) {\n    //     onClose();\n    //   }\n    // };\n    // window.addEventListener('popstate', handlePopState);\n    // return () => {\n    //   window.removeEventListener('popstate', handlePopState);\n    // };\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n    carouselRef.current.focus();\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys(\n    'esc',\n    onClose,\n    {\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n    [onClose],\n  );\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      carouselRef.current?.focus?.();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const mediaAccentColors = useMemo(() => {\n    return mediaAttachments?.map((media) => {\n      const { blurhash } = media;\n      if (blurhash) {\n        const averageColor = getBlurHashAverageColor(blurhash);\n        const labAverageColor = rgb2oklab(averageColor);\n        return oklab2rgb([0.6, labAverageColor[1], labAverageColor[2]]);\n      }\n      return null;\n    });\n  }, [mediaAttachments]);\n  const mediaAccentGradient = useMemo(() => {\n    const gap = 5;\n    const range = 100 / mediaAccentColors.length;\n    return (\n      mediaAccentColors\n        ?.map((color, i) => {\n          const start = i * range + gap;\n          const end = (i + 1) * range - gap;\n          if (color) {\n            return `\n            rgba(${color?.join(',')}, 0.4) ${start}%,\n            rgba(${color?.join(',')}, 0.4) ${end}%\n          `;\n          }\n\n          return `\n            transparent ${start}%,\n            transparent ${end}%\n          `;\n        })\n        ?.join(', ') || 'transparent'\n    );\n  }, [mediaAccentColors]);\n\n  let toastRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      toastRef.current?.hideToast?.();\n    };\n  }, []);\n\n  return (\n    <div\n      class={`media-modal-container media-modal-count-${mediaAttachments?.length}`}\n    >\n      <div\n        ref={carouselRef}\n        tabIndex=\"0\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media') ||\n            e.target.classList.contains('media-zoom')\n          ) {\n            onClose();\n          }\n        }}\n        style={\n          mediaAttachments.length > 1\n            ? {\n                backgroundAttachment: 'local',\n                backgroundImage: `linear-gradient(\n            to right, ${mediaAccentGradient})`,\n              }\n            : {}\n        }\n      >\n        {mediaAttachments?.map((media, i) => {\n          const accentColor =\n            mediaAttachments.length === 1 ? mediaAccentColors[i] : null;\n          return (\n            <div\n              class=\"carousel-item\"\n              style={\n                accentColor\n                  ? {\n                      '--accent-color': `rgb(${accentColor?.join(',')})`,\n                      '--accent-alpha-color': `rgba(${accentColor?.join(\n                        ',',\n                      )}, 0.4)`,\n                    }\n                  : {}\n              }\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                // console.log(e);\n                // if (e.target !== e.currentTarget) {\n                //   setShowControls(!showControls);\n                // }\n                if (!e.target.classList.contains('media')) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    states.showMediaAlt = {\n                      alt: media.description,\n                      lang,\n                    };\n                  }}\n                >\n                  <span class=\"alt-badge\">ALT</span>\n                  <span class=\"media-alt-desc\" lang={lang} dir=\"auto\">\n                    {media.description}\n                  </span>\n                </button>\n              )}\n              <Media media={media} showOriginal lang={lang} />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                  carouselRef.current.focus();\n                }}\n              >\n                <Icon icon=\"round\" size=\"s\" />\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Menu2\n            overflow=\"auto\"\n            align=\"center\"\n            position=\"anchor\"\n            gap={4}\n            menuClassName=\"glass-menu\"\n            menuButton={\n              <button type=\"button\" class=\"carousel-button\">\n                <Icon icon=\"more\" alt=\"More\" />\n              </button>\n            }\n          >\n            <MenuLink\n              href={\n                mediaAttachments[currentIndex]?.remoteUrl ||\n                mediaAttachments[currentIndex]?.url\n              }\n              class=\"carousel-button\"\n              target=\"_blank\"\n              title=\"Open original media in new window\"\n            >\n              <Icon icon=\"popout\" />\n              <span>Open original media</span>\n            </MenuLink>\n            {import.meta.env.DEV && // Only dev for now\n              !!states.settings.mediaAltGenerator &&\n              !!IMG_ALT_API_URL &&\n              !!mediaAttachments[currentIndex]?.url &&\n              !mediaAttachments[currentIndex]?.description &&\n              mediaAttachments[currentIndex]?.type === 'image' && (\n                <>\n                  <MenuDivider />\n                  <MenuItem\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      toastRef.current = showToast({\n                        text: 'Attempting to describe image. Please wait...',\n                        duration: -1,\n                      });\n                      (async function () {\n                        try {\n                          const response = await fetch(\n                            `${IMG_ALT_API_URL}?image=${encodeURIComponent(\n                              mediaAttachments[currentIndex]?.url,\n                            )}`,\n                          ).then((r) => r.json());\n                          states.showMediaAlt = {\n                            alt: response.description,\n                          };\n                        } catch (e) {\n                          console.error(e);\n                          showToast('Failed to describe image');\n                        } finally {\n                          setUIState('default');\n                          toastRef.current?.hideToast?.();\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"sparkles2\" />\n                    <span>Describe image…</span>\n                  </MenuItem>\n                </>\n              )}\n          </Menu2>{' '}\n          <Link\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\n                ? `?media=${currentIndex + 1}`\n                : ''\n            }`}\n            class=\"button carousel-button media-post-link\"\n            // onClick={() => {\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\n            //   if (\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\n            //   ) {\n            //     onClose();\n            //   }\n            // }}\n          >\n            <span class=\"button-label\">View post </span>&raquo;\n          </Link>\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MediaModal;\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%234169E1'%20d='M14%2052a4%204%200%201%201-8%200%204%204%200%200%201%208%200Zm64-42a4%204%200%201%201-8%200%204%204%200%200%201%208%200Z'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2082%2062'%3e%3crect%20width='78'%20height='58'%20x='2'%20y='2'%20fill='%23999'%20fill-opacity='.3'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3crect%20width='18'%20height='46'%20x='8'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='32'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3crect%20width='18'%20height='46'%20x='56'%20y='8'%20fill='%23fff'%20stroke='%23999'%20stroke-width='2'%20rx='1'/%3e%3c/svg%3e\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20fill='none'%20viewBox='0%200%2084%2062'%3e%3crect%20width='64'%20height='48'%20x='18'%20y='2'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M19%203h62v10H19z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M43%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M52%208a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3crect%20width='32'%20height='48'%20x='2'%20y='12'%20fill='%23fff'%20stroke='%23999'%20stroke-width='3'%20rx='4'/%3e%3cpath%20fill='%23999'%20fill-opacity='.3'%20d='M3%2049h30v10H3z'/%3e%3cpath%20stroke='%234169E1'%20stroke-width='2'%20d='M11%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3cpath%20stroke='%23999'%20stroke-width='2'%20d='M20%2054a2%202%200%201%201-4%200%202%202%200%200%201%204%200Zm9%200a2%202%200%201%201-4%200%202%202%200%200%201%204%200Z'/%3e%3c/svg%3e\"","import { api } from '../utils/api';\nimport store from '../utils/store';\n\nconst LIMIT = 200;\nconst MAX_FETCH = 10;\n\nexport async function fetchFollowedTags() {\n  const { masto } = api();\n  const iterator = masto.v1.followedTags.list({\n    limit: LIMIT,\n  });\n  const tags = [];\n  let fetchCount = 0;\n  do {\n    const { value, done } = await iterator.next();\n    if (done || value?.length === 0) break;\n    tags.push(...value);\n    fetchCount++;\n  } while (fetchCount < MAX_FETCH);\n  tags.sort((a, b) => a.name.localeCompare(b.name));\n  console.log(tags);\n\n  if (tags.length) {\n    setTimeout(() => {\n      // Save to local storage, with saved timestamp\n      store.account.set('followedTags', {\n        tags,\n        updatedAt: Date.now(),\n      });\n    }, 1);\n  }\n\n  return tags;\n}\n\nconst MAX_AGE = 24 * 60 * 60 * 1000; // 1 day\nexport async function getFollowedTags() {\n  try {\n    const { tags, updatedAt } = store.account.get('followedTags') || {};\n    if (!tags?.length) return await fetchFollowedTags();\n    if (Date.now() - updatedAt > MAX_AGE) {\n      // Stale-while-revalidate\n      fetchFollowedTags();\n      return tags;\n    }\n    return tags;\n  } catch (e) {\n    return [];\n  }\n}\n\nconst fauxDiv = document.createElement('div');\nexport const extractTagsFromStatus = (content) => {\n  if (!content) return [];\n  if (content.indexOf('#') === -1) return [];\n  fauxDiv.innerHTML = content;\n  const hashtagLinks = fauxDiv.querySelectorAll('a.hashtag');\n  if (!hashtagLinks.length) return [];\n  return Array.from(hashtagLinks).map((a) =>\n    a.innerText.trim().replace(/^[^#]*#+/, ''),\n  );\n};\n","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport {\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n} from 'lz-string';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport floatingButtonUrl from '../assets/floating-button.svg';\nimport multiColumnUrl from '../assets/multi-column.svg';\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\n\nimport { api } from '../utils/api';\nimport { fetchFollowedTags } from '../utils/followed-tags';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\n\nexport const SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'mentions',\n  'notifications',\n  'list',\n  'public',\n  'trending',\n  'search',\n  'hashtag',\n  'bookmarks',\n  'favourites',\n  // NOTE: Hide for now\n  // 'account-statuses', // Need @acct search first\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'List',\n  public: 'Public (Local / Federated)',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Likes',\n  hashtag: 'Hashtag',\n  trending: 'Trending',\n  mentions: 'Mentions',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  trending: [\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n      placeholder: 'Optional, unless for multi-column mode',\n      notRequired: true,\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n    {\n      text: 'Media only',\n      name: 'media',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n};\nconst fetchListTitle = pmem(async ({ id }) => {\n  const list = await api().masto.v1.lists.$select(id).fetch();\n  return list.title;\n});\nconst fetchAccountTitle = pmem(async ({ id }) => {\n  const account = await api().masto.v1.accounts.$select(id).fetch();\n  return account.username || account.acct || account.displayName;\n});\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  mentions: {\n    id: 'mentions',\n    title: 'Mentions',\n    path: '/mentions',\n    icon: 'at',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: 'list',\n    title: fetchListTitle,\n    path: ({ id }) => `/l/${id}`,\n    icon: 'list',\n  },\n  public: {\n    id: 'public',\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'building' : 'earth'),\n  },\n  trending: {\n    id: 'trending',\n    title: 'Trending',\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ instance }) => `/${instance}/trending`,\n    icon: 'chart',\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => (query ? `“${query}”` : 'Search'),\n    path: ({ query }) =>\n      query\n        ? `/search?q=${encodeURIComponent(query)}&type=statuses`\n        : '/search',\n    icon: 'search',\n    excludeViewMode: ({ query }) => (!query ? ['multi-column'] : []),\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: fetchAccountTitle,\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Likes',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ hashtag, instance, media }) =>\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}${\n        media ? '?media=1' : ''\n      }`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n  const [showForm, setShowForm] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n\n  const [shortcutsListParent] = useAutoAnimate();\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>Specify a list of shortcuts that'll appear&nbsp;as:</p>\n        <div class=\"shortcuts-view-mode\">\n          {[\n            {\n              value: 'float-button',\n              label: 'Floating button',\n              imgURL: floatingButtonUrl,\n            },\n            {\n              value: 'tab-menu-bar',\n              label: 'Tab/Menu bar',\n              imgURL: tabMenuBarUrl,\n            },\n            {\n              value: 'multi-column',\n              label: 'Multi-column',\n              imgURL: multiColumnUrl,\n            },\n          ].map(({ value, label, imgURL }) => {\n            const checked =\n              snapStates.settings.shortcutsViewMode === value ||\n              (value === 'float-button' &&\n                !snapStates.settings.shortcutsViewMode);\n            return (\n              <label key={value} class={checked ? 'checked' : ''}>\n                <input\n                  type=\"radio\"\n                  name=\"shortcuts-view-mode\"\n                  value={value}\n                  checked={checked}\n                  onChange={(e) => {\n                    states.settings.shortcutsViewMode = e.target.value;\n                  }}\n                />{' '}\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\n                <span>{label}</span>\n              </label>\n            );\n          })}\n        </div>\n        {shortcuts.length > 0 ? (\n          <>\n            <ol class=\"shortcuts-list\" ref={shortcutsListParent}>\n              {shortcuts.filter(Boolean).map((shortcut, i) => {\n                // const key = i + Object.values(shortcut);\n                const key = Object.values(shortcut).join('-');\n                const { type } = shortcut;\n                if (!SHORTCUTS_META[type]) return null;\n                let { icon, title, subtitle, excludeViewMode } =\n                  SHORTCUTS_META[type];\n                if (typeof title === 'function') {\n                  title = title(shortcut, i);\n                }\n                if (typeof subtitle === 'function') {\n                  subtitle = subtitle(shortcut, i);\n                }\n                if (typeof icon === 'function') {\n                  icon = icon(shortcut, i);\n                }\n                if (typeof excludeViewMode === 'function') {\n                  excludeViewMode = excludeViewMode(shortcut, i);\n                }\n                const excludedViewMode = excludeViewMode?.includes(\n                  snapStates.settings.shortcutsViewMode,\n                );\n                return (\n                  <li key={key}>\n                    <Icon icon={icon} />\n                    <span class=\"shortcut-text\">\n                      <AsyncText>{title}</AsyncText>\n                      {subtitle && (\n                        <>\n                          {' '}\n                          <small class=\"ib insignificant\">{subtitle}</small>\n                        </>\n                      )}\n                      {excludedViewMode && (\n                        <span class=\"tag\">\n                          Not available in current view mode\n                        </span>\n                      )}\n                    </span>\n                    <span class=\"shortcut-actions\">\n                      <button\n                        type=\"button\"\n                        class=\"plain small\"\n                        disabled={i === 0}\n                        onClick={() => {\n                          const shortcutsArr = Array.from(states.shortcuts);\n                          if (i > 0) {\n                            const temp = states.shortcuts[i - 1];\n                            shortcutsArr[i - 1] = shortcut;\n                            shortcutsArr[i] = temp;\n                            states.shortcuts = shortcutsArr;\n                          }\n                        }}\n                      >\n                        <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                      </button>\n                      <button\n                        type=\"button\"\n                        class=\"plain small\"\n                        disabled={i === shortcuts.length - 1}\n                        onClick={() => {\n                          const shortcutsArr = Array.from(states.shortcuts);\n                          if (i < states.shortcuts.length - 1) {\n                            const temp = states.shortcuts[i + 1];\n                            shortcutsArr[i + 1] = shortcut;\n                            shortcutsArr[i] = temp;\n                            states.shortcuts = shortcutsArr;\n                          }\n                        }}\n                      >\n                        <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                      </button>\n                      <button\n                        type=\"button\"\n                        class=\"plain small\"\n                        onClick={() => {\n                          setShowForm({\n                            shortcut,\n                            shortcutIndex: i,\n                          });\n                        }}\n                      >\n                        <Icon icon=\"pencil\" alt=\"Edit\" />\n                      </button>\n                      {/* <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button> */}\n                    </span>\n                  </li>\n                );\n              })}\n            </ol>\n            {shortcuts.length === 1 &&\n              snapStates.settings.shortcutsViewMode !== 'float-button' && (\n                <div class=\"ui-state insignificant\">\n                  <Icon icon=\"info\" />{' '}\n                  <small>\n                    Add more than one shortcut/column to make this work.\n                  </small>\n                </div>\n              )}\n          </>\n        ) : (\n          <div class=\"ui-state insignificant\">\n            <p>No shortcuts yet. Tap on the Add shortcut button.</p>\n            <p>\n              Not sure what to add?\n              <br />\n              Try adding{' '}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.shortcuts = [\n                    {\n                      type: 'following',\n                    },\n                    {\n                      type: 'notifications',\n                    },\n                  ];\n                }}\n              >\n                Home / Following and Notifications\n              </a>{' '}\n              first.\n            </p>\n          </div>\n        )}\n        <p class=\"insignificant\">\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\n            `Max ${SHORTCUTS_LIMIT} shortcuts`}\n        </p>\n        <p\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <button\n            type=\"button\"\n            class=\"light\"\n            onClick={() => setShowImportExport(true)}\n          >\n            Import/export\n          </button>\n          <button\n            type=\"button\"\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n            onClick={() => setShowForm(true)}\n          >\n            <Icon icon=\"plus\" />{' '}\n            <span>\n              {snapStates.settings.shortcutsViewMode === 'multi-column'\n                ? 'Add column…'\n                : 'Add shortcut…'}\n            </span>\n          </button>\n        </p>\n      </main>\n      {showForm && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowForm(false);\n            }\n          }}\n        >\n          <ShortcutForm\n            shortcut={showForm.shortcut}\n            shortcutIndex={showForm.shortcutIndex}\n            onSubmit={({ result, mode }) => {\n              console.log('onSubmit', result);\n              if (mode === 'edit') {\n                states.shortcuts[showForm.shortcutIndex] = result;\n              } else {\n                states.shortcuts.push(result);\n              }\n            }}\n            onClose={() => setShowForm(false)}\n          />\n        </Modal>\n      )}\n      {showImportExport && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowImportExport(false);\n            }\n          }}\n        >\n          <ImportExport\n            shortcuts={shortcuts}\n            onClose={() => setShowImportExport(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nconst FETCH_MAX_AGE = 1000 * 60; // 1 minute\nconst fetchLists = pmem(\n  () => {\n    const { masto } = api();\n    return masto.v1.lists.list();\n  },\n  {\n    maxAge: FETCH_MAX_AGE,\n  },\n);\n\nconst FORM_NOTES = {\n  search: `For multi-column mode, search term is required, else the column will not be shown.`,\n  hashtag: 'Multiple hashtags are supported. Space-separated.',\n};\n\nfunction ShortcutForm({\n  onSubmit,\n  disabled,\n  shortcut,\n  shortcutIndex,\n  onClose,\n}) {\n  console.log('shortcut', shortcut);\n  const editMode = !!shortcut;\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\n  const { masto } = api();\n\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    (async () => {\n      if (currentType !== 'list') return;\n      try {\n        setUIState('loading');\n        const lists = await fetchLists();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    (async () => {\n      if (currentType !== 'hashtag') return;\n      try {\n        const tags = await fetchFollowedTags();\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [currentType]);\n\n  const formRef = useRef();\n  useEffect(() => {\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\n      // Populate form\n      const form = formRef.current;\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\n        const input = form.querySelector(`[name=\"${name}\"]`);\n        if (input && shortcut[name]) {\n          if (type === 'checkbox') {\n            input.checked = shortcut[name] === 'on' ? true : false;\n          } else {\n            input.value = shortcut[name];\n          }\n        }\n      });\n    }\n  }, [editMode, currentType]);\n\n  return (\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\n      </header>\n      <main tabindex=\"-1\">\n        <form\n          ref={formRef}\n          onSubmit={(e) => {\n            // Construct a nice object from form\n            e.preventDefault();\n            const data = new FormData(e.target);\n            const result = {};\n            data.forEach((value, key) => {\n              result[key] = value?.trim();\n              if (key === 'instance') {\n                // Remove protocol and trailing slash\n                result[key] = result[key]\n                  .replace(/^https?:\\/\\//, '')\n                  .replace(/\\/+$/, '');\n                // Remove @acct@ or acct@ from instance URL\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\n              }\n            });\n            console.log('result', result);\n            if (!result.type) return;\n            onSubmit({\n              result,\n              mode: editMode ? 'edit' : 'add',\n            });\n            // Reset\n            e.target.reset();\n            setCurrentType(null);\n            onClose?.();\n          }}\n        >\n          <p>\n            <label>\n              <span>Timeline</span>\n              <select\n                required\n                disabled={disabled}\n                onChange={(e) => {\n                  setCurrentType(e.target.value);\n                }}\n                defaultValue={editMode ? shortcut.type : undefined}\n                name=\"type\"\n              >\n                <option></option>\n                {TYPES.map((type) => (\n                  <option value={type}>{TYPE_TEXT[type]}</option>\n                ))}\n              </select>\n            </label>\n          </p>\n          {TYPE_PARAMS[currentType]?.map?.(\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\n              if (currentType === 'list') {\n                return (\n                  <p>\n                    <label>\n                      <span>List</span>\n                      <select\n                        name=\"id\"\n                        required={!notRequired}\n                        disabled={disabled || uiState === 'loading'}\n                        defaultValue={editMode ? shortcut.id : undefined}\n                      >\n                        {lists.map((list) => (\n                          <option value={list.id}>{list.title}</option>\n                        ))}\n                      </select>\n                    </label>\n                  </p>\n                );\n              }\n\n              return (\n                <p>\n                  <label>\n                    <span>{text}</span>{' '}\n                    <input\n                      type={type}\n                      switch={type === 'checkbox' || undefined}\n                      name={name}\n                      placeholder={placeholder}\n                      required={type === 'text' && !notRequired}\n                      disabled={disabled}\n                      list={\n                        currentType === 'hashtag'\n                          ? 'followed-hashtags-datalist'\n                          : null\n                      }\n                      autocorrect=\"off\"\n                      autocapitalize=\"off\"\n                      spellcheck={false}\n                      pattern={pattern}\n                    />\n                    {currentType === 'hashtag' &&\n                      followedHashtags.length > 0 && (\n                        <datalist id=\"followed-hashtags-datalist\">\n                          {followedHashtags.map((tag) => (\n                            <option value={tag.name} />\n                          ))}\n                        </datalist>\n                      )}\n                  </label>\n                </p>\n              );\n            },\n          )}\n          {!!FORM_NOTES[currentType] && (\n            <p class=\"form-note insignificant\">\n              <Icon icon=\"info\" />\n              {FORM_NOTES[currentType]}\n            </p>\n          )}\n          <footer>\n            <button\n              type=\"submit\"\n              class=\"block\"\n              disabled={disabled || uiState === 'loading'}\n            >\n              {editMode ? 'Save' : 'Add'}\n            </button>\n            {editMode && (\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                onClick={() => {\n                  states.shortcuts.splice(shortcutIndex, 1);\n                  onClose?.();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ImportExport({ shortcuts, onClose }) {\n  const shortcutsStr = useMemo(() => {\n    if (!shortcuts) return '';\n    if (!shortcuts.filter(Boolean).length) return '';\n    return compressToEncodedURIComponent(\n      JSON.stringify(shortcuts.filter(Boolean)),\n    );\n  }, [shortcuts]);\n  const [importShortcutStr, setImportShortcutStr] = useState('');\n  const [importUIState, setImportUIState] = useState('default');\n  const parsedImportShortcutStr = useMemo(() => {\n    if (!importShortcutStr) {\n      setImportUIState('default');\n      return null;\n    }\n    try {\n      const parsed = JSON.parse(\n        decompressFromEncodedURIComponent(importShortcutStr),\n      );\n      // Very basic validation, I know\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\n      setImportUIState('default');\n      return parsed;\n    } catch (err) {\n      // Fallback to JSON string parsing\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\n      try {\n        const parsed = JSON.parse(importShortcutStr);\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\n        setImportUIState('default');\n        return parsed;\n      } catch (err) {\n        setImportUIState('error');\n        return null;\n      }\n    }\n  }, [importShortcutStr]);\n  const hasCurrentSettings = states.shortcuts.length > 0;\n\n  return (\n    <div id=\"import-export-container\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\n        </h2>\n      </header>\n      <main tabindex=\"-1\">\n        <section>\n          <h3>\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Import</span>\n          </h3>\n          <p>\n            <input\n              type=\"text\"\n              name=\"import\"\n              placeholder=\"Paste shortcuts here\"\n              class=\"block\"\n              onInput={(e) => {\n                setImportShortcutStr(e.target.value);\n              }}\n            />\n          </p>\n          {!!parsedImportShortcutStr &&\n            Array.isArray(parsedImportShortcutStr) && (\n              <>\n                <p>\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\n                  <small class=\"insignificant\">\n                    ({importShortcutStr.length} characters)\n                  </small>\n                </p>\n                <ol class=\"import-settings-list\">\n                  {parsedImportShortcutStr.map((shortcut) => (\n                    <li>\n                      <span\n                        style={{\n                          opacity: shortcuts.some((s) =>\n                            // Compare all properties\n                            Object.keys(s).every(\n                              (key) => s[key] === shortcut[key],\n                            ),\n                          )\n                            ? 1\n                            : 0,\n                        }}\n                      >\n                        *\n                      </span>\n                      <span>\n                        {TYPE_TEXT[shortcut.type]}\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\n                          ({ text, name, type }) =>\n                            shortcut[name] ? (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {text}:{' '}\n                                  {type === 'checkbox'\n                                    ? shortcut[name] === 'on'\n                                      ? '✅'\n                                      : '❌'\n                                    : shortcut[name]}\n                                </span>{' '}\n                              </>\n                            ) : null,\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ol>\n                <p>\n                  <small>* Exists in current shortcuts</small>\n                  <br />\n                  <small>\n                    ⚠️ List may not work if it's from a different account.\n                  </small>\n                </p>\n              </>\n            )}\n          {importUIState === 'error' && (\n            <p class=\"error\">\n              <small>⚠️ Invalid settings format</small>\n            </p>\n          )}\n          <p>\n            {hasCurrentSettings && (\n              <>\n                <MenuConfirm\n                  confirmLabel=\"Append to current shortcuts?\"\n                  menuFooter={\n                    <div class=\"footer\">\n                      Only shortcuts that don’t exist in current shortcuts will\n                      be appended.\n                    </div>\n                  }\n                  onClick={() => {\n                    // states.shortcuts = [\n                    //   ...states.shortcuts,\n                    //   ...parsedImportShortcutStr,\n                    // ];\n                    // Append non-unique shortcuts only\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\n                      (shortcut) =>\n                        !states.shortcuts.some((s) =>\n                          // Compare all properties\n                          Object.keys(s).every(\n                            (key) => s[key] === shortcut[key],\n                          ),\n                        ),\n                    );\n                    if (!nonUniqueShortcuts.length) {\n                      showToast('No new shortcuts to import');\n                      return;\n                    }\n                    let newShortcuts = [\n                      ...states.shortcuts,\n                      ...nonUniqueShortcuts,\n                    ];\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\n                    if (exceededLimit) {\n                      // If exceeded, trim it\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\n                    }\n                    states.shortcuts = newShortcuts;\n                    showToast(\n                      exceededLimit\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\n                        : 'Shortcuts imported',\n                    );\n                    onClose?.();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain2\"\n                    disabled={!parsedImportShortcutStr}\n                  >\n                    Import & append…\n                  </button>\n                </MenuConfirm>{' '}\n              </>\n            )}\n            <MenuConfirm\n              confirmLabel={\n                hasCurrentSettings\n                  ? 'Override current shortcuts?'\n                  : 'Import shortcuts?'\n              }\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\n              onClick={() => {\n                states.shortcuts = parsedImportShortcutStr;\n                showToast('Shortcuts imported');\n                onClose?.();\n              }}\n            >\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={!parsedImportShortcutStr}\n              >\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\n              </button>\n            </MenuConfirm>\n          </p>\n        </section>\n        <section>\n          <h3>\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Export</span>\n          </h3>\n          <p>\n            <input\n              style={{ width: '100%' }}\n              type=\"text\"\n              value={shortcutsStr}\n              readOnly\n              onClick={(e) => {\n                if (!e.target.value) return;\n                e.target.select();\n                // Copy url to clipboard\n                try {\n                  navigator.clipboard.writeText(e.target.value);\n                  showToast('Shortcuts copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcuts');\n                }\n              }}\n            />\n          </p>\n          <p>\n            <button\n              type=\"button\"\n              class=\"plain2\"\n              disabled={!shortcutsStr}\n              onClick={() => {\n                try {\n                  navigator.clipboard.writeText(shortcutsStr);\n                  showToast('Shortcut settings copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcut settings');\n                }\n              }}\n            >\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\n            </button>{' '}\n            {navigator?.share &&\n              navigator?.canShare?.({\n                text: shortcutsStr,\n              }) && (\n                <button\n                  type=\"button\"\n                  class=\"plain2\"\n                  disabled={!shortcutsStr}\n                  onClick={() => {\n                    try {\n                      navigator.share({\n                        text: shortcutsStr,\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      alert(\"Sharing doesn't seem to work.\");\n                    }\n                  }}\n                >\n                  <Icon icon=\"share\" /> <span>Share</span>\n                </button>\n              )}{' '}\n            {shortcutsStr.length > 0 && (\n              <small class=\"insignificant\">\n                {shortcutsStr.length} characters\n              </small>\n            )}\n          </p>\n          {!!shortcutsStr && (\n            <details>\n              <summary class=\"insignificant\">\n                <small>Raw Shortcuts JSON</small>\n              </summary>\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\n              </textarea>\n            </details>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\n","import { useLocation, useNavigate } from 'react-router-dom';\nimport { subscribe, useSnapshot } from 'valtio';\n\nimport Accounts from '../pages/accounts';\nimport Settings from '../pages/settings';\nimport focusDeck from '../utils/focus-deck';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AccountSheet from './account-sheet';\nimport Compose from './compose';\nimport Drafts from './drafts';\nimport EmbedModal from './embed-modal';\nimport GenericAccounts from './generic-accounts';\nimport MediaAltModal from './media-alt-modal';\nimport MediaModal from './media-modal';\nimport Modal from './modal';\nimport ShortcutsSettings from './shortcuts-settings';\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // When closing modal, focus on deck\n    if (/^show/i.test(path) && !value) {\n      focusDeck();\n    }\n  }\n});\n\nexport default function Modals() {\n  const snapStates = useSnapshot(states);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  return (\n    <>\n      {!!snapStates.showCompose && (\n        <Modal>\n          <Compose\n            replyToStatus={\n              typeof snapStates.showCompose !== 'boolean'\n                ? snapStates.showCompose.replyToStatus\n                : window.__COMPOSE__?.replyToStatus || null\n            }\n            editStatus={\n              states.showCompose?.editStatus ||\n              window.__COMPOSE__?.editStatus ||\n              null\n            }\n            draftStatus={\n              states.showCompose?.draftStatus ||\n              window.__COMPOSE__?.draftStatus ||\n              null\n            }\n            onClose={(results) => {\n              const { newStatus, instance, type } = results || {};\n              states.showCompose = false;\n              window.__COMPOSE__ = null;\n              if (newStatus) {\n                states.reloadStatusPage++;\n                showToast({\n                  text: {\n                    post: 'Post published. Check it out.',\n                    reply: 'Reply posted. Check it out.',\n                    edit: 'Post updated. Check it out.',\n                  }[type || 'post'],\n                  delay: 1000,\n                  duration: 10_000, // 10 seconds\n                  onClick: (toast) => {\n                    toast.hideToast();\n                    states.prevLocation = location;\n                    navigate(\n                      instance\n                        ? `/${instance}/s/${newStatus.id}`\n                        : `/s/${newStatus.id}`,\n                    );\n                  },\n                });\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClose={() => {\n            states.showSettings = false;\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccounts && (\n        <Modal\n          onClose={() => {\n            states.showAccounts = false;\n          }}\n        >\n          <Accounts\n            onClose={() => {\n              states.showAccounts = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showAccount = false;\n          }}\n        >\n          <AccountSheet\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={({ destination } = {}) => {\n              states.showAccount = false;\n              // states.showGenericAccounts = false;\n              // if (destination) {\n              //   states.showAccounts = false;\n              // }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClose={() => {\n            states.showDrafts = false;\n          }}\n        >\n          <Drafts onClose={() => (states.showDrafts = false)} />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showShortcutsSettings = false;\n          }}\n        >\n          <ShortcutsSettings\n            onClose={() => (states.showShortcutsSettings = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showGenericAccounts && (\n        <Modal\n          class=\"light\"\n          onClose={() => {\n            states.showGenericAccounts = false;\n          }}\n        >\n          <GenericAccounts\n            instance={snapStates.showGenericAccounts.instance}\n            excludeRelationshipAttrs={\n              snapStates.showGenericAccounts.excludeRelationshipAttrs\n            }\n            onClose={() => (states.showGenericAccounts = false)}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showMediaAlt && (\n        <Modal\n          class=\"light\"\n          onClose={(e) => {\n            states.showMediaAlt = false;\n          }}\n        >\n          <MediaAltModal\n            alt={snapStates.showMediaAlt.alt || snapStates.showMediaAlt}\n            lang={snapStates.showMediaAlt?.lang}\n            onClose={() => {\n              states.showMediaAlt = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showEmbedModal && (\n        <Modal\n          onClose={() => {\n            states.showEmbedModal = false;\n          }}\n        >\n          <EmbedModal\n            html={snapStates.showEmbedModal.html}\n            url={snapStates.showEmbedModal.url}\n            width={snapStates.showEmbedModal.width}\n            height={snapStates.showEmbedModal.height}\n            onClose={() => {\n              states.showEmbedModal = false;\n            }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n","import { useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, reject\n  const [relationship, setRelationship] = useState(null);\n\n  const hasRelationship = relationship !== null;\n\n  return (\n    <p class=\"follow-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('accept');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .authorize();\n              if (!rel?.followedBy) {\n                throw new Error('Follow request not accepted');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n            }\n            setUIState('default');\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading' || hasRelationship}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('reject');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests\n                .$select(accountID)\n                .reject();\n              if (rel?.followedBy) {\n                throw new Error('Follow request not rejected');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <span class=\"follow-request-states\">\n        {hasRelationship && requestState ? (\n          requestState === 'accept' ? (\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\n          ) : (\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\n          )\n        ) : (\n          <Loader hidden={uiState !== 'loading'} />\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default FollowRequestButtons;\n","import { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\n\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport store from '../utils/store';\nimport useTruncated from '../utils/useTruncated';\n\nimport Avatar from './avatar';\nimport FollowRequestButtons from './follow-request-buttons';\nimport Icon from './icon';\nimport Link from './link';\nimport NameText from './name-text';\nimport RelativeTime from './relative-time';\nimport Status from './status';\n\nconst NOTIFICATION_ICONS = {\n  mention: 'comment',\n  status: 'notification',\n  reblog: 'rocket',\n  follow: 'follow',\n  follow_request: 'follow-add',\n  favourite: 'heart',\n  poll: 'poll',\n  update: 'pencil',\n  'admin.signup': 'account-edit',\n  'admin.report': 'account-warning',\n};\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\n*/\n\nconst contentText = {\n  mention: 'mentioned you in their post.',\n  status: 'published a post.',\n  reblog: 'boosted your post.',\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\n  reblog_reply: 'boosted your reply.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'liked your post.',\n  'favourite+account': (count) => `liked ${count} of your posts.`,\n  favourite_reply: 'liked your reply.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A post you interacted with has been edited.',\n  'favourite+reblog': 'boosted & liked your post.',\n  'favourite+reblog+account': (count) =>\n    `boosted & liked ${count} of your posts.`,\n  'favourite+reblog_reply': 'boosted & liked your reply.',\n  'admin.sign_up': 'signed up.',\n  'admin.report': (targetAccount) => <>reported {targetAccount}</>,\n};\n\nconst AVATARS_LIMIT = 50;\n\nfunction Notification({\n  notification,\n  instance,\n  isStatic,\n  disableContextMenu,\n}) {\n  const { id, status, account, report, _accounts, _statuses } = notification;\n  let { type } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatus = status?.reblog || status;\n  const actualStatusID = actualStatus?.id;\n\n  const currentAccount = store.session.get('currentAccount');\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n  const isReplyToOthers =\n    !!status?.inReplyToAccountId &&\n    status?.inReplyToAccountId !== currentAccount &&\n    status?.account?.id === currentAccount;\n\n  let favsCount = 0;\n  let reblogsCount = 0;\n  if (type === 'favourite+reblog') {\n    for (const account of _accounts) {\n      if (account._types?.includes('favourite')) {\n        favsCount++;\n      }\n      if (account._types?.includes('reblog')) {\n        reblogsCount++;\n      }\n    }\n    if (!reblogsCount && favsCount) type = 'favourite';\n    if (!favsCount && reblogsCount) type = 'reblog';\n  }\n\n  let text;\n  if (type === 'poll') {\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\n  } else if (\n    type === 'reblog' ||\n    type === 'favourite' ||\n    type === 'favourite+reblog'\n  ) {\n    if (_statuses?.length > 1) {\n      text = contentText[`${type}+account`];\n    } else if (isReplyToOthers) {\n      text = contentText[`${type}_reply`];\n    } else {\n      text = contentText[type];\n    }\n  } else if (contentText[type]) {\n    text = contentText[type];\n  } else {\n    // Anticipate unhandled notification types, possibly from Mastodon forks or non-Mastodon instances\n    // This surfaces the error to the user, hoping that users will report it\n    text = `[Unknown notification type: ${type}]`;\n  }\n\n  if (typeof text === 'function') {\n    const count = _statuses?.length || _accounts?.length;\n    if (count) {\n      text = text(count);\n    } else if (type === 'admin.report') {\n      const targetAccount = report?.targetAccount;\n      if (targetAccount) {\n        text = text(<NameText account={targetAccount} showAvatar />);\n      }\n    }\n  }\n\n  if (type === 'mention' && !status) {\n    // Could be deleted\n    return null;\n  }\n\n  const formattedCreatedAt =\n    notification.createdAt && new Date(notification.createdAt).toLocaleString();\n\n  const genericAccountsHeading =\n    {\n      'favourite+reblog': 'Boosted/Liked by…',\n      favourite: 'Liked by…',\n      reblog: 'Boosted by…',\n      follow: 'Followed by…',\n    }[type] || 'Accounts';\n  const handleOpenGenericAccounts = () => {\n    states.showGenericAccounts = {\n      heading: genericAccountsHeading,\n      accounts: _accounts,\n      showReactions: type === 'favourite+reblog',\n      excludeRelationshipAttrs: type === 'follow' ? ['followedBy'] : [],\n    };\n  };\n\n  console.debug('RENDER Notification', notification.id);\n\n  return (\n    <div\n      class={`notification notification-${type}`}\n      data-notification-id={id}\n      tabIndex=\"0\"\n    >\n      <div\n        class={`notification-type notification-${type}`}\n        title={formattedCreatedAt}\n      >\n        {type === 'favourite+reblog' ? (\n          <>\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\n          </>\n        ) : (\n          <Icon\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\n            size=\"xl\"\n            alt={type}\n          />\n        )}\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b tabIndex=\"0\" onClick={handleOpenGenericAccounts}>\n                        <span title={_accounts.length}>\n                          {shortenNumber(_accounts.length)}\n                        </span>{' '}\n                        people\n                      </b>{' '}\n                    </>\n                  ) : (\n                    <>\n                      <NameText account={account} showAvatar />{' '}\n                    </>\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons accountID={account.id} />\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.slice(0, AVATARS_LIMIT).map((account) => (\n              <Fragment key={account.id}>\n                <a\n                  key={account.id}\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  class=\"account-avatar-stack\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 20\n                        ? 'xl'\n                        : _accounts.length < 30\n                        ? 'l'\n                        : _accounts.length < 40\n                        ? 'm'\n                        : 's' // My god, this person is popular!\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                    squircle={account?.bot}\n                  />\n                  {type === 'favourite+reblog' && (\n                    <div class=\"account-sub-icons\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={NOTIFICATION_ICONS[type]}\n                          size=\"s\"\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </a>{' '}\n              </Fragment>\n            ))}\n            <button\n              type=\"button\"\n              class=\"small plain\"\n              onClick={handleOpenGenericAccounts}\n            >\n              {_accounts.length > AVATARS_LIMIT &&\n                `+${_accounts.length - AVATARS_LIMIT}`}\n              <Icon icon=\"chevron-down\" />\n            </button>\n          </p>\n        )}\n        {_statuses?.length > 1 && (\n          <ul class=\"notification-group-statuses\">\n            {_statuses.map((status) => (\n              <li key={status.id}>\n                <TruncatedLink\n                  class={`status-link status-type-${type}`}\n                  to={\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\n                  }\n                >\n                  <Status\n                    status={status}\n                    size=\"s\"\n                    previewMode\n                    allowContextMenu\n                  />\n                </TruncatedLink>\n              </li>\n            ))}\n          </ul>\n        )}\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\n          <TruncatedLink\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n            onContextMenu={\n              !disableContextMenu\n                ? (e) => {\n                    const post = e.target.querySelector('.status');\n                    if (post) {\n                      // Fire a custom event to open the context menu\n                      if (e.metaKey) return;\n                      e.preventDefault();\n                      post.dispatchEvent(\n                        new MouseEvent('contextmenu', {\n                          clientX: e.clientX,\n                          clientY: e.clientY,\n                        }),\n                      );\n                    }\n                  }\n                : undefined\n            }\n          >\n            {isStatic ? (\n              <Status\n                status={actualStatus}\n                size=\"s\"\n                previewMode\n                allowContextMenu\n              />\n            ) : (\n              <Status\n                statusID={actualStatusID}\n                size=\"s\"\n                previewMode\n                allowContextMenu\n              />\n            )}\n          </TruncatedLink>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction TruncatedLink(props) {\n  const ref = useTruncated();\n  return <Link {...props} data-read-more=\"Read more →\" ref={ref} />;\n}\n\nexport default memo(Notification);\n","import { memo } from 'preact/compat';\nimport { useLayoutEffect, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport {\n  getAccountByAccessToken,\n  getCurrentAccount,\n} from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Modal from './modal';\nimport Notification from './notification';\n\n{\n  if ('serviceWorker' in navigator) {\n    console.log('👂👂👂 Listen to message');\n    navigator.serviceWorker.addEventListener('message', (event) => {\n      console.log('💥💥💥 Message event', event);\n      const { type, id, accessToken } = event?.data || {};\n      if (type === 'notification') {\n        states.routeNotification = {\n          id,\n          accessToken,\n        };\n      }\n    });\n  }\n}\n\nexport default memo(function NotificationService() {\n  if (!('serviceWorker' in navigator)) return null;\n\n  const snapStates = useSnapshot(states);\n  const { routeNotification } = snapStates;\n\n  console.log('🛎️ Notification service', routeNotification);\n\n  const { id, accessToken } = routeNotification || {};\n  const [showNotificationSheet, setShowNotificationSheet] = useState(false);\n\n  useLayoutEffect(() => {\n    if (!id || !accessToken) return;\n    const { instance: currentInstance } = api();\n    const { masto, instance } = api({\n      accessToken,\n    });\n    console.log('API', { accessToken, currentInstance, instance });\n    const sameInstance = currentInstance === instance;\n    const account = accessToken\n      ? getAccountByAccessToken(accessToken)\n      : getCurrentAccount();\n    (async () => {\n      const notification = await masto.v1.notifications.$select(id).fetch();\n      if (notification && account) {\n        console.log('🛎️ Notification', { id, notification, account });\n        const accountInstance = account.instanceURL;\n        const { type, status, account: notificationAccount } = notification;\n        const hasModal = !!document.querySelector('#modal-container > *');\n        const isFollow = type === 'follow' && !!notificationAccount?.id;\n        const hasAccount = !!notificationAccount?.id;\n        const hasStatus = !!status?.id;\n        if (isFollow && sameInstance) {\n          // Show account sheet, can handle different instances\n          states.showAccount = {\n            account: notificationAccount,\n            instance: accountInstance,\n          };\n        } else if (hasModal || !sameInstance || (hasAccount && hasStatus)) {\n          // Show sheet of notification, if\n          // - there is a modal open\n          // - the notification is from another instance\n          // - the notification has both account and status, gives choice for users to go to account or status\n          setShowNotificationSheet({\n            id,\n            account,\n            notification,\n            sameInstance,\n          });\n        } else {\n          if (hasStatus) {\n            // Go to status page\n            location.hash = `/${currentInstance}/s/${status.id}`;\n          } else if (isFollow) {\n            // Go to profile page\n            location.hash = `/${currentInstance}/a/${notificationAccount.id}`;\n          } else {\n            // Go to notifications page\n            location.hash = '/notifications';\n          }\n        }\n      } else {\n        console.warn('🛎️ Notification not found', id);\n      }\n    })();\n  }, [id, accessToken]);\n\n  // useLayoutEffect(() => {\n  //   // Listen to message from service worker\n  //   const handleMessage = (event) => {\n  //     console.log('💥💥💥 Message event', event);\n  //     const { type, id, accessToken } = event?.data || {};\n  //     if (type === 'notification') {\n  //       states.routeNotification = {\n  //         id,\n  //         accessToken,\n  //       };\n  //     }\n  //   };\n  //   console.log('👂👂👂 Listen to message');\n  //   navigator.serviceWorker.addEventListener('message', handleMessage);\n  //   return () => {\n  //     console.log('👂👂👂 Remove listen to message');\n  //     navigator.serviceWorker.removeEventListener('message', handleMessage);\n  //   };\n  // }, []);\n\n  useLayoutEffect(() => {\n    if (navigator?.clearAppBadge) {\n      navigator.clearAppBadge();\n    }\n  }, []);\n  usePageVisibility((visible) => {\n    if (visible && navigator?.clearAppBadge) {\n      console.log('🔰 Clear app badge');\n      navigator.clearAppBadge();\n    }\n  });\n\n  const onClose = () => {\n    setShowNotificationSheet(false);\n    states.routeNotification = null;\n\n    // If url is #/notifications?id=123, go to #/notifications\n    if (/\\/notifications\\?id=/i.test(location.hash)) {\n      location.hash = '/notifications';\n    }\n  };\n\n  if (showNotificationSheet) {\n    const { id, account, notification, sameInstance } = showNotificationSheet;\n    return (\n      <Modal\n        class=\"light\"\n        onClick={(e) => {\n          if (e.target === e.currentTarget) {\n            onClose();\n          }\n        }}\n      >\n        <div class=\"sheet\" tabIndex=\"-1\">\n          <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n            <Icon icon=\"x\" />\n          </button>\n          <header>\n            <b>Notification</b>\n          </header>\n          <main>\n            {!sameInstance && (\n              <p>This notification is from your other account.</p>\n            )}\n            <div\n              class=\"notification-peek\"\n              // style={{\n              //   pointerEvents: sameInstance ? '' : 'none',\n              // }}\n              onClick={(e) => {\n                const { target } = e;\n                // If button or links\n                if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {\n                  onClose();\n                }\n              }}\n            >\n              <Notification\n                instance={account.instanceURL}\n                notification={notification}\n                isStatic\n              />\n            </div>\n            <div\n              style={{\n                textAlign: 'end',\n              }}\n            >\n              <Link to=\"/notifications\" class=\"button light\" onClick={onClose}>\n                <span>View all notifications</span> <Icon icon=\"arrow-right\" />\n              </Link>\n            </div>\n          </main>\n        </div>\n      </Modal>\n    );\n  }\n\n  return null;\n});\n","import { forwardRef } from 'preact/compat';\nimport { useImperativeHandle, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Link from './link';\n\nconst SearchForm = forwardRef((props, ref) => {\n  const { instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n  const [query, setQuery] = useState(searchParams.get('q') || '');\n  const type = searchParams.get('type');\n  const formRef = useRef(null);\n\n  const searchFieldRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setValue: (value) => {\n      setQuery(value);\n    },\n    focus: () => {\n      searchFieldRef.current.focus();\n    },\n    select: () => {\n      searchFieldRef.current.select();\n    },\n    blur: () => {\n      searchFieldRef.current.blur();\n    },\n  }));\n\n  return (\n    <form\n      ref={formRef}\n      class=\"search-popover-container\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        const isSearchPage = /\\/search/.test(location.hash);\n        if (isSearchPage) {\n          if (query) {\n            const params = {\n              q: query,\n            };\n            if (type) params.type = type; // Preserve type\n            setSearchParams(params);\n          } else {\n            setSearchParams({});\n          }\n        } else {\n          if (query) {\n            location.hash = `/search?q=${encodeURIComponent(query)}${\n              type ? `&type=${type}` : ''\n            }`;\n          } else {\n            location.hash = `/search`;\n          }\n        }\n\n        props?.onSubmit?.(e);\n      }}\n    >\n      <input\n        ref={searchFieldRef}\n        value={query}\n        name=\"q\"\n        type=\"search\"\n        // autofocus\n        placeholder=\"Search\"\n        dir=\"auto\"\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        onSearch={(e) => {\n          if (!e.target.value) {\n            setSearchParams({});\n          }\n        }}\n        onInput={(e) => {\n          setQuery(e.target.value);\n          setSearchMenuOpen(true);\n        }}\n        onFocus={() => {\n          setSearchMenuOpen(true);\n          formRef.current\n            ?.querySelector('.search-popover-item')\n            ?.classList.add('focus');\n        }}\n        onBlur={() => {\n          setTimeout(() => {\n            setSearchMenuOpen(false);\n          }, 100);\n          formRef.current\n            ?.querySelector('.search-popover-item.focus')\n            ?.classList.remove('focus');\n        }}\n        onKeyDown={(e) => {\n          const { key } = e;\n          switch (key) {\n            case 'Escape':\n              setSearchMenuOpen(false);\n              break;\n            case 'Down':\n            case 'ArrowDown':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = formRef.current.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let nextItem = focusItem.nextElementSibling;\n                  while (nextItem && nextItem.hidden) {\n                    nextItem = nextItem.nextElementSibling;\n                  }\n                  if (nextItem) {\n                    nextItem.classList.add('focus');\n                    const siblings = Array.from(\n                      nextItem.parentElement.children,\n                    ).filter((el) => el !== nextItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const firstItem = formRef.current.querySelector(\n                    '.search-popover-item',\n                  );\n                  if (firstItem) {\n                    firstItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Up':\n            case 'ArrowUp':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let prevItem = focusItem.previousElementSibling;\n                  while (prevItem && prevItem.hidden) {\n                    prevItem = prevItem.previousElementSibling;\n                  }\n                  if (prevItem) {\n                    prevItem.classList.add('focus');\n                    const siblings = Array.from(\n                      prevItem.parentElement.children,\n                    ).filter((el) => el !== prevItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const lastItem = document.querySelector(\n                    '.search-popover-item:last-child',\n                  );\n                  if (lastItem) {\n                    lastItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Enter':\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  e.preventDefault();\n                  focusItem.click();\n                }\n                setSearchMenuOpen(false);\n                props?.onSubmit?.(e);\n              }\n              break;\n          }\n        }}\n      />\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\n        {/* {!!query && (\n          <Link\n            to={`/search?q=${encodeURIComponent(query)}`}\n            class=\"search-popover-item focus\"\n            onClick={(e) => {\n              props?.onSubmit?.(e);\n            }}\n          >\n            <Icon icon=\"search\" />\n            <span>{query}</span>\n          </Link>\n        )} */}\n        {!!query &&\n          [\n            {\n              label: (\n                <>\n                  {query}{' '}\n                  <small class=\"insignificant\">\n                    ‒ accounts, hashtags &amp; posts\n                  </small>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}`,\n              top: !type && !/\\s/.test(query),\n              hidden: !!type,\n            },\n            {\n              label: (\n                <>\n                  Posts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\n              hidden: /^https?:/.test(query),\n              top: /\\s/.test(query),\n              icon: 'document',\n            },\n            {\n              label: (\n                <>\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\n                </>\n              ),\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\n              hidden:\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\n              top: /^#/.test(query),\n              type: 'link',\n              icon: 'hashtag',\n            },\n            {\n              label: (\n                <>\n                  Look up <mark>{query}</mark>\n                </>\n              ),\n              to: `/${query}`,\n              hidden: !/^https?:/.test(query),\n              top: /^https?:/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Accounts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\n              icon: 'group',\n            },\n          ]\n            .sort((a, b) => {\n              if (a.top && !b.top) return -1;\n              if (!a.top && b.top) return 1;\n              return 0;\n            })\n            .filter(({ hidden }) => !hidden)\n            .map(({ label, to, icon, type }, i) => (\n              <Link\n                to={to}\n                class={`search-popover-item ${i === 0 ? 'focus' : ''}`}\n                // hidden={hidden}\n                onClick={(e) => {\n                  props?.onSubmit?.(e);\n                }}\n              >\n                <Icon\n                  icon={icon || (type === 'link' ? 'arrow-right' : 'search')}\n                  class=\"more-insignificant\"\n                />\n                <span>{label}</span>{' '}\n              </Link>\n            ))}\n      </div>\n    </form>\n  );\n});\n\nexport default SearchForm;\n","import './search-command.css';\n\nimport { memo } from 'preact/compat';\nimport { useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport SearchForm from './search-form';\n\nexport default memo(function SearchCommand({ onClose = () => {} }) {\n  const [showSearch, setShowSearch] = useState(false);\n  const searchFormRef = useRef(null);\n\n  useHotkeys(\n    ['Slash', '/'],\n    (e) => {\n      setShowSearch(true);\n      setTimeout(() => {\n        searchFormRef.current?.focus?.();\n        searchFormRef.current?.select?.();\n      }, 0);\n    },\n    {\n      preventDefault: true,\n      ignoreEventWhen: (e) => {\n        const isSearchPage = /\\/search/.test(location.hash);\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return isSearchPage || hasModal;\n      },\n    },\n  );\n\n  const closeSearch = () => {\n    setShowSearch(false);\n    onClose();\n  };\n\n  useHotkeys(\n    'esc',\n    (e) => {\n      searchFormRef.current?.blur?.();\n      closeSearch();\n    },\n    {\n      enabled: showSearch,\n      enableOnFormTags: true,\n      preventDefault: true,\n    },\n  );\n\n  return (\n    <div\n      id=\"search-command-container\"\n      hidden={!showSearch}\n      onClick={(e) => {\n        console.log(e);\n        if (e.target === e.currentTarget) {\n          closeSearch();\n        }\n      }}\n    >\n      <SearchForm\n        ref={searchFormRef}\n        onSubmit={() => {\n          closeSearch();\n        }}\n      />\n    </div>\n  );\n});\n","import './shortcuts.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useMemo, useRef } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport Menu2 from './menu2';\nimport MenuLink from './menu-link';\n\nfunction Shortcuts() {\n  const { instance } = api();\n  const snapStates = useSnapshot(states);\n  const { shortcuts, settings } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n  if (\n    settings.shortcutsViewMode === 'multi-column' ||\n    (!settings.shortcutsViewMode && settings.shortcutsColumnsMode)\n  ) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const formattedShortcuts = useMemo(\n    () =>\n      shortcuts\n        .map((pin, i) => {\n          const { type, ...data } = pin;\n          if (!SHORTCUTS_META[type]) return null;\n          let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\n\n          if (typeof id === 'function') {\n            id = id(data, i);\n          }\n          if (typeof path === 'function') {\n            path = path(\n              {\n                ...data,\n                instance: data.instance || instance,\n              },\n              i,\n            );\n          }\n          if (typeof title === 'function') {\n            title = title(data, i);\n          }\n          if (typeof subtitle === 'function') {\n            subtitle = subtitle(data, i);\n          }\n          if (typeof icon === 'function') {\n            icon = icon(data, i);\n          }\n\n          return {\n            id,\n            path,\n            title,\n            subtitle,\n            icon,\n          };\n        })\n        .filter(Boolean),\n    [shortcuts],\n  );\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav\n          class=\"tab-bar\"\n          onContextMenu={(e) => {\n            e.preventDefault();\n            states.showShortcutsSettings = true;\n          }}\n        >\n          <ul>\n            {formattedShortcuts.map(\n              ({ id, path, title, subtitle, icon }, i) => {\n                return (\n                  <li key={`${i}-${id}-${title}-${subtitle}-${path}`}>\n                    <Link\n                      class={subtitle ? 'has-subtitle' : ''}\n                      to={path}\n                      onClick={(e) => {\n                        if (e.target.classList.contains('is-active')) {\n                          e.preventDefault();\n                          const page = document.getElementById(`${id}-page`);\n                          console.log(id, page);\n                          if (page) {\n                            page.scrollTop = 0;\n                            const updatesButton =\n                              page.querySelector('.updates-button');\n                            if (updatesButton) {\n                              updatesButton.click();\n                            }\n                          }\n                        }\n                      }}\n                    >\n                      <Icon icon={icon} size=\"xl\" alt={title} />\n                      <span>\n                        <AsyncText>{title}</AsyncText>\n                        {subtitle && (\n                          <>\n                            <br />\n                            <small>{subtitle}</small>\n                          </>\n                        )}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              },\n            )}\n          </ul>\n        </nav>\n      ) : (\n        <Menu2\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          gap={8}\n          position=\"anchor\"\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onContextMenu={(e) => {\n                e.preventDefault();\n                states.showShortcutsSettings = true;\n              }}\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ id, path, title, subtitle, icon }, i) => {\n            return (\n              <MenuLink\n                to={path}\n                key={`${i}-${id}-${title}-${subtitle}-${path}`}\n                class=\"glass-menu-item\"\n              >\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <span>\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  {subtitle && (\n                    <>\n                      {' '}\n                      <small class=\"more-insignificant\">{subtitle}</small>\n                    </>\n                  )}\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu2>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Shortcuts);\n","import { api } from './api';\nimport { extractTagsFromStatus, getFollowedTags } from './followed-tags';\nimport pmem from './pmem';\nimport { fetchRelationships } from './relationships';\nimport states, { saveStatus, statusKey } from './states';\nimport store from './store';\n\nexport function groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog && !item.account?.group) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (\n    values.length > 10 &&\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\n  ) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nexport function dedupeBoosts(items, instance) {\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\n  const filteredItems = items.filter((item) => {\n    if (!item.reblog) return true;\n    const statusKey = `${instance}-${item.reblog.id}`;\n    const boosterID = boostedStatusIDs[statusKey];\n    if (boosterID && boosterID !== item.id) {\n      console.warn(\n        `🚫 Duplicate boost by ${item.account.displayName}`,\n        item,\n        item.reblog,\n      );\n      return false;\n    } else {\n      boostedStatusIDs[statusKey] = item.id;\n    }\n    return true;\n  });\n  // Limit to 50\n  const keys = Object.keys(boostedStatusIDs);\n  if (keys.length > 50) {\n    keys.slice(0, keys.length - 50).forEach((key) => {\n      delete boostedStatusIDs[key];\n    });\n  }\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\n  return filteredItems;\n}\n\nexport function groupContext(items, instance) {\n  const contexts = [];\n  let contextIndex = 0;\n  items.forEach((item) => {\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) return;\n      if (\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\n        contexts[i].find((t) => t.inReplyToId === item.id)\n      ) {\n        contexts[i].push(item);\n        return;\n      }\n    }\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\n    if (repliedItem) {\n      contexts[contextIndex++] = [item, repliedItem];\n    }\n  });\n\n  // Check for cross-item contexts\n  // Merge contexts into one if they have a common item (same id)\n  for (let i = 0; i < contexts.length; i++) {\n    for (let j = i + 1; j < contexts.length; j++) {\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\n      if (commonItem) {\n        contexts[i] = [...contexts[i], ...contexts[j]];\n        // Remove duplicate items\n        contexts[i] = contexts[i].filter(\n          (item, index, self) =>\n            self.findIndex((t) => t.id === item.id) === index,\n        );\n        contexts.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  // Sort items by checking inReplyToId\n  contexts.forEach((context) => {\n    context.sort((a, b) => {\n      if (!a.inReplyToId && !b.inReplyToId) {\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      }\n      if (a.inReplyToId === b.id) return 1;\n      if (b.inReplyToId === a.id) return -1;\n      if (!a.inReplyToId) return -1;\n      if (!b.inReplyToId) return 1;\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n  });\n\n  // Tag items that has different author than first post's author\n  contexts.forEach((context) => {\n    const firstItemAccountID = context[0].account.id;\n    context.forEach((item) => {\n      if (item.account.id !== firstItemAccountID) {\n        item._differentAuthor = true;\n      }\n    });\n  });\n\n  if (contexts.length) console.log('🧵 Contexts', contexts);\n\n  const newItems = [];\n  const appliedContextIndices = [];\n  items.forEach((item) => {\n    if (item.reblog) {\n      newItems.push(item);\n      return;\n    }\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) {\n        if (appliedContextIndices.includes(i)) return;\n        const contextItems = contexts[i];\n        contextItems.sort((a, b) => {\n          const aDate = new Date(a.createdAt);\n          const bDate = new Date(b.createdAt);\n          return aDate - bDate;\n        });\n        const firstItemAccountID = contextItems[0].account.id;\n        newItems.push({\n          id: contextItems.map((i) => i.id),\n          items: contextItems,\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\n            ? 'thread'\n            : 'conversation',\n        });\n        appliedContextIndices.push(i);\n        return;\n      }\n    }\n\n    if (item.inReplyToId && item.inReplyToAccountId !== item.account.id) {\n      const sKey = statusKey(item.id, instance);\n      if (!states.statusReply[sKey]) {\n        // If it's a reply and not a thread\n        queueMicrotask(async () => {\n          try {\n            const { masto } = api({ instance });\n            // const replyToStatus = await masto.v1.statuses\n            //   .$select(item.inReplyToId)\n            //   .fetch();\n            const replyToStatus = await fetchStatus(item.inReplyToId, masto);\n            saveStatus(replyToStatus, instance, {\n              skipThreading: true,\n              skipUnfurling: true,\n            });\n            states.statusReply[sKey] = {\n              id: replyToStatus.id,\n              instance,\n            };\n          } catch (e) {\n            // Silently fail\n            console.error(e);\n          }\n        });\n      }\n    }\n\n    newItems.push(item);\n  });\n\n  return newItems;\n}\n\nconst fetchStatus = pmem((statusID, masto) => {\n  return masto.v1.statuses.$select(statusID).fetch();\n});\n\nexport async function assignFollowedTags(items, instance) {\n  const followedTags = await getFollowedTags(); // [{name: 'tag'}, {...}]\n  if (!followedTags.length) return;\n  const { statusFollowedTags } = states;\n  console.log('statusFollowedTags', statusFollowedTags);\n  const statusWithFollowedTags = [];\n  items.forEach((item) => {\n    if (item.reblog) return;\n    const { id, content, tags = [] } = item;\n    const sKey = statusKey(id, instance);\n    if (statusFollowedTags[sKey]?.length) return;\n    const extractedTags = extractTagsFromStatus(content);\n    if (!extractedTags.length && !tags.length) return;\n    const itemFollowedTags = followedTags.reduce((acc, tag) => {\n      if (\n        extractedTags.some((t) => t.toLowerCase() === tag.name.toLowerCase()) ||\n        tags.some((t) => t.name.toLowerCase() === tag.name.toLowerCase())\n      ) {\n        acc.push(tag.name);\n      }\n      return acc;\n    }, []);\n    if (itemFollowedTags.length) {\n      // statusFollowedTags[sKey] = itemFollowedTags;\n      statusWithFollowedTags.push({\n        item,\n        sKey,\n        followedTags: itemFollowedTags,\n      });\n    }\n  });\n\n  if (statusWithFollowedTags.length) {\n    const accounts = statusWithFollowedTags.map((s) => s.item.account);\n    const relationships = await fetchRelationships(accounts);\n    if (!relationships) return;\n\n    statusWithFollowedTags.forEach((s) => {\n      const { item, sKey, followedTags } = s;\n      const r = relationships[item.account.id];\n      if (r && !r.following) {\n        statusFollowedTags[sKey] = followedTags;\n      }\n    });\n  }\n}\n\nexport function clearFollowedTagsState() {\n  states.statusFollowedTags = {};\n}\n","import { useLayoutEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableRef,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableRef.current) {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useThrottledCallback } from 'use-debounce';\n\nexport default function useScrollFn(\n  {\n    scrollableRef,\n    distanceFromStart = 1, // ratio of clientHeight/clientWidth\n    distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n    scrollThresholdStart = 10,\n    scrollThresholdEnd = 10,\n    direction = 'vertical',\n    distanceFromStartPx: _distanceFromStartPx,\n    distanceFromEndPx: _distanceFromEndPx,\n    init,\n  } = {},\n  callback,\n  deps,\n) {\n  if (!callback) return;\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n  const previousScrollStart = useRef(null);\n\n  const onScroll = useThrottledCallback(() => {\n    const scrollableElement = scrollableRef.current;\n    const {\n      scrollTop,\n      scrollLeft,\n      scrollHeight,\n      scrollWidth,\n      clientHeight,\n      clientWidth,\n    } = scrollableElement;\n    const scrollStart = isVertical ? scrollTop : scrollLeft;\n    const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n    const clientDimension = isVertical ? clientHeight : clientWidth;\n    const scrollDistance = Math.abs(scrollStart - previousScrollStart.current);\n    const distanceFromStartPx =\n      _distanceFromStartPx ||\n      Math.min(\n        clientDimension * distanceFromStart,\n        scrollDimension,\n        scrollStart,\n      );\n    const distanceFromEndPx =\n      _distanceFromEndPx ||\n      Math.min(\n        clientDimension * distanceFromEnd,\n        scrollDimension,\n        scrollDimension - scrollStart - clientDimension,\n      );\n\n    if (\n      scrollDistance >=\n      (previousScrollStart.current < scrollStart\n        ? scrollThresholdEnd\n        : scrollThresholdStart)\n    ) {\n      setScrollDirection(\n        previousScrollStart.current < scrollStart ? 'end' : 'start',\n      );\n      previousScrollStart.current = scrollStart;\n    }\n\n    setReachStart(scrollStart <= 0);\n    setReachEnd(scrollStart + clientDimension >= scrollDimension);\n    setNearReachStart(scrollStart <= distanceFromStartPx);\n    setNearReachEnd(\n      scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n    );\n  }, 500);\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    previousScrollStart.current =\n      scrollableElement[isVertical ? 'scrollTop' : 'scrollLeft'];\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  useEffect(() => {\n    callback({\n      scrollDirection,\n      reachStart,\n      reachEnd,\n      nearReachStart,\n      nearReachEnd,\n    });\n  }, [\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    ...deps,\n  ]);\n\n  useEffect(() => {\n    if (init && scrollableRef.current) {\n      queueMicrotask(() => {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      });\n    }\n  }, [init]);\n\n  // return {\n  //   scrollDirection,\n  //   reachStart,\n  //   reachEnd,\n  //   nearReachStart,\n  //   nearReachEnd,\n  //   init: () => {\n  //     if (scrollableRef.current) {\n  //       scrollableRef.current.dispatchEvent(new Event('scroll'));\n  //     }\n  //   },\n  // };\n}\n","import './media-post.css';\n\nimport { memo } from 'preact/compat';\nimport { useContext, useMemo } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport store from '../utils/store';\n\nimport Media from './media';\n\nfunction MediaPost({\n  class: className,\n  statusID,\n  status,\n  instance,\n  parent,\n  // allowFilters,\n  onMediaClick,\n}) {\n  let sKey = statusKey(statusID, instance);\n  const snapStates = useSnapshot(states);\n  if (!status) {\n    status = snapStates.statuses[sKey] || snapStates.statuses[statusID];\n    sKey = statusKey(status?.id, instance);\n  }\n  if (!status) {\n    return null;\n  }\n\n  const {\n    account: {\n      acct,\n      avatar,\n      avatarStatic,\n      id: accountId,\n      url: accountURL,\n      displayName,\n      username,\n      emojis: accountEmojis,\n      bot,\n      group,\n    },\n    id,\n    repliesCount,\n    reblogged,\n    reblogsCount,\n    favourited,\n    favouritesCount,\n    bookmarked,\n    poll,\n    muted,\n    sensitive,\n    spoilerText,\n    visibility, // public, unlisted, private, direct\n    language,\n    editedAt,\n    filtered,\n    card,\n    createdAt,\n    inReplyToId,\n    inReplyToAccountId,\n    content,\n    mentions,\n    mediaAttachments,\n    reblog,\n    uri,\n    url,\n    emojis,\n    // Non-API props\n    _deleted,\n    _pinned,\n    // _filtered,\n  } = status;\n\n  if (!mediaAttachments?.length) {\n    return null;\n  }\n\n  const debugHover = (e) => {\n    if (e.shiftKey) {\n      console.log({\n        ...status,\n      });\n    }\n  };\n\n  const currentAccount = useMemo(() => {\n    return store.session.get('currentAccount');\n  }, []);\n  const isSelf = useMemo(() => {\n    return currentAccount && currentAccount === accountId;\n  }, [accountId, currentAccount]);\n\n  const filterContext = useContext(FilterContext);\n  const filterInfo = !isSelf && isFiltered(filtered, filterContext);\n\n  if (filterInfo?.action === 'hide') {\n    return null;\n  }\n\n  console.debug('RENDER Media post', id, status?.account.displayName);\n\n  const hasSpoiler = sensitive;\n  const readingExpandMedia = useMemo(() => {\n    // default | show_all | hide_all\n    const prefs = store.account.get('preferences') || {};\n    return prefs['reading:expand:media'] || 'default';\n  }, []);\n  const showSpoilerMedia = readingExpandMedia === 'show_all';\n\n  const Parent = parent || 'div';\n\n  return mediaAttachments.map((media, i) => {\n    const mediaKey = `${sKey}-${media.id}`;\n    const filterTitleStr = filterInfo?.titlesStr;\n    return (\n      <Parent\n        data-state-post-id={sKey}\n        onMouseEnter={debugHover}\n        key={mediaKey}\n        data-spoiler-text={\n          spoilerText || (sensitive ? 'Sensitive media' : undefined)\n        }\n        data-filtered-text={\n          filterInfo\n            ? `Filtered${filterTitleStr ? `: ${filterTitleStr}` : ''}`\n            : undefined\n        }\n        class={`\n          media-post\n          ${filterInfo ? 'filtered' : ''}\n          ${hasSpoiler ? 'has-spoiler' : ''}\n          ${showSpoilerMedia ? 'show-media' : ''}\n        `}\n      >\n        <Media\n          class={className}\n          media={media}\n          lang={language}\n          to={`/${instance}/s/${id}?media-only=${i + 1}`}\n          onClick={\n            onMediaClick ? (e) => onMediaClick(e, i, media, status) : undefined\n          }\n        />\n      </Parent>\n    );\n  });\n}\n\nexport default memo(MediaPost);\n","import './nav-menu.css';\n\nimport { ControlledMenu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useLongPress } from 'use-long-press';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport MenuLink from './menu-link';\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance, authenticated } = api();\n\n  const [currentAccount, setCurrentAccount] = useState();\n  const [moreThanOneAccount, setMoreThanOneAccount] = useState(false);\n\n  useEffect(() => {\n    const accounts = store.local.getJSON('accounts') || [];\n    const acc = accounts.find(\n      (account) => account.info.id === store.session.get('currentAccount'),\n    );\n    if (acc) setCurrentAccount(acc);\n    setMoreThanOneAccount(accounts.length > 1);\n  }, []);\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    (snapStates.settings.shortcutsViewMode === 'multi-column' ||\n      (!snapStates.settings.shortcutsViewMode &&\n        snapStates.settings.shortcutsColumnsMode)) &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  const bindLongPress = useLongPress(\n    () => {\n      states.showAccounts = true;\n    },\n    {\n      threshold: 600,\n      detect: 'touch',\n      cancelOnMovement: true,\n    },\n  );\n\n  const buttonRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n\n  const boundingBoxPadding = safeBoundingBoxPadding([\n    0,\n    0,\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\n    0,\n  ]);\n\n  const mutesIterator = useRef();\n  async function fetchMutes(firstLoad) {\n    if (firstLoad || !mutesIterator.current) {\n      mutesIterator.current = masto.v1.mutes.list({\n        limit: 80,\n      });\n    }\n    const results = await mutesIterator.current.next();\n    return results;\n  }\n\n  const blocksIterator = useRef();\n  async function fetchBlocks(firstLoad) {\n    if (firstLoad || !blocksIterator.current) {\n      blocksIterator.current = masto.v1.blocks.list({\n        limit: 80,\n      });\n    }\n    const results = await blocksIterator.current.next();\n    return results;\n  }\n\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        type=\"button\"\n        class={`button plain nav-menu-button ${\n          moreThanOneAccount ? 'with-avatar' : ''\n        } ${open ? 'active' : ''}`}\n        style={{ position: 'relative' }}\n        onClick={() => {\n          setMenuState((state) => (!state ? 'open' : undefined));\n        }}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          states.showAccounts = true;\n        }}\n        {...bindLongPress()}\n      >\n        {moreThanOneAccount && (\n          <Avatar\n            url={\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\n            }\n            size=\"l\"\n            squircle={currentAccount?.info?.bot}\n          />\n        )}\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\n      </button>\n      <ControlledMenu\n        menuClassName=\"nav-menu\"\n        state={menuState}\n        anchorRef={buttonRef}\n        onClose={() => {\n          setMenuState(undefined);\n        }}\n        containerProps={{\n          style: {\n            zIndex: 10,\n          },\n          onClick: () => {\n            setMenuState(undefined);\n          },\n        }}\n        portal={{\n          target: document.body,\n        }}\n        {...props}\n        overflow=\"auto\"\n        viewScroll=\"close\"\n        position=\"anchor\"\n        align=\"center\"\n        boundingBoxPadding={boundingBoxPadding}\n        unmountOnClose\n      >\n        {!!snapStates.appVersion?.commitHash &&\n          __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\n            <div class=\"top-menu\">\n              <MenuItem\n                onClick={() => {\n                  const yes = confirm('Reload page now to update?');\n                  if (yes) {\n                    (async () => {\n                      try {\n                        location.reload();\n                      } catch (e) {}\n                    })();\n                  }\n                }}\n              >\n                <Icon icon=\"sparkles\" class=\"sparkle-icon\" size=\"l\" />{' '}\n                <span>New update available…</span>\n              </MenuItem>\n              <MenuDivider />\n            </div>\n          )}\n        <section>\n          <MenuLink to=\"/\">\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n          </MenuLink>\n          {authenticated && (\n            <>\n              {showFollowing && (\n                <MenuLink to=\"/following\">\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/mentions\">\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\n              </MenuLink>\n              <MenuLink to=\"/notifications\">\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n                {snapStates.notificationsShowNew && (\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\n                    {' '}\n                    &bull;\n                  </sup>\n                )}\n              </MenuLink>\n              <MenuDivider />\n              <MenuLink to=\"/l\">\n                <Icon icon=\"list\" size=\"l\" /> <span>Lists</span>\n              </MenuLink>\n              <MenuLink to=\"/ft\">\n                <Icon icon=\"hashtag\" size=\"l\" /> <span>Followed Hashtags</span>\n              </MenuLink>\n              <MenuLink to=\"/b\">\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n              </MenuLink>\n              <MenuLink to=\"/f\">\n                <Icon icon=\"heart\" size=\"l\" /> <span>Likes</span>\n              </MenuLink>\n            </>\n          )}\n          <MenuDivider />\n          <MenuLink to={`/search`}>\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p/l`}>\n            <Icon icon=\"building\" size=\"l\" /> <span>Local</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p`}>\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/trending`}>\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\n          </MenuLink>\n        </section>\n        <section>\n          {authenticated ? (\n            <>\n              <MenuDivider />\n              {currentAccount?.info?.id && (\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\n                </MenuLink>\n              )}\n              <MenuItem\n                onClick={() => {\n                  states.showAccounts = true;\n                }}\n              >\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'mute',\n                    heading: 'Muted users',\n                    fetchAccounts: fetchMutes,\n                    excludeRelationshipAttrs: ['muting'],\n                  };\n                }}\n              >\n                <Icon icon=\"mute\" size=\"l\" /> Muted users&hellip;\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showGenericAccounts = {\n                    id: 'block',\n                    heading: 'Blocked users',\n                    fetchAccounts: fetchBlocks,\n                    excludeRelationshipAttrs: ['blocking'],\n                  };\n                }}\n              >\n                <Icon icon=\"block\" size=\"l\" />\n                Blocked users&hellip;\n              </MenuItem>\n              <MenuDivider className=\"divider-grow\" />\n              <MenuItem\n                onClick={() => {\n                  states.showKeyboardShortcutsHelp = true;\n                }}\n              >\n                <Icon icon=\"keyboard\" size=\"l\" />{' '}\n                <span>Keyboard shortcuts</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showShortcutsSettings = true;\n                }}\n              >\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\n                <span>Shortcuts / Columns&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuLink to=\"/login\">\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\n              </MenuLink>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          )}\n        </section>\n      </ControlledMenu>\n    </>\n  );\n}\n\nexport default NavMenu;\n","import { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport FilterContext from '../utils/filter-context';\nimport { filteredItems, isFiltered } from '../utils/filters';\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\nimport useScrollFn from '../utils/useScrollFn';\n\nimport Icon from './icon';\nimport Link from './link';\nimport MediaPost from './media-post';\nimport NavMenu from './nav-menu';\nimport Status from './status';\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 15_000, // 15 seconds\n  headerStart,\n  headerEnd,\n  timelineStart,\n  // allowFilters,\n  refresh,\n  view,\n  filterContext,\n  showFollowedTags,\n  showReplyParent,\n}) {\n  const snapStates = useSnapshot(states);\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  console.debug('RENDER Timeline', id, refresh);\n\n  const allowGrouping = view !== 'media';\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (Array.isArray(value)) {\n            // Avoid grouping for pinned posts\n            const [pinnedPosts, otherPosts] = value.reduce(\n              (acc, item) => {\n                if (item._pinned) {\n                  acc[0].push(item);\n                } else {\n                  acc[1].push(item);\n                }\n                return acc;\n              },\n              [[], []],\n            );\n            value = otherPosts;\n            if (allowGrouping) {\n              if (boostsCarousel) {\n                value = groupBoosts(value);\n              }\n              value = groupContext(value, instance);\n            }\n            if (pinnedPosts.length) {\n              value = pinnedPosts.concat(value);\n            }\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            if (!value.length) done = true;\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement.closest(itemsSelector);\n    if (activeItem) {\n      activeItem.click();\n    }\n  });\n\n  const showNewPostsIndicator =\n    items.length > 0 && uiState !== 'loading' && showNew;\n  const handleLoadNewPosts = useCallback(() => {\n    loadItems(true);\n    scrollableRef.current?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, [loadItems]);\n  const dotRef = useHotkeys('.', () => {\n    if (showNewPostsIndicator) {\n      handleLoadNewPosts();\n    }\n  });\n\n  // const {\n  //   scrollDirection,\n  //   nearReachStart,\n  //   nearReachEnd,\n  //   reachStart,\n  //   reachEnd,\n  // } = useScroll({\n  //   scrollableRef,\n  //   distanceFromEnd: 2,\n  //   scrollThresholdStart: 44,\n  // });\n  const headerRef = useRef();\n  // const [hiddenUI, setHiddenUI] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  useScrollFn(\n    {\n      scrollableRef,\n      distanceFromEnd: 2,\n      scrollThresholdStart: 44,\n    },\n    ({\n      scrollDirection,\n      nearReachStart,\n      nearReachEnd,\n      reachStart,\n      reachEnd,\n    }) => {\n      // setHiddenUI(scrollDirection === 'end' && !nearReachEnd);\n      if (headerRef.current) {\n        const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n        headerRef.current.hidden = hiddenUI;\n      }\n      setNearReachStart(nearReachStart);\n      if (reachStart) {\n        loadItems(true);\n      }\n      // else if (nearReachEnd || (reachEnd && showMore)) {\n      //   loadItems();\n      // }\n    },\n    [],\n  );\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n  useEffect(() => {\n    loadItems(true);\n  }, [refresh]);\n\n  // useEffect(() => {\n  //   if (reachStart) {\n  //     loadItems(true);\n  //   }\n  // }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd || (reachEnd && showMore)) {\n  //     loadItems();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const prevView = useRef(view);\n  useEffect(() => {\n    if (prevView.current !== view) {\n      prevView.current = view;\n      setItems([]);\n    }\n  }, [view]);\n\n  const loadOrCheckUpdates = useCallback(\n    async ({ disableIdleCheck = false } = {}) => {\n      const noPointers = scrollableRef.current\n        ? getComputedStyle(scrollableRef.current).pointerEvents === 'none'\n        : false;\n      console.log('✨ Load or check updates', id, {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current.scrollTop,\n        disableIdleCheck,\n        idle: window.__IDLE__,\n        inBackground: inBackground(),\n        noPointers,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground() &&\n        !noPointers\n      ) {\n        console.log('✨ Load updates', id, snapStates.settings.autoRefresh);\n        loadItems(true);\n      } else {\n        console.log('✨ Check updates', id, snapStates.settings.autoRefresh);\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates', id);\n          setShowNew(true);\n        }\n      }\n    },\n    [id, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\n  );\n\n  const lastHiddenTime = useRef();\n  usePageVisibility(\n    (visible) => {\n      if (visible) {\n        const timeDiff = Date.now() - lastHiddenTime.current;\n        if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n          // 3 seconds\n          loadOrCheckUpdates({\n            disableIdleCheck: true,\n          });\n        }\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      setVisible(visible);\n    },\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\n  );\n\n  // checkForUpdates interval\n  useInterval(\n    loadOrCheckUpdates,\n    visible && !showNew\n      ? checkForUpdatesInterval * (nearReachStart ? 1 : 2)\n      : null,\n  );\n\n  // const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <FilterContext.Provider value={filterContext}>\n      <div\n        id={`${id}-page`}\n        class=\"deck-container\"\n        ref={(node) => {\n          scrollableRef.current = node;\n          jRef.current = node;\n          kRef.current = node;\n          oRef.current = node;\n        }}\n        tabIndex=\"-1\"\n      >\n        <div class=\"timeline-deck deck\">\n          <header\n            ref={headerRef}\n            // hidden={hiddenUI}\n            onClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }\n            }}\n            onDblClick={(e) => {\n              if (!e.target.closest('a, button')) {\n                loadItems(true);\n              }\n            }}\n            class={uiState === 'loading' ? 'loading' : ''}\n          >\n            <div class=\"header-grid\">\n              <div class=\"header-side\">\n                <NavMenu />\n                {headerStart !== null && headerStart !== undefined ? (\n                  headerStart\n                ) : (\n                  <Link to=\"/\" class=\"button plain home-button\">\n                    <Icon icon=\"home\" size=\"l\" />\n                  </Link>\n                )}\n              </div>\n              {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n              <div class=\"header-side\">\n                {/* <Loader hidden={uiState !== 'loading'} /> */}\n                {!!headerEnd && headerEnd}\n              </div>\n            </div>\n            {showNewPostsIndicator && (\n              <button\n                class=\"updates-button shiny-pill\"\n                type=\"button\"\n                onClick={handleLoadNewPosts}\n              >\n                <Icon icon=\"arrow-up\" /> New posts\n              </button>\n            )}\n          </header>\n          {!!timelineStart && (\n            <div\n              class={`timeline-start ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {timelineStart}\n            </div>\n          )}\n          {!!items.length ? (\n            <>\n              <ul class={`timeline ${view ? `timeline-${view}` : ''}`}>\n                {items.map((status) => (\n                  <TimelineItem\n                    status={status}\n                    instance={instance}\n                    useItemID={useItemID}\n                    // allowFilters={allowFilters}\n                    filterContext={filterContext}\n                    key={status.id + status?._pinned + view}\n                    view={view}\n                    showFollowedTags={showFollowedTags}\n                    showReplyParent={showReplyParent}\n                  />\n                ))}\n                {showMore &&\n                  uiState === 'loading' &&\n                  (view === 'media' ? null : (\n                    <>\n                      <li\n                        style={{\n                          height: '20vh',\n                        }}\n                      >\n                        <Status skeleton />\n                      </li>\n                      <li\n                        style={{\n                          height: '25vh',\n                        }}\n                      >\n                        <Status skeleton />\n                      </li>\n                    </>\n                  ))}\n              </ul>\n              {uiState === 'default' &&\n                (showMore ? (\n                  <InView\n                    root={scrollableRef.current}\n                    rootMargin={`0px 0px ${screen.height * 1.5}px 0px`}\n                    onChange={(inView) => {\n                      if (inView) {\n                        loadItems();\n                      }\n                    }}\n                  >\n                    <button\n                      type=\"button\"\n                      class=\"plain block\"\n                      onClick={() => loadItems()}\n                      style={{ marginBlockEnd: '6em' }}\n                    >\n                      Show more&hellip;\n                    </button>\n                  </InView>\n                ) : (\n                  <p class=\"ui-state insignificant\">The end.</p>\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <ul class=\"timeline\">\n              {Array.from({ length: 5 }).map((_, i) =>\n                view === 'media' ? (\n                  <div\n                    style={{\n                      height: '50vh',\n                    }}\n                  />\n                ) : (\n                  <li key={i}>\n                    <Status skeleton />\n                  </li>\n                ),\n              )}\n            </ul>\n          ) : (\n            uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              {errorText}\n              <br />\n              <br />\n              <button type=\"button\" onClick={() => loadItems(!items.length)}>\n                Try again\n              </button>\n            </p>\n          )}\n        </div>\n      </div>\n    </FilterContext.Provider>\n  );\n}\n\nfunction TimelineItem({\n  status,\n  instance,\n  useItemID,\n  // allowFilters,\n  filterContext,\n  view,\n  showFollowedTags,\n  showReplyParent,\n}) {\n  const { id: statusID, reblog, items, type, _pinned } = status;\n  if (_pinned) useItemID = false;\n  const actualStatusID = reblog?.id || statusID;\n  const url = instance\n    ? `/${instance}/s/${actualStatusID}`\n    : `/s/${actualStatusID}`;\n  let title = '';\n  if (type === 'boosts') {\n    title = `${items.length} Boosts`;\n  } else if (type === 'pinned') {\n    title = 'Pinned posts';\n  }\n  const isCarousel = type === 'boosts' || type === 'pinned';\n  if (items) {\n    const fItems = filteredItems(items, filterContext);\n    if (isCarousel) {\n      // Here, we don't hide filtered posts, but we sort them last\n      fItems.sort((a, b) => {\n        // if (a._filtered && !b._filtered) {\n        //   return 1;\n        // }\n        // if (!a._filtered && b._filtered) {\n        //   return -1;\n        // }\n        const aFiltered = isFiltered(a.filtered, filterContext);\n        const bFiltered = isFiltered(b.filtered, filterContext);\n        if (aFiltered && !bFiltered) {\n          return 1;\n        }\n        if (!aFiltered && bFiltered) {\n          return -1;\n        }\n        return 0;\n      });\n      return (\n        <li key={`timeline-${statusID}`} class=\"timeline-item-carousel\">\n          <StatusCarousel title={title} class={`${type}-carousel`}>\n            {fItems.map((item) => {\n              const { id: statusID, reblog, _pinned } = item;\n              const actualStatusID = reblog?.id || statusID;\n              const url = instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`;\n              if (_pinned) useItemID = false;\n              return (\n                <li key={statusID}>\n                  <Link class=\"status-carousel-link timeline-item-alt\" to={url}>\n                    {useItemID ? (\n                      <Status\n                        statusID={statusID}\n                        instance={instance}\n                        size=\"s\"\n                        contentTextWeight\n                        enableCommentHint\n                        // allowFilters={allowFilters}\n                      />\n                    ) : (\n                      <Status\n                        status={item}\n                        instance={instance}\n                        size=\"s\"\n                        contentTextWeight\n                        enableCommentHint\n                        // allowFilters={allowFilters}\n                      />\n                    )}\n                  </Link>\n                </li>\n              );\n            })}\n          </StatusCarousel>\n        </li>\n      );\n    }\n    const manyItems = fItems.length > 3;\n    return fItems.map((item, i) => {\n      const { id: statusID, _differentAuthor } = item;\n      const url = instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`;\n      const isMiddle = i > 0 && i < fItems.length - 1;\n      const isSpoiler = item.sensitive && !!item.spoilerText;\n      const showCompact =\n        (!_differentAuthor && isSpoiler && i > 0) ||\n        (manyItems &&\n          isMiddle &&\n          (type === 'thread' ||\n            (type === 'conversation' &&\n              !_differentAuthor &&\n              !fItems[i - 1]._differentAuthor &&\n              !fItems[i + 1]._differentAuthor)));\n      const isStart = i === 0;\n      const isEnd = i === fItems.length - 1;\n      return (\n        <li\n          key={`timeline-${statusID}`}\n          class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\n            isStart ? 'start' : isEnd ? 'end' : 'middle'\n          } ${_differentAuthor ? 'timeline-item-diff-author' : ''}`}\n        >\n          <Link class=\"status-link timeline-item\" to={url}>\n            {showCompact ? (\n              <TimelineStatusCompact status={item} instance={instance} />\n            ) : useItemID ? (\n              <Status\n                statusID={statusID}\n                instance={instance}\n                enableCommentHint={isEnd}\n                showFollowedTags={showFollowedTags}\n                // allowFilters={allowFilters}\n              />\n            ) : (\n              <Status\n                status={item}\n                instance={instance}\n                enableCommentHint={isEnd}\n                showFollowedTags={showFollowedTags}\n                // allowFilters={allowFilters}\n              />\n            )}\n          </Link>\n        </li>\n      );\n    });\n  }\n\n  const itemKey = `timeline-${statusID + _pinned}`;\n\n  if (view === 'media') {\n    return useItemID ? (\n      <MediaPost\n        class=\"timeline-item\"\n        parent=\"li\"\n        key={itemKey}\n        statusID={statusID}\n        instance={instance}\n        // allowFilters={allowFilters}\n      />\n    ) : (\n      <MediaPost\n        class=\"timeline-item\"\n        parent=\"li\"\n        key={itemKey}\n        status={status}\n        instance={instance}\n        // allowFilters={allowFilters}\n      />\n    );\n  }\n\n  return (\n    <li key={itemKey}>\n      <Link class=\"status-link timeline-item\" to={url}>\n        {useItemID ? (\n          <Status\n            statusID={statusID}\n            instance={instance}\n            enableCommentHint\n            showFollowedTags={showFollowedTags}\n            showReplyParent={showReplyParent}\n            // allowFilters={allowFilters}\n          />\n        ) : (\n          <Status\n            status={status}\n            instance={instance}\n            enableCommentHint\n            showFollowedTags={showFollowedTags}\n            showReplyParent={showReplyParent}\n            // allowFilters={allowFilters}\n          />\n        )}\n      </Link>\n    </li>\n  );\n}\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  // const { reachStart, reachEnd, init } = useScroll({\n  //   scrollableRef: carouselRef,\n  //   direction: 'horizontal',\n  // });\n  const startButtonRef = useRef();\n  const endButtonRef = useRef();\n  // useScrollFn(\n  //   {\n  //     scrollableRef: carouselRef,\n  //     direction: 'horizontal',\n  //     init: true,\n  //   },\n  //   ({ reachStart, reachEnd }) => {\n  //     if (startButtonRef.current) startButtonRef.current.disabled = reachStart;\n  //     if (endButtonRef.current) endButtonRef.current.disabled = reachEnd;\n  //   },\n  //   [],\n  // );\n  // useEffect(() => {\n  //   init?.();\n  // }, []);\n\n  const [render, setRender] = useState(false);\n  useEffect(() => {\n    setTimeout(() => {\n      setRender(true);\n    }, 1);\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            ref={startButtonRef}\n            type=\"button\"\n            class=\"small plain2\"\n            // disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            ref={endButtonRef}\n            type=\"button\"\n            class=\"small plain2\"\n            // disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>\n        <InView\n          class=\"status-carousel-beacon\"\n          onChange={(inView) => {\n            if (startButtonRef.current)\n              startButtonRef.current.disabled = inView;\n          }}\n        />\n        {children[0]}\n        {render && children.slice(1)}\n        <InView\n          class=\"status-carousel-beacon\"\n          onChange={(inView) => {\n            if (endButtonRef.current) endButtonRef.current.disabled = inView;\n          }}\n        />\n      </ul>\n    </div>\n  );\n}\n\nfunction TimelineStatusCompact({ status, instance }) {\n  const snapStates = useSnapshot(states);\n  const { id, visibility, language } = status;\n  const statusPeekText = statusPeek(status);\n  const sKey = statusKey(id, instance);\n  return (\n    <article\n      class={`status compact-thread ${\n        visibility === 'direct' ? 'visibility-direct' : ''\n      }`}\n      tabindex=\"-1\"\n    >\n      {!!snapStates.statusThreadNumber[sKey] ? (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n          {snapStates.statusThreadNumber[sKey]\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\n            : ''}\n        </div>\n      ) : (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n        </div>\n      )}\n      <div\n        class=\"content-compact\"\n        title={statusPeekText}\n        lang={language}\n        dir=\"auto\"\n      >\n        {statusPeekText}\n        {status.sensitive && status.spoilerText && (\n          <>\n            {' '}\n            <span class=\"spoiler-badge\">\n              <Icon icon=\"eye-close\" size=\"s\" />\n            </span>\n          </>\n        )}\n      </div>\n    </article>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nexport default Timeline;\n","import { MenuItem } from '@szhsin/react-menu';\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountInfo from '../components/account-info';\nimport EmojiText from '../components/emoji-text';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport pmem from '../utils/pmem';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst MIN_YEAR = 1983;\nconst MIN_YEAR_MONTH = `${MIN_YEAR}-01`; // Birth of the Internet\n\nconst supportsInputMonth = (() => {\n  try {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'month');\n    return input.type === 'month';\n  } catch (e) {\n    return false;\n  }\n})();\n\nasync function _isSearchEnabled(instance) {\n  const { masto } = api({ instance });\n  const results = await masto.v2.search.fetch({\n    q: 'from:me',\n    type: 'statuses',\n    limit: 1,\n  });\n  return !!results?.statuses?.length;\n}\nconst isSearchEnabled = pmem(_isSearchEnabled);\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const month = searchParams.get('month');\n  const excludeReplies = !searchParams.get('replies');\n  const excludeBoosts = !!searchParams.get('boosts');\n  const tagged = searchParams.get('tagged');\n  const media = !!searchParams.get('media');\n  const { masto, instance, authenticated } = api({ instance: params.instance });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const accountStatusesIterator = useRef();\n\n  const allSearchParams = [month, excludeReplies, excludeBoosts, tagged, media];\n  const [account, setAccount] = useState();\n  const searchOffsetRef = useRef(0);\n  useEffect(() => {\n    searchOffsetRef.current = 0;\n  }, allSearchParams);\n\n  const sameCurrentInstance = useMemo(\n    () => instance === currentInstance,\n    [instance, currentInstance],\n  );\n  const [searchEnabled, setSearchEnabled] = useState(false);\n  useEffect(() => {\n    // Only enable for current logged-in instance\n    // Most remote instances don't allow unauthenticated searches\n    if (!sameCurrentInstance) return;\n    if (!account?.acct) return;\n    (async () => {\n      const enabled = await isSearchEnabled(instance);\n      console.log({ enabled });\n      setSearchEnabled(enabled);\n    })();\n  }, [instance, sameCurrentInstance, account?.acct]);\n\n  async function fetchAccountStatuses(firstLoad) {\n    const isValidMonth = /^\\d{4}-[01]\\d$/.test(month);\n    const isValidYear = month?.split?.('-')?.[0] >= MIN_YEAR;\n    if (isValidMonth && isValidYear) {\n      if (!account) {\n        return {\n          value: [],\n          done: true,\n        };\n      }\n      const [_year, _month] = month.split('-');\n      const monthIndex = parseInt(_month, 10) - 1;\n      // YYYY-MM (no day)\n      // Search options:\n      // - from:account\n      // - after:YYYY-MM-DD (non-inclusive)\n      // - before:YYYY-MM-DD (non-inclusive)\n\n      // Last day of previous month\n      const after = new Date(_year, monthIndex, 0);\n      const afterStr = `${after.getFullYear()}-${(after.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${after.getDate().toString().padStart(2, '0')}`;\n      // First day of next month\n      const before = new Date(_year, monthIndex + 1, 1);\n      const beforeStr = `${before.getFullYear()}-${(before.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${before.getDate().toString().padStart(2, '0')}`;\n      console.log({\n        month,\n        _year,\n        _month,\n        monthIndex,\n        after,\n        before,\n        afterStr,\n        beforeStr,\n      });\n\n      let limit;\n      if (firstLoad) {\n        limit = LIMIT + 1;\n        searchOffsetRef.current = 0;\n      } else {\n        limit = LIMIT + searchOffsetRef.current + 1;\n        searchOffsetRef.current += LIMIT;\n      }\n\n      const searchResults = await masto.v2.search.fetch({\n        q: `from:${account.acct} after:${afterStr} before:${beforeStr}`,\n        type: 'statuses',\n        limit,\n        offset: searchOffsetRef.current,\n      });\n      if (searchResults?.statuses?.length) {\n        const value = searchResults.statuses.slice(0, LIMIT);\n        value.forEach((item) => {\n          saveStatus(item, instance);\n        });\n        const done = searchResults.statuses.length <= LIMIT;\n        return { value, done };\n      } else {\n        return { value: [], done: true };\n      }\n    }\n\n    const results = [];\n    if (firstLoad) {\n      const { value } = await masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          pinned: true,\n        })\n        .next();\n      if (value?.length && !tagged && !media) {\n        const pinnedStatuses = value.map((status) => {\n          saveStatus(status, instance);\n          return {\n            ...status,\n            _pinned: true,\n          };\n        });\n        if (pinnedStatuses.length >= 3) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts\n        .$select(id)\n        .statuses.list({\n          limit: LIMIT,\n          exclude_replies: excludeReplies,\n          exclude_reblogs: excludeBoosts,\n          only_media: media,\n          tagged,\n        });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      results.push(...value);\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [featuredTags, setFeaturedTags] = useState([]);\n  useTitle(\n    account?.acct\n      ? `${account?.displayName ? account.displayName + ' ' : ''}@${\n          account.acct\n        }${\n          !excludeReplies\n            ? ' (+ Replies)'\n            : excludeBoosts\n            ? ' (- Boosts)'\n            : tagged\n            ? ` (#${tagged})`\n            : media\n            ? ' (Media)'\n            : month\n            ? ` (${new Date(month).toLocaleString('default', {\n                month: 'long',\n                year: 'numeric',\n              })})`\n            : ''\n        }`\n      : 'Account posts',\n    '/:instance?/a/:id',\n  );\n\n  const fetchAccountPromiseRef = useRef();\n  const fetchAccount = useCallback(() => {\n    const fetchPromise =\n      fetchAccountPromiseRef.current || masto.v1.accounts.$select(id).fetch();\n    fetchAccountPromiseRef.current = fetchPromise;\n    return fetchPromise;\n  }, [id, masto]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await fetchAccount();\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n      try {\n        const featuredTags = await masto.v1.accounts\n          .$select(id)\n          .featuredTags.list();\n        console.log({ featuredTags });\n        setFeaturedTags(featuredTags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const { displayName, acct, emojis } = account || {};\n\n  const accountInfoMemo = useMemo(() => {\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\n    return (\n      <AccountInfo\n        instance={instance}\n        account={cachedAccount || id}\n        fetchAccount={fetchAccount}\n        authenticated={authenticated}\n        standalone\n      />\n    );\n  }, [id, instance, authenticated, fetchAccount]);\n\n  const filterBarRef = useRef();\n  const TimelineStart = useMemo(() => {\n    const filtered =\n      !excludeReplies || excludeBoosts || tagged || media || !!month;\n\n    return (\n      <>\n        {accountInfoMemo}\n        <div\n          class=\"filter-bar\"\n          ref={filterBarRef}\n          style={{\n            position: 'relative',\n          }}\n        >\n          {filtered ? (\n            <Link\n              to={`/${instance}/a/${id}`}\n              class=\"insignificant filter-clear\"\n              title=\"Clear filters\"\n              key=\"clear-filters\"\n            >\n              <Icon icon=\"x\" size=\"l\" />\n            </Link>\n          ) : (\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\n          )}\n          <Link\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\n            onClick={() => {\n              if (excludeReplies) {\n                showToast('Showing post with replies');\n              }\n            }}\n            class={excludeReplies ? '' : 'is-active'}\n          >\n            + Replies\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\n            onClick={() => {\n              if (!excludeBoosts) {\n                showToast('Showing posts without boosts');\n              }\n            }}\n            class={!excludeBoosts ? '' : 'is-active'}\n          >\n            - Boosts\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\n            onClick={() => {\n              if (!media) {\n                showToast('Showing posts with media');\n              }\n            }}\n            class={media ? 'is-active' : ''}\n          >\n            Media\n          </Link>\n          {featuredTags.map((tag) => (\n            <Link\n              key={tag.id}\n              to={`/${instance}/a/${id}${\n                tagged === tag.name\n                  ? ''\n                  : `?tagged=${encodeURIComponent(tag.name)}`\n              }`}\n              onClick={() => {\n                if (tagged !== tag.name) {\n                  showToast(`Showing posts tagged with #${tag.name}`);\n                }\n              }}\n              class={tagged === tag.name ? 'is-active' : ''}\n            >\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {tag.name}\n              </span>\n              {\n                // The count differs based on instance 😅\n              }\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\n            </Link>\n          ))}\n          {searchEnabled &&\n            (supportsInputMonth ? (\n              <label class={`filter-field ${month ? 'is-active' : ''}`}>\n                <Icon icon=\"month\" size=\"l\" />\n                <input\n                  type=\"month\"\n                  disabled={!account?.acct}\n                  value={month || ''}\n                  min={MIN_YEAR_MONTH}\n                  max={new Date().toISOString().slice(0, 7)}\n                  onInput={(e) => {\n                    const { value, validity } = e.currentTarget;\n                    if (!validity.valid) return;\n                    setSearchParams(\n                      value\n                        ? {\n                            month: value,\n                          }\n                        : {},\n                    );\n                    const [year, month] = value.split('-');\n                    const monthIndex = parseInt(month, 10) - 1;\n                    const date = new Date(year, monthIndex);\n                    showToast(\n                      `Showing posts in ${date.toLocaleString('default', {\n                        month: 'long',\n                        year: 'numeric',\n                      })}`,\n                    );\n                  }}\n                />\n              </label>\n            ) : (\n              // Fallback to <select> for month and <input type=\"number\"> for year\n              <MonthPicker\n                class={`filter-field ${month ? 'is-active' : ''}`}\n                disabled={!account?.acct}\n                value={month || ''}\n                min={MIN_YEAR_MONTH}\n                max={new Date().toISOString().slice(0, 7)}\n                onInput={(e) => {\n                  const { value, validity } = e;\n                  if (!validity.valid) return;\n                  setSearchParams(\n                    value\n                      ? {\n                          month: value,\n                        }\n                      : {},\n                  );\n                }}\n              />\n            ))}\n        </div>\n      </>\n    );\n  }, [\n    id,\n    instance,\n    authenticated,\n    featuredTags,\n    searchEnabled,\n    ...allSearchParams,\n  ]);\n\n  useEffect(() => {\n    // Focus on .is-active\n    const active = filterBarRef.current?.querySelector('.is-active');\n    if (active) {\n      console.log('active', active, active.offsetLeft);\n      filterBarRef.current.scrollTo({\n        behavior: 'smooth',\n        left:\n          active.offsetLeft -\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\n      });\n    }\n  }, [featuredTags, searchEnabled, ...allSearchParams]);\n\n  const accountInstance = useMemo(() => {\n    if (!account?.url) return null;\n    const domain = new URL(account.url).hostname;\n    return domain;\n  }, [account]);\n  const sameInstance = instance === accountInstance;\n  const allowSwitch = !!account && !sameInstance;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-double-lines header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b>\n            <EmojiText text={displayName} emojis={emojis} />\n          </b>\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchAccountStatuses}\n      useItemID\n      view={media ? 'media' : undefined}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      timelineStart={TimelineStart}\n      refresh={[\n        excludeReplies,\n        excludeBoosts,\n        tagged,\n        media,\n        month + account?.acct,\n      ].toString()}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            disabled={!allowSwitch}\n            onClick={() => {\n              (async () => {\n                try {\n                  const { masto } = api({\n                    instance: accountInstance,\n                  });\n                  const acc = await masto.v1.accounts.lookup({\n                    acct: account.acct,\n                  });\n                  const { id } = acc;\n                  location.hash = `/${accountInstance}/a/${id}`;\n                } catch (e) {\n                  console.error(e);\n                  alert('Unable to fetch account info');\n                }\n              })();\n            }}\n          >\n            <Icon icon=\"transfer\" />{' '}\n            <small class=\"menu-double-lines\">\n              Switch to account's instance (<b>{accountInstance}</b>)\n            </small>\n          </MenuItem>\n          {!sameCurrentInstance && (\n            <MenuItem\n              onClick={() => {\n                (async () => {\n                  try {\n                    const acc = await currentMasto.v1.accounts.lookup({\n                      acct: account.acct + '@' + instance,\n                    });\n                    const { id } = acc;\n                    location.hash = `/${currentInstance}/a/${id}`;\n                  } catch (e) {\n                    console.error(e);\n                    alert('Unable to fetch account info');\n                  }\n                })();\n              }}\n            >\n              <Icon icon=\"transfer\" />{' '}\n              <small class=\"menu-double-lines\">\n                Switch to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nfunction MonthPicker(props) {\n  const {\n    class: className,\n    disabled,\n    value,\n    min,\n    max,\n    onInput = () => {},\n  } = props;\n  const [_year, _month] = value?.split('-') || [];\n  const monthFieldRef = useRef();\n  const yearFieldRef = useRef();\n\n  const checkValidity = (month, year) => {\n    const [minYear, minMonth] = min?.split('-') || [];\n    const [maxYear, maxMonth] = max?.split('-') || [];\n    if (year < minYear) return false;\n    if (year > maxYear) return false;\n    if (year === minYear && month < minMonth) return false;\n    if (year === maxYear && month > maxMonth) return false;\n    return true;\n  };\n\n  return (\n    <div class={className}>\n      <Icon icon=\"month\" size=\"l\" />\n      <select\n        ref={monthFieldRef}\n        disabled={disabled}\n        value={_month || ''}\n        onInput={(e) => {\n          const { value: month } = e.currentTarget;\n          const year = yearFieldRef.current.value;\n          if (!checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: month ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n      >\n        <option value=\"\">Month</option>\n        <option disabled>-----</option>\n        {Array.from({ length: 12 }, (_, i) => (\n          <option\n            value={\n              // Month is 1-indexed\n              (i + 1).toString().padStart(2, '0')\n            }\n            key={i}\n          >\n            {new Date(0, i).toLocaleString('default', {\n              month: 'long',\n            })}\n          </option>\n        ))}\n      </select>{' '}\n      <input\n        ref={yearFieldRef}\n        type=\"number\"\n        disabled={disabled}\n        value={_year || new Date().getFullYear()}\n        min={min?.slice(0, 4) || MIN_YEAR}\n        max={max?.slice(0, 4) || new Date().getFullYear()}\n        onInput={(e) => {\n          const { value: year, validity } = e.currentTarget;\n          const month = monthFieldRef.current.value;\n          if (!validity.valid || !checkValidity(month, year))\n            return {\n              value: '',\n              validity: {\n                valid: false,\n              },\n            };\n          onInput({\n            value: year ? `${year}-${month}` : '',\n            validity: {\n              valid: true,\n            },\n          });\n        }}\n        style={{\n          width: '4.5em',\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountStatuses;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Likes', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Likes\"\n      id=\"favourites\"\n      emptyText=\"No likes yet. Go like something!\"\n      errorText=\"Unable to load likes\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport { fetchFollowedTags } from '../utils/followed-tags';\nimport useTitle from '../utils/useTitle';\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/ft`);\n  const [uiState, setUIState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const tags = await fetchFollowedTags();\n        setFollowedHashtags(tags);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <>\n              <ul class=\"link-list\">\n                {followedHashtags.map((tag) => (\n                  <li>\n                    <Link\n                      to={\n                        instance\n                          ? `/${instance}/t/${tag.name}`\n                          : `/t/${tag.name}`\n                      }\n                    >\n                      <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n              {followedHashtags.length > 1 && (\n                <footer class=\"ui-state\">\n                  <small class=\"insignificant\">\n                    {followedHashtags.length} hashtag\n                    {followedHashtags.length === 1 ? '' : 's'}\n                  </small>\n                </footer>\n              )}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport {\n  assignFollowedTags,\n  clearFollowedTagsState,\n  dedupeBoosts,\n} from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, streaming, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  console.debug('RENDER Following', title, id);\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.home.list({ limit: LIMIT });\n    }\n    const results = await homeIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      let latestItemChanged = false;\n      if (firstLoad) {\n        if (value[0].id !== latestItem.current) {\n          latestItemChanged = true;\n        }\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n      value = dedupeBoosts(value, instance);\n      if (firstLoad && latestItemChanged) clearFollowedTagsState();\n      assignFollowedTags(value, instance);\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.home\n        .list({\n          limit: 5,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      if (value?.length) {\n        latestItem.current = value[0].id;\n        value = dedupeBoosts(value, instance);\n        value = filteredItems(value, 'home');\n        if (value.some((item) => !item.reblog)) {\n          return true;\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  useEffect(() => {\n    let sub;\n    (async () => {\n      if (streaming) {\n        sub = streaming.user.subscribe();\n        console.log('🎏 Streaming user', sub);\n        for await (const entry of sub) {\n          if (!sub) break;\n          if (entry.event === 'status.update') {\n            const status = entry.payload;\n            console.log(`🔄 Status ${status.id} updated`);\n            saveStatus(status, instance);\n          } else if (entry.event === 'delete') {\n            const statusID = entry.payload;\n            console.log(`❌ Status ${statusID} deleted`);\n            // delete states.statuses[statusID];\n            const s = getStatus(statusID, instance);\n            if (s) s._deleted = true;\n          }\n        }\n        console.log('💥 Streaming user loop STOPPED');\n      }\n    })();\n    return () => {\n      sub?.unsubscribe?.();\n      sub = null;\n    };\n  }, [streaming]);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n      // allowFilters\n      filterContext=\"home\"\n      showFollowedTags\n      showReplyParent\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  MenuDivider,\n  MenuGroup,\n  MenuHeader,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport { SHORTCUTS_LIMIT } from '../components/shortcuts-settings';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags({ media: mediaView, columnMode, ...props }) {\n  // const navigate = useNavigate();\n  let { hashtag, ...params } = columnMode ? {} : useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n  const [searchParams, setSearchParams] = useSearchParams();\n  const media = mediaView || !!searchParams.get('media');\n  const linkParams = media ? '?media=1' : '';\n\n  const { masto, instance, authenticated } = api({\n    instance: props?.instance || params.instance,\n  });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const hashtagPostTitle = media ? ` (Media only)` : '';\n  const title = instance\n    ? `${hashtagTitle}${hashtagPostTitle} on ${instance}`\n    : `${hashtagTitle}${hashtagPostTitle}`;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  // const hashtagsIterator = useRef();\n  const maxID = useRef(undefined);\n  async function fetchHashtags(firstLoad) {\n    // if (firstLoad || !hashtagsIterator.current) {\n    //   hashtagsIterator.current = masto.v1.timelines.tag.$select(hashtag).list({\n    //     limit: LIMIT,\n    //     any: hashtags.slice(1),\n    //   });\n    // }\n    // const results = await hashtagsIterator.current.next();\n\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\n    const results = await masto.v1.timelines.tag\n      .$select(hashtag)\n      .list({\n        limit: LIMIT,\n        any: hashtags.slice(1),\n        maxId: firstLoad ? undefined : maxID.current,\n        onlyMedia: media,\n      })\n      .next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance, {\n          skipThreading: media, // If media view, no need to form threads\n        });\n      });\n\n      maxID.current = value[value.length - 1].id;\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.tag\n        .$select(hashtag)\n        .list({\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n          onlyMedia: media,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.$select(hashtag).fetch();\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={instance + hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-double-lines\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      view={media ? 'media' : undefined}\n      refresh={media}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          setDownOverflow\n          overflow=\"auto\"\n          // viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuConfirm\n                subMenu\n                confirm={info.following}\n                confirmLabel={`Unfollow #${hashtag}?`}\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\n                    // if (!yes) {\n                    //   setFollowUIState('default');\n                    //   return;\n                    // }\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .unfollow()\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .$select(hashtag)\n                      .follow()\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuConfirm>\n              <MenuDivider />\n            </>\n          )}\n          <MenuHeader className=\"plain\">Filters</MenuHeader>\n          <MenuItem\n            type=\"checkbox\"\n            checked={!!media}\n            onClick={() => {\n              if (media) {\n                searchParams.delete('media');\n              } else {\n                searchParams.set('media', '1');\n              }\n              setSearchParams(searchParams);\n            }}\n          >\n            <Icon icon=\"check-circle\" />{' '}\n            <span class=\"menu-grow\">Media only</span>\n          </MenuItem>\n          <MenuDivider />\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value?.trim?.();\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    // navigate(\n                    //   instance\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\n                    //     : `/t/${hashtags.join('+')}`,\n                    // );\n                    location.hash = instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}${linkParams}`;\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  autocorrect=\"off\"\n                  autocapitalize=\"off\"\n                  spellcheck={false}\n                  // no spaces, no hashtags\n                  pattern=\"[^#][^\\s#]+[^#]\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                disabled={hashtags.length === 1}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  // navigate(\n                  //   instance\n                  //     ? `/${instance}/t/${hashtags.join('+')}`\n                  //     : `/t/${hashtags.join('+')}`,\n                  // );\n                  location.hash = instance\n                    ? `/${instance}/t/${hashtags.join('+')}${linkParams}`\n                    : `/t/${hashtags.join('+')}${linkParams}`;\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!currentAuthenticated}\n            onClick={() => {\n              if (states.shortcuts.length >= SHORTCUTS_LIMIT) {\n                alert(\n                  `Max ${SHORTCUTS_LIMIT} shortcuts reached. Unable to add shortcut.`,\n                );\n                return;\n              }\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n                instance,\n                media: media ? 'on' : undefined,\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' ') &&\n                  (s.instance ? s.instance === shortcut.instance : true) &&\n                  (s.media ? !!s.media === !!shortcut.media : true),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/t/${hashtags.join('+')}`);\n                location.hash = `/${newInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/t/${hashtags.join(\n                  '+',\n                )}${linkParams}`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import './lists.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Modal from '../components/modal';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states, { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.list.$select(id).list({\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.list.$select(id).list({\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      let { value } = results;\n      value = filteredItems(value, 'home');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [list, setList] = useState({ title: 'List' });\n  // const [title, setTitle] = useState(`List`);\n  useTitle(list.title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await masto.v1.lists.$select(id).fetch();\n        setList(list);\n        // setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\n\n  return (\n    <>\n      <Timeline\n        key={id}\n        title={list.title}\n        id=\"list\"\n        emptyText=\"Nothing yet.\"\n        errorText=\"Unable to load posts.\"\n        instance={instance}\n        fetchItems={fetchList}\n        checkForUpdates={checkForUpdates}\n        useItemID\n        boostsCarousel={snapStates.settings.boostsCarousel}\n        // allowFilters\n        filterContext=\"home\"\n        showReplyParent\n        // refresh={reloadCount}\n        headerStart={\n          <Link to=\"/l\" class=\"button plain\">\n            <Icon icon=\"list\" size=\"l\" />\n          </Link>\n        }\n        headerEnd={\n          <Menu2\n            portal\n            setDownOverflow\n            overflow=\"auto\"\n            viewScroll=\"close\"\n            position=\"anchor\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"more\" size=\"l\" />\n              </button>\n            }\n          >\n            <MenuItem\n              onClick={() =>\n                setShowListAddEditModal({\n                  list,\n                })\n              }\n            >\n              <Icon icon=\"pencil\" size=\"l\" />\n              <span>Edit</span>\n            </MenuItem>\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\n              <Icon icon=\"group\" size=\"l\" />\n              <span>Manage members</span>\n            </MenuItem>\n          </Menu2>\n        }\n      />\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success' && result.list) {\n                setList(result.list);\n                // reload();\n              } else if (result.state === 'deleted') {\n                // navigate('/l');\n                location.hash = '/l';\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n      {showManageMembersModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowManageMembersModal(false);\n            }\n          }}\n        >\n          <ListManageMembers\n            listID={id}\n            onClose={() => setShowManageMembersModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nconst MEMBERS_LIMIT = 40;\nfunction ListManageMembers({ listID, onClose }) {\n  // Show list of members with [Remove] button\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\n  // Show [Add] button after removing a member\n  const { masto, instance } = api();\n  const [members, setMembers] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  const membersIterator = useRef();\n\n  async function fetchMembers(firstLoad) {\n    setShowMore(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        if (firstLoad || !membersIterator.current) {\n          membersIterator.current = masto.v1.lists\n            .$select(listID)\n            .accounts.list({\n              limit: MEMBERS_LIMIT,\n            });\n        }\n        const results = await membersIterator.current.next();\n        let { done, value } = results;\n        if (value?.length) {\n          if (firstLoad) {\n            setMembers(value);\n          } else {\n            setMembers(members.concat(value));\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    fetchMembers(true);\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"list-manage-members-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Manage members</h2>\n      </header>\n      <main>\n        <ul>\n          {members.map((member) => (\n            <li key={member.id}>\n              <AccountBlock account={member} instance={instance} />\n              <RemoveAddButton account={member} listID={listID} />\n            </li>\n          ))}\n          {showMore && uiState === 'default' && (\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\n                Show more&hellip;\n              </button>\n            </InView>\n          )}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nfunction RemoveAddButton({ account, listID }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [removed, setRemoved] = useState(false);\n\n  return (\n    <MenuConfirm\n      confirm={!removed}\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\n      align=\"end\"\n      menuItemClassName=\"danger\"\n      onClick={() => {\n        if (removed) {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.create({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(false);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        } else {\n          // const yes = confirm(`Remove ${account.username} from this list?`);\n          // if (!yes) return;\n          setUIState('loading');\n\n          (async () => {\n            try {\n              await masto.v1.lists.$select(listID).accounts.remove({\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(true);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        }\n      }}\n    >\n      <button\n        type=\"button\"\n        class={`light ${removed ? '' : 'danger'}`}\n        disabled={uiState === 'loading'}\n      >\n        {removed ? 'Add' : 'Remove…'}\n      </button>\n    </MenuConfirm>\n  );\n}\n\nexport default List;\n","import { useMemo, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Mentions({ columnMode, ...props }) {\n  const { masto, instance } = api();\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const [stateType, setStateType] = useState(null);\n  const type = props?.type || searchParams.get('type') || stateType;\n  useTitle(`Mentions${type === 'private' ? ' (Private)' : ''}`, '/mentions');\n\n  const mentionsIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchMentions(firstLoad) {\n    if (firstLoad || !mentionsIterator.current) {\n      mentionsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        types: ['mention'],\n      });\n    }\n    const results = await mentionsIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value.forEach(({ status: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value: value?.map((item) => item.status),\n    };\n  }\n\n  const conversationsIterator = useRef();\n  const latestConversationItem = useRef();\n  async function fetchConversations(firstLoad) {\n    if (firstLoad || !conversationsIterator.current) {\n      conversationsIterator.current = masto.v1.conversations.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await conversationsIterator.current.next();\n    let { value } = results;\n    value = value?.filter((item) => item.lastStatus);\n    if (value?.length) {\n      if (firstLoad) {\n        latestConversationItem.current = value[0].lastStatus.id;\n        console.log('First load', latestConversationItem.current);\n      }\n\n      value.forEach(({ lastStatus: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    console.log('results', results);\n    return {\n      ...results,\n      value: value?.map((item) => item.lastStatus),\n    };\n  }\n\n  function fetchItems(...args) {\n    if (type === 'private') {\n      return fetchConversations(...args);\n    }\n    return fetchMentions(...args);\n  }\n\n  async function checkForUpdates() {\n    if (type === 'private') {\n      try {\n        const results = await masto.v1.conversations\n          .list({\n            limit: 1,\n            since_id: latestConversationItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log(\n          'checkForUpdates PRIVATE',\n          latestConversationItem.current,\n          value,\n        );\n        if (value?.length) {\n          latestConversationItem.current = value[0].lastStatus.id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      try {\n        const results = await masto.v1.notifications\n          .list({\n            limit: 1,\n            types: ['mention'],\n            since_id: latestItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log('checkForUpdates ALL', latestItem.current, value);\n        if (value?.length) {\n          latestItem.current = value[0].id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <div class=\"filter-bar centered\">\n        <Link\n          to=\"/mentions\"\n          class={!type ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType(null);\n            }\n          }}\n        >\n          All\n        </Link>\n        <Link\n          to=\"/mentions?type=private\"\n          class={type === 'private' ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType('private');\n            }\n          }}\n        >\n          Private\n        </Link>\n      </div>\n    );\n  }, [type]);\n\n  return (\n    <Timeline\n      title=\"Mentions\"\n      id=\"mentions\"\n      emptyText=\"No one mentioned you :(\"\n      errorText=\"Unable to load mentions.\"\n      instance={instance}\n      fetchItems={fetchItems}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      timelineStart={TimelineStart}\n      refresh={type}\n    />\n  );\n}\n\nexport default Mentions;\n","// This is like very lame \"type-checking\" lol\nconst notificationTypeKeys = {\n  mention: ['account', 'status'],\n  status: ['account', 'status'],\n  reblog: ['account', 'status'],\n  follow: ['account'],\n  follow_request: ['account'],\n  favourite: ['account', 'status'],\n  poll: ['status'],\n  update: ['status'],\n};\nfunction fixNotifications(notifications) {\n  return notifications.filter((notification) => {\n    const { type, id, createdAt } = notification;\n    if (!type) {\n      console.warn('Notification missing type', notification);\n      return false;\n    }\n    if (!id || !createdAt) {\n      console.warn('Notification missing id or createdAt', notification);\n      // Continue processing this despite missing id or createdAt\n    }\n    const keys = notificationTypeKeys[type];\n    if (keys?.length) {\n      return keys.every((key) => !!notification[key]);\n    }\n    return true; // skip other types\n  });\n}\n\nfunction groupNotifications(notifications) {\n  // Filter out invalid notifications\n  notifications = fixNotifications(notifications);\n\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { id, status, account, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    let virtualType = type;\n    if (type === 'favourite' || type === 'reblog') {\n      virtualType = 'favourite+reblog';\n    }\n    const key = `${status?.id}-${virtualType}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (virtualType === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      const mappedAccount = mappedNotification._accounts.find(\n        (a) => a.id === account.id,\n      );\n      if (mappedAccount) {\n        mappedAccount._types.push(type);\n        mappedAccount._types.sort().reverse();\n        mappedNotification.id += `-${id}`;\n      } else {\n        account._types = [type];\n        mappedNotification._accounts.push(account);\n        mappedNotification.id += `-${id}`;\n      }\n    } else {\n      account._types = [type];\n      let n = (notificationsMap[key] = {\n        ...notification,\n        type: virtualType,\n        _accounts: [account],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\n  // This means one acount has favourited and reblogged the multiple statuses\n  // The grouped notification\n  // - type: \"favourite+reblog+account\"\n  // - _statuses: [status, status, ...]\n  const notificationsMap2 = {};\n  const cleanNotifications2 = [];\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\n    const notification = cleanNotifications[i];\n    const { id, account, _accounts, type, createdAt } = notification;\n    const date = createdAt ? new Date(createdAt).toLocaleDateString() : '';\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\n      const key = `${account?.id}-${type}-${date}`;\n      const mappedNotification = notificationsMap2[key];\n      if (mappedNotification) {\n        mappedNotification._statuses.push(notification.status);\n        mappedNotification.id += `-${id}`;\n      } else {\n        let n = (notificationsMap2[key] = {\n          ...notification,\n          type,\n          _statuses: [notification.status],\n        });\n        cleanNotifications2[j++] = n;\n      }\n    } else {\n      cleanNotifications2[j++] = notification;\n    }\n  }\n\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\n\n  // return cleanNotifications;\n  return cleanNotifications2;\n}\n\nexport default groupNotifications;\n","import './notifications.css';\n\nimport { Fragment } from 'preact';\nimport { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\nimport { subscribeKey } from 'valtio/utils';\n\nimport AccountBlock from '../components/account-block';\nimport FollowRequestButtons from '../components/follow-request-buttons';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport groupNotifications from '../utils/group-notifications';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport { getRegistration } from '../utils/push-notifications';\nimport shortenNumber from '../utils/shorten-number';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentInstance } from '../utils/store-utils';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 30; // 30 is the maximum limit :(\nconst emptySearchParams = new URLSearchParams();\n\nfunction Notifications({ columnMode }) {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const notificationID = searchParams.get('id');\n  const notificationAccessToken = searchParams.get('access_token');\n  const [showMore, setShowMore] = useState(false);\n  const [onlyMentions, setOnlyMentions] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableRef,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n  const [followRequests, setFollowRequests] = useState([]);\n  const [announcements, setAnnouncements] = useState([]);\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        excludeTypes: ['follow_request'],\n      });\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n\n        // Update last read marker\n        masto.v1.markers\n          .create({\n            notifications: {\n              lastReadId: notifications[0].id,\n            },\n          })\n          .catch(() => {});\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  async function fetchFollowRequests() {\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\n    try {\n      return await masto.v1.followRequests.list({\n        limit: 80,\n      });\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadFollowRequests = () => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const requests = await fetchFollowRequests();\n        setFollowRequests(requests);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  async function fetchAnnouncements() {\n    try {\n      return await masto.v1.announcements.list();\n    } catch (e) {\n      // Silently fail\n      return [];\n    }\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setShowNew(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\n\n        if (firstLoad) {\n          fetchAnnouncements()\n            .then((announcements) => {\n              announcements.sort((a, b) => {\n                // Sort by updatedAt first, then createdAt\n                const aDate = new Date(a.updatedAt || a.createdAt);\n                const bDate = new Date(b.updatedAt || b.createdAt);\n                return bDate - aDate;\n              });\n              setAnnouncements(announcements);\n            })\n            .catch(() => {});\n\n          fetchFollowRequests()\n            .then((requests) => {\n              setFollowRequests(requests);\n            })\n            .catch(() => {});\n        }\n\n        const { done } = await fetchNotificationsPromise;\n        setShowMore(!done);\n\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  // useEffect(() => {\n  //   if (nearReachEnd && showMore) {\n  //     loadNotifications();\n  //   }\n  // }, [nearReachEnd, showMore]);\n\n  const [showNew, setShowNew] = useState(false);\n\n  const loadUpdates = useCallback(\n    ({ disableIdleCheck = false } = {}) => {\n      if (uiState === 'loading') {\n        return;\n      }\n      console.log('✨ Load updates', {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current?.scrollTop,\n        inBackground: inBackground(),\n        disableIdleCheck,\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current?.scrollTop < 16 &&\n        (disableIdleCheck || window.__IDLE__) &&\n        !inBackground()\n      ) {\n        loadNotifications(true);\n      }\n    },\n    [snapStates.notificationsShowNew, snapStates.settings.autoRefresh, uiState],\n  );\n  // useEffect(loadUpdates, [snapStates.notificationsShowNew]);\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    let unsub;\n    if (visible) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n        // 3 seconds\n        loadUpdates({\n          disableIdleCheck: true,\n        });\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      unsub = subscribeKey(states, 'notificationsShowNew', (v) => {\n        if (v) {\n          loadUpdates();\n        }\n        setShowNew(v);\n      });\n    }\n    return () => {\n      unsub?.();\n    };\n  });\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  const announcementsListRef = useRef();\n\n  useEffect(() => {\n    if (notificationID) {\n      states.routeNotification = {\n        id: notificationID,\n        accessToken: atob(notificationAccessToken),\n      };\n    }\n  }, [notificationID, notificationAccessToken]);\n\n  // useEffect(() => {\n  //   if (uiState === 'default') {\n  //     (async () => {\n  //       try {\n  //         const registration = await getRegistration();\n  //         if (registration?.getNotifications) {\n  //           const notifications = await registration.getNotifications();\n  //           console.log('🔔 Push notifications', notifications);\n  //           // Close all notifications?\n  //           // notifications.forEach((notification) => {\n  //           //   notification.close();\n  //           // });\n  //         }\n  //       } catch (e) {}\n  //     })();\n  //   }\n  // }, [uiState]);\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={scrollableRef}\n      tabIndex=\"-1\"\n    >\n      <div class={`timeline-deck deck ${onlyMentions ? 'only-mentions' : ''}`}>\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n            </div>\n          </div>\n          {showNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        {announcements.length > 0 && (\n          <div class=\"shazam-container\">\n            <div class=\"shazam-container-inner\">\n              <details class=\"announcements\">\n                <summary>\n                  <span>\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\n                    <small class=\"insignificant\">{instance}</small>\n                  </span>\n                  {announcements.length > 1 && (\n                    <span class=\"announcements-nav-buttons\">\n                      {announcements.map((announcement, index) => (\n                        <button\n                          type=\"button\"\n                          class=\"plain2 small\"\n                          onClick={() => {\n                            announcementsListRef.current?.children[\n                              index\n                            ].scrollIntoView({\n                              behavior: 'smooth',\n                              block: 'nearest',\n                            });\n                          }}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </span>\n                  )}\n                </summary>\n                <ul\n                  class={`announcements-list-${\n                    announcements.length > 1 ? 'multiple' : 'single'\n                  }`}\n                  ref={announcementsListRef}\n                >\n                  {announcements.map((announcement) => (\n                    <li>\n                      <AnnouncementBlock announcement={announcement} />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            </div>\n          </div>\n        )}\n        {followRequests.length > 0 && (\n          <div class=\"follow-requests\">\n            <h2 class=\"timeline-header\">Follow requests</h2>\n            {followRequests.length > 5 ? (\n              <details>\n                <summary>{followRequests.length} follow requests</summary>\n                <ul>\n                  {followRequests.map((account) => (\n                    <li key={account.id}>\n                      <AccountBlock account={account} />\n                      <FollowRequestButtons\n                        accountID={account.id}\n                        onChange={() => {\n                          // loadFollowRequests();\n                          // loadNotifications(true);\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            ) : (\n              <ul>\n                {followRequests.map((account) => (\n                  <li key={account.id}>\n                    <AccountBlock account={account} />\n                    <FollowRequestButtons\n                      accountID={account.id}\n                      onChange={() => {\n                        // loadFollowRequests();\n                        // loadNotifications(true);\n                      }}\n                    />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={onlyMentions}\n              onChange={(e) => {\n                setOnlyMentions(e.target.checked);\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && !!snapStates.notifications.length && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              // This is leaked from Notifications popover\n              .filter((n) => n.type !== 'follow_request')\n              .map((notification) => {\n                if (onlyMentions && notification.type !== 'mention') {\n                  return null;\n                }\n                const notificationDay = new Date(notification.createdAt);\n                const differentDay =\n                  notificationDay.toDateString() !== currentDay.toDateString();\n                if (differentDay) {\n                  currentDay = notificationDay;\n                }\n                // if notificationDay is yesterday, show \"Yesterday\"\n                // if notificationDay is before yesterday, show date\n                const heading =\n                  notificationDay.toDateString() ===\n                  yesterdayDate.toDateString()\n                    ? 'Yesterday'\n                    : niceDateTime(currentDay, {\n                        hideTime: true,\n                      });\n                return (\n                  <Fragment key={notification.id}>\n                    {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                    <Notification\n                      instance={instance}\n                      notification={notification}\n                      key={notification.id}\n                    />\n                  </Fragment>\n                );\n              })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <InView\n            onChange={(inView) => {\n              if (inView) {\n                loadNotifications();\n              }\n            }}\n          >\n            <button\n              type=\"button\"\n              class=\"plain block\"\n              disabled={uiState === 'loading'}\n              onClick={() => loadNotifications()}\n              style={{ marginBlockEnd: '6em' }}\n            >\n              {uiState === 'loading' ? (\n                <Loader abrupt />\n              ) : (\n                <>Show more&hellip;</>\n              )}\n            </button>\n          </InView>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nfunction AnnouncementBlock({ announcement }) {\n  const { instance } = api();\n  const { contact } = getCurrentInstance();\n  const contactAccount = contact?.account;\n  const {\n    id,\n    content,\n    startsAt,\n    endsAt,\n    published,\n    allDay,\n    publishedAt,\n    updatedAt,\n    read,\n    mentions,\n    statuses,\n    tags,\n    emojis,\n    reactions,\n  } = announcement;\n\n  const publishedAtDate = new Date(publishedAt);\n  const publishedDateText = niceDateTime(publishedAtDate);\n  const updatedAtDate = new Date(updatedAt);\n  const updatedAtText = niceDateTime(updatedAtDate);\n\n  return (\n    <div class=\"announcement-block\">\n      <AccountBlock account={contactAccount} />\n      <div\n        class=\"announcement-content\"\n        onClick={handleContentLinks({ mentions, instance })}\n        dangerouslySetInnerHTML={{\n          __html: enhanceContent(content, {\n            emojis,\n          }),\n        }}\n      />\n      <p class=\"insignificant\">\n        <time datetime={publishedAtDate.toISOString()}>\n          {niceDateTime(publishedAtDate)}\n        </time>\n        {updatedAt && updatedAtText !== publishedDateText && (\n          <>\n            {' '}\n            &bull;{' '}\n            <span class=\"ib\">\n              Updated{' '}\n              <time datetime={updatedAtDate.toISOString()}>\n                {niceDateTime(updatedAtDate)}\n              </time>\n            </span>\n          </>\n        )}\n      </p>\n      <div class=\"announcement-reactions\" hidden>\n        {reactions.map((reaction) => {\n          const { name, count, me, staticUrl, url } = reaction;\n          return (\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\n              {url || staticUrl ? (\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\n              ) : (\n                <span>{name}</span>\n              )}{' '}\n              <span class=\"count\">{shortenNumber(count)}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const isLocal = !!local;\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.public.list({\n        limit: LIMIT,\n        local: isLocal,\n      });\n    }\n    const results = await publicIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.public\n        .list({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n                location.hash = isLocal\n                  ? `/${newInstance}/p/l`\n                  : `/${newInstance}/p`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = isLocal\n                  ? `/${currentInstance}/p/l`\n                  : `/${currentInstance}/p`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import './search.css';\n\nimport { useAutoAnimate } from '@formkit/auto-animate/preact';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport SearchForm from '../components/search-form';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport { fetchRelationships } from '../utils/relationships';\nimport shortenNumber from '../utils/shorten-number';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useTitle from '../utils/useTitle';\n\nconst SHORT_LIMIT = 5;\nconst LIMIT = 40;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Search({ columnMode, ...props }) {\n  const params = columnMode ? {} : useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const searchFormRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  const type = columnMode\n    ? 'statuses'\n    : props?.type || searchParams.get('type');\n  useTitle(\n    q\n      ? `Search: ${q}${\n          type\n            ? ` (${\n                {\n                  statuses: 'Posts',\n                  accounts: 'Accounts',\n                  hashtags: 'Hashtags',\n                }[type]\n              })`\n            : ''\n        }`\n      : 'Search',\n    `/search`,\n  );\n\n  const [showMore, setShowMore] = useState(false);\n  const offsetRef = useRef(0);\n  useEffect(() => {\n    offsetRef.current = 0;\n  }, [q, type]);\n\n  const scrollableRef = useRef();\n  useLayoutEffect(() => {\n    scrollableRef.current?.scrollTo?.(0, 0);\n  }, [q, type]);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    setStatusResults([]);\n    setAccountResults([]);\n    setHashtagResults([]);\n  }, [q]);\n  const setTypeResultsFunc = {\n    statuses: setStatusResults,\n    accounts: setAccountResults,\n    hashtags: setHashtagResults,\n  };\n\n  const [relationshipsMap, setRelationshipsMap] = useState({});\n  const loadRelationships = async (accounts) => {\n    if (!accounts?.length) return;\n    const relationships = await fetchRelationships(accounts, relationshipsMap);\n    if (relationships) {\n      setRelationshipsMap({\n        ...relationshipsMap,\n        ...relationships,\n      });\n    }\n  };\n\n  function loadResults(firstLoad) {\n    if (firstLoad) {\n      offsetRef.current = 0;\n    }\n\n    if (!firstLoad && !authenticated) {\n      // Search results pagination is only available to authenticated users\n      return;\n    }\n\n    setUIState('loading');\n    if (firstLoad && !type) {\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\n    }\n\n    (async () => {\n      const params = {\n        q,\n        resolve: authenticated,\n        limit: SHORT_LIMIT,\n      };\n      if (type) {\n        params.limit = LIMIT;\n        params.type = type;\n        if (authenticated) params.offset = offsetRef.current;\n      }\n\n      try {\n        const results = await masto.v2.search.fetch(params);\n        console.log(results);\n        if (type) {\n          if (firstLoad) {\n            setTypeResultsFunc[type](results[type]);\n            const length = results[type]?.length;\n            offsetRef.current = LIMIT;\n            setShowMore(!!length);\n          } else {\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\n            const length = results[type]?.length;\n            offsetRef.current = offsetRef.current + LIMIT;\n            setShowMore(!!length);\n          }\n        } else {\n          setStatusResults(results.statuses || []);\n          setAccountResults(results.accounts || []);\n          setHashtagResults(results.hashtags || []);\n          offsetRef.current = 0;\n          setShowMore(false);\n        }\n        loadRelationships(results.accounts);\n\n        setUIState('default');\n      } catch (err) {\n        console.error(err);\n        setUIState('error');\n      }\n    })();\n  }\n\n  const lastHiddenTime = useRef();\n  usePageVisibility((visible) => {\n    const reachStart = scrollableRef.current?.scrollTop === 0;\n    if (visible && reachStart) {\n      const timeDiff = Date.now() - lastHiddenTime.current;\n      if (!lastHiddenTime.current || timeDiff > 1000 * 3) {\n        // 3 seconds\n        loadResults(true);\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n    }\n  });\n\n  useEffect(() => {\n    searchFormRef.current?.setValue?.(q || '');\n    if (q) {\n      loadResults(true);\n    } else {\n      searchFormRef.current?.focus?.();\n    }\n  }, [q, type, instance]);\n\n  useHotkeys(\n    ['/', 'Slash'],\n    (e) => {\n      searchFormRef.current?.focus?.();\n    },\n    {\n      preventDefault: true,\n    },\n  );\n\n  const [filterBarParent] = useAutoAnimate();\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\n      <div class=\"timeline-deck deck\">\n        <header class={uiState === 'loading' ? 'loading' : ''}>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n            </div>\n            <SearchForm ref={searchFormRef} />\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => {\n                  loadResults(true);\n                }}\n                disabled={uiState === 'loading'}\n              >\n                <Icon icon=\"search\" size=\"l\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {!!q && !columnMode && (\n            <div\n              ref={filterBarParent}\n              class={`filter-bar ${uiState === 'loading' ? 'loading' : ''}`}\n            >\n              {!!type && (\n                <Link to={`/search${q ? `?q=${encodeURIComponent(q)}` : ''}`}>\n                  ‹ All\n                </Link>\n              )}\n              {[\n                {\n                  label: 'Accounts',\n                  type: 'accounts',\n                  to: `/search?q=${encodeURIComponent(q)}&type=accounts`,\n                },\n                {\n                  label: 'Hashtags',\n                  type: 'hashtags',\n                  to: `/search?q=${encodeURIComponent(q)}&type=hashtags`,\n                },\n                {\n                  label: 'Posts',\n                  type: 'statuses',\n                  to: `/search?q=${encodeURIComponent(q)}&type=statuses`,\n                },\n              ]\n                .sort((a, b) => {\n                  if (a.type === type) return -1;\n                  if (b.type === type) return 1;\n                  return 0;\n                })\n                .map((link) => (\n                  <Link to={link.to} key={link.type}>\n                    {link.label}\n                  </Link>\n                ))}\n            </div>\n          )}\n          {!!q ? (\n            <>\n              {(!type || type === 'accounts') && (\n                <>\n                  {type !== 'accounts' && (\n                    <h2 class=\"timeline-header\">\n                      Accounts{' '}\n                      <Link\n                        to={`/search?q=${encodeURIComponent(q)}&type=accounts`}\n                      >\n                        <Icon icon=\"arrow-right\" size=\"l\" />\n                      </Link>\n                    </h2>\n                  )}\n                  {accountResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline flat accounts-list\">\n                        {accountResults.map((account) => (\n                          <li key={account.id}>\n                            <AccountBlock\n                              account={account}\n                              instance={instance}\n                              showStats\n                              relationship={relationshipsMap[account.id]}\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'accounts' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${encodeURIComponent(\n                              q,\n                            )}&type=accounts`}\n                          >\n                            See more accounts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No accounts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'hashtags') && (\n                <>\n                  {type !== 'hashtags' && (\n                    <h2 class=\"timeline-header\">\n                      Hashtags{' '}\n                      <Link\n                        to={`/search?q=${encodeURIComponent(q)}&type=hashtags`}\n                      >\n                        <Icon icon=\"arrow-right\" size=\"l\" />\n                      </Link>\n                    </h2>\n                  )}\n                  {hashtagResults.length > 0 ? (\n                    <>\n                      <ul class=\"link-list hashtag-list\">\n                        {hashtagResults.map((hashtag) => {\n                          const { name, history } = hashtag;\n                          const total = history?.reduce?.(\n                            (acc, cur) => acc + +cur.uses,\n                            0,\n                          );\n                          return (\n                            <li key={`${name}-${total}`}>\n                              <Link\n                                to={\n                                  instance\n                                    ? `/${instance}/t/${name}`\n                                    : `/t/${name}`\n                                }\n                              >\n                                <Icon icon=\"hashtag\" />\n                                <span>{name}</span>\n                                {!!total && (\n                                  <span class=\"count\">\n                                    {shortenNumber(total)}\n                                  </span>\n                                )}\n                              </Link>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                      {type !== 'hashtags' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${encodeURIComponent(\n                              q,\n                            )}&type=hashtags`}\n                          >\n                            See more hashtags <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No hashtags found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'statuses') && (\n                <>\n                  {type !== 'statuses' && (\n                    <h2 class=\"timeline-header\">\n                      Posts{' '}\n                      <Link\n                        to={`/search?q=${encodeURIComponent(q)}&type=statuses`}\n                      >\n                        <Icon icon=\"arrow-right\" size=\"l\" />\n                      </Link>\n                    </h2>\n                  )}\n                  {statusResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline\">\n                        {statusResults.map((status) => (\n                          <li key={status.id}>\n                            <Link\n                              class=\"status-link\"\n                              to={\n                                instance\n                                  ? `/${instance}/s/${status.id}`\n                                  : `/s/${status.id}`\n                              }\n                            >\n                              <Status status={status} />\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'statuses' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${encodeURIComponent(\n                              q,\n                            )}&type=statuses`}\n                          >\n                            See more posts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No posts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {!!type &&\n                (uiState === 'default' ? (\n                  showMore ? (\n                    <InView\n                      onChange={(inView) => {\n                        if (inView) {\n                          loadResults();\n                        }\n                      }}\n                    >\n                      <button\n                        type=\"button\"\n                        class=\"plain block\"\n                        onClick={() => loadResults()}\n                        style={{ marginBlockEnd: '6em' }}\n                      >\n                        Show more&hellip;\n                      </button>\n                    </InView>\n                  ) : (\n                    <p class=\"ui-state insignificant\">The end.</p>\n                  )\n                ) : (\n                  uiState === 'loading' && (\n                    <p class=\"ui-state\">\n                      <Loader abrupt />\n                    </p>\n                  )\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import './trending.css';\n\nimport { MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport RelativeTime from '../components/relative-time';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { oklab2rgb, rgb2oklab } from '../utils/color-utils';\nimport { filteredItems } from '../utils/filters';\nimport pmem from '../utils/pmem';\nimport shortenNumber from '../utils/shorten-number';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nconst fetchLinks = pmem(\n  (masto) => {\n    return masto.v1.trends.links.list().next();\n  },\n  {\n    // News last much longer\n    maxAge: 10 * 60 * 1000, // 10 minutes\n  },\n);\n\nfunction Trending({ columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { masto: currentMasto, instance: currentInstance } = api();\n  const title = `Trending (${instance})`;\n  useTitle(title, `/:instance?/trending`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const [hashtags, setHashtags] = useState([]);\n  const [links, setLinks] = useState([]);\n  const trendIterator = useRef();\n  async function fetchTrend(firstLoad) {\n    if (firstLoad || !trendIterator.current) {\n      trendIterator.current = masto.v1.trends.statuses.list({\n        limit: LIMIT,\n      });\n\n      // Get hashtags\n      try {\n        const iterator = masto.v1.trends.tags.list();\n        const { value: tags } = await iterator.next();\n        console.log('tags', tags);\n        if (tags?.length) {\n          setHashtags(tags);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n\n      // Get links\n      try {\n        const { value } = await fetchLinks(masto);\n        // 4 types available: link, photo, video, rich\n        // Only want links for now\n        const links = value?.filter?.((link) => link.type === 'link');\n        console.log('links', links);\n        if (links?.length) {\n          setLinks(links);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    const results = await trendIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      // value = filteredItems(value, 'public'); // Might not work here\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.trends.statuses\n        .list({\n          limit: 1,\n          // NOT SUPPORTED\n          // since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length && value[0].id !== latestItem.current) {\n        latestItem.current = value[0].id;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <>\n        {!!hashtags.length && (\n          <div class=\"filter-bar expandable\">\n            <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\n            {hashtags.map((tag, i) => {\n              const { name, history } = tag;\n              const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\n              return (\n                <Link to={`/${instance}/t/${name}`} key={name}>\n                  <span>\n                    <span class=\"more-insignificant\">#</span>\n                    {name}\n                  </span>\n                  <span class=\"filter-count\">{shortenNumber(total)}</span>\n                </Link>\n              );\n            })}\n          </div>\n        )}\n        {!!links.length && (\n          <div class=\"links-bar\">\n            <header>\n              <h3>Trending News</h3>\n            </header>\n            {links.map((link) => {\n              const {\n                authorName,\n                authorUrl,\n                blurhash,\n                description,\n                height,\n                image,\n                imageDescription,\n                language,\n                providerName,\n                providerUrl,\n                publishedAt,\n                title,\n                url,\n                width,\n              } = link;\n              const domain = new URL(url).hostname\n                .replace(/^www\\./, '')\n                .replace(/\\/$/, '');\n              let accentColor;\n              if (blurhash) {\n                const averageColor = getBlurHashAverageColor(blurhash);\n                const labAverageColor = rgb2oklab(averageColor);\n                accentColor = oklab2rgb([\n                  0.6,\n                  labAverageColor[1],\n                  labAverageColor[2],\n                ]);\n              }\n\n              return (\n                <a\n                  key={url}\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  style={\n                    accentColor\n                      ? {\n                          '--accent-color': `rgb(${accentColor.join(',')})`,\n                          '--accent-alpha-color': `rgba(${accentColor.join(\n                            ',',\n                          )}, 0.4)`,\n                        }\n                      : {}\n                  }\n                >\n                  <article>\n                    <figure>\n                      <img\n                        src={image}\n                        alt={imageDescription}\n                        width={width}\n                        height={height}\n                        loading=\"lazy\"\n                      />\n                    </figure>\n                    <div class=\"article-body\">\n                      <header>\n                        <div class=\"article-meta\">\n                          <span class=\"domain\">{domain}</span>{' '}\n                          {!!publishedAt && <>&middot; </>}\n                          {!!publishedAt && (\n                            <>\n                              <RelativeTime\n                                datetime={publishedAt}\n                                format=\"micro\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        {!!title && (\n                          <h1 class=\"title\" lang={language} dir=\"auto\">\n                            {title}\n                          </h1>\n                        )}\n                      </header>\n                      {!!description && (\n                        <p class=\"description\" lang={language} dir=\"auto\">\n                          {description}\n                        </p>\n                      )}\n                    </div>\n                  </article>\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </>\n    );\n  }, [hashtags, links]);\n\n  return (\n    <Timeline\n      key={instance}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-double-lines\">\n          <b>Trending</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"trending\"\n      instance={instance}\n      emptyText=\"No trending posts.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchTrend}\n      checkForUpdates={checkForUpdates}\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      // allowFilters\n      filterContext=\"public\"\n      timelineStart={TimelineStart}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/trending`);\n                location.hash = `/${newInstance}/trending`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n          {currentInstance !== instance && (\n            <MenuItem\n              onClick={() => {\n                location.hash = `/${currentInstance}/trending`;\n              }}\n            >\n              <Icon icon=\"bus\" />{' '}\n              <small class=\"menu-double-lines\">\n                Go to my instance (<b>{currentInstance}</b>)\n              </small>\n            </MenuItem>\n          )}\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Trending;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Mentions from '../pages/mentions';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport Search from '../pages/search';\nimport Trending from '../pages/trending';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  console.debug('RENDER Columns', shortcuts);\n\n  const components = shortcuts.map((shortcut) => {\n    if (!shortcut) return null;\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n      mentions: Mentions,\n      trending: Trending,\n      search: Search,\n    }[type];\n    if (!Component) return null;\n    // Don't show Search column with no query, for now\n    if (type === 'search' && !params.query) return null;\n    return (\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\n    );\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return (\n    <div\n      id=\"columns\"\n      onContextMenu={(e) => {\n        // If right-click on header, but not links or buttons\n        if (\n          e.target.closest('.deck > header') &&\n          !e.target.closest('a') &&\n          !e.target.closest('button')\n        ) {\n          e.preventDefault();\n          states.showShortcutsSettings = true;\n        }\n      }}\n    >\n      {components}\n    </div>\n  );\n}\n\nexport default Columns;\n","import './notifications-menu.css';\n\nimport { ControlledMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport groupNotifications from '../utils/group-notifications';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsViewMode === 'multi-column' ||\n        (!snapStates.settings.shortcutsViewMode &&\n          snapStates.settings.shortcutsColumnsMode)) &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={<NotificationsLink />}\n        />\n      )}\n    </>\n  );\n}\n\nfunction NotificationsLink() {\n  const snapStates = useSnapshot(states);\n  const notificationLinkRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n  return (\n    <>\n      <Link\n        ref={notificationLinkRef}\n        to=\"/notifications\"\n        class={`button plain notifications-button ${\n          snapStates.notificationsShowNew ? 'has-badge' : ''\n        } ${menuState || ''}`}\n        onClick={(e) => {\n          e.stopPropagation();\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\n            e.preventDefault();\n            setMenuState((state) => (!state ? 'open' : undefined));\n          }\n        }}\n      >\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n      </Link>\n      <NotificationsMenu\n        state={menuState}\n        anchorRef={notificationLinkRef}\n        onClose={() => setMenuState(undefined)}\n      />\n    </>\n  );\n}\n\nconst NOTIFICATIONS_LIMIT = 30;\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n\n  const notificationsIterator = masto.v1.notifications.list({\n    limit: NOTIFICATIONS_LIMIT,\n  });\n\n  async function fetchNotifications() {\n    const allNotifications = await notificationsIterator.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      states.notificationsLast = notifications[0];\n      states.notifications = groupedNotifications;\n\n      // Update last read marker\n      masto.v1.markers\n        .create({\n          notifications: {\n            lastReadId: notifications[0].id,\n          },\n        })\n        .catch(() => {});\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\n  function fetchFollowRequests() {\n    return masto.v1.followRequests.list({\n      limit: 1,\n    });\n  }\n\n  function loadNotifications() {\n    setUIState('loading');\n    (async () => {\n      try {\n        await fetchNotifications();\n        const followRequests = await fetchFollowRequests();\n        setHasFollowRequests(!!followRequests?.length);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (state === 'open') loadNotifications();\n  }, [state]);\n\n  return (\n    <ControlledMenu\n      menuClassName=\"notifications-menu\"\n      state={state}\n      anchorRef={anchorRef}\n      onClose={onClose}\n      portal={{\n        target: document.body,\n      }}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      position=\"anchor\"\n      align=\"center\"\n      boundingBoxPadding=\"8 8 8 8\"\n    >\n      <header>\n        <h2>Notifications</h2>\n      </header>\n      <main>\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\n              .map((notification) => (\n                <Notification\n                  key={notification.id}\n                  instance={instance}\n                  notification={notification}\n                  disableContextMenu\n                />\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <div class=\"ui-state\">\n            <Loader abrupt />\n          </div>\n        ) : (\n          uiState === 'error' && (\n            <div class=\"ui-state\">\n              <p>Unable to fetch notifications.</p>\n              <p>\n                <button type=\"button\" onClick={loadNotifications}>\n                  Try again\n                </button>\n              </p>\n            </div>\n          )\n        )}\n      </main>\n      <footer>\n        <Link to=\"/mentions\" class=\"button plain\">\n          <Icon icon=\"at\" /> <span>Mentions</span>\n        </Link>\n        <Link to=\"/notifications\" class=\"button plain2\">\n          {hasFollowRequests ? (\n            <>\n              <span class=\"tag collapsed\">New</span>{' '}\n              <span>Follow Requests</span>\n            </>\n          ) : (\n            <b>See all</b>\n          )}{' '}\n          <Icon icon=\"arrow-right\" />\n        </Link>\n      </footer>\n    </ControlledMenu>\n  );\n}\n\nexport default memo(Home);\n","// export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\n// export const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\n\nconst statusPostRegexes = [\n  /^\\/@[^@\\/]+\\/(?:statuses|posts)\\/([^\\/]+)/i, // GoToSocial, Takahe\n  /\\/notes\\/([^\\/]+)/i, // Misskey, Firefish\n  /^\\/(?:notice|objects)\\/([a-z0-9-]+)/i, // Pleroma\n  /\\/@[^@\\/]+@?[^\\/]+?\\/([^\\/]+)/i, // Mastodon\n];\n\nexport function getInstanceStatusObject(url) {\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\n  const { hostname, pathname } = new URL(url);\n  // const [, username, domain, id] = pathname.match(statusRegex) || [];\n  for (const regex of statusPostRegexes) {\n    const [, id] = pathname.match(regex) || [];\n    console.log(pathname, regex, id);\n    if (id) {\n      return {\n        instance: hostname,\n        id,\n      };\n    }\n  }\n  return {};\n}\n\nfunction getInstanceStatusURL(url) {\n  const { instance, id } = getInstanceStatusObject(url);\n  if (instance && id) {\n    return `/${instance}/s/${id}`;\n  }\n  return null;\n}\n\nexport default getInstanceStatusURL;\n","import { useLayoutEffect, useState } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport { api } from '../utils/api';\nimport getInstanceStatusURL, {\n  getInstanceStatusObject,\n} from '../utils/get-instance-status-url';\n\nexport default function HttpRoute() {\n  const location = useLocation();\n  const url = location.pathname.replace(/^\\//, '');\n  const statusObject = getInstanceStatusObject(url);\n  // const statusURL = getInstanceStatusURL(url);\n  const statusURL = statusObject?.instance\n    ? `/${statusObject.instance}/s/${statusObject.id}`\n    : null;\n  const [uiState, setUIState] = useState('loading');\n\n  useLayoutEffect(() => {\n    setUIState('loading');\n    (async () => {\n      // Check if status returns 200\n      try {\n        const { instance, id } = statusObject;\n        const { masto } = api({ instance });\n        const status = await masto.v1.statuses.$select(id).fetch();\n        if (status) {\n          window.location.hash = statusURL + '?view=full';\n          return;\n        }\n      } catch (e) {}\n\n      // Fallback to search\n      {\n        const { masto: currentMasto, instance: currentInstance } = api();\n        const result = await currentMasto.v2.search.fetch({\n          q: url,\n          limit: 1,\n          resolve: true,\n        });\n        if (result.statuses.length) {\n          const status = result.statuses[0];\n          window.location.hash = `/${currentInstance}/s/${status.id}?view=full`;\n        } else if (result.accounts.length) {\n          const account = result.accounts[0];\n          window.location.hash = `/${currentInstance}/a/${account.id}`;\n        } else if (statusURL) {\n          // Fallback to original URL, which will probably show error\n          window.location.hash = statusURL + '?view=full';\n        } else {\n          setUIState('error');\n        }\n      }\n    })();\n  }, [statusURL]);\n\n  return (\n    <div class=\"ui-state\" tabIndex=\"-1\">\n      {uiState === 'loading' ? (\n        <>\n          <Loader abrupt />\n          <h2>Resolving…</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      ) : (\n        <>\n          <h2>Unable to resolve URL</h2>\n          <p>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {url}\n            </a>\n          </p>\n        </>\n      )}\n      <hr />\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </div>\n  );\n}\n","import './lists.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  const { masto } = api();\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUIState] = useState('default');\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        lists.sort((a, b) => a.title.localeCompare(b.title));\n        console.log(lists);\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => setShowListAddEditModal(true)}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <>\n              <ul class=\"link-list\">\n                {lists.map((list) => (\n                  <li>\n                    <Link to={`/l/${list.id}`}>\n                      <span>\n                        <Icon icon=\"list\" /> <span>{list.title}</span>\n                      </span>\n                      {/* <button\n                      type=\"button\"\n                      class=\"plain\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setShowListAddEditModal({\n                          list,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" />\n                    </button> */}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n              {lists.length > 1 && (\n                <footer class=\"ui-state\">\n                  <small class=\"insignificant\">\n                    {lists.length} list\n                    {lists.length === 1 ? '' : 's'}\n                  </small>\n                </footer>\n              )}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"__VITE_ASSET__Y_wpqkTO__\"","const { PHANPY_CLIENT_NAME: CLIENT_NAME, PHANPY_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nconst SCOPES = 'read write follow push';\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin + location.pathname,\n    scopes: SCOPES,\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: SCOPES,\n    redirect_uri: location.origin + location.pathname,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin + location.pathname,\n    grant_type: 'authorization_code',\n    code,\n    scope: SCOPES,\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nconst { PHANPY_DEFAULT_INSTANCE: DEFAULT_INSTANCE } = import.meta.env;\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const instance = searchParams.get('instance');\n  const submit = searchParams.get('submit');\n  const [instanceText, setInstanceText] = useState(\n    instance || cachedInstanceURL?.toLowerCase() || '',\n  );\n\n  const [instancesList, setInstancesList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // useEffect(() => {\n  //   if (cachedInstanceURL) {\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n  //   }\n  // }, []);\n\n  const submitInstance = (instanceURL) => {\n    if (!instanceURL) return;\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret, vapid_key } =\n          await registerApplication({\n            instanceURL,\n          });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n          store.session.set('vapidKey', vapid_key);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const cleanInstanceText = instanceText\n    ? instanceText\n        .replace(/^https?:\\/\\//, '') // Remove protocol from instance URL\n        .replace(/\\/+$/, '') // Remove trailing slash\n        .replace(/^@?[^@]+@/, '') // Remove @?acct@\n        .trim()\n    : null;\n  const instanceTextLooksLikeDomain =\n    /[^\\s\\r\\n\\t\\/\\\\]+\\.[^\\s\\r\\n\\t\\/\\\\]+/.test(cleanInstanceText) &&\n    !/[\\s\\/\\\\@]/.test(cleanInstanceText);\n\n  const instancesSuggestions = cleanInstanceText\n    ? instancesList\n        .filter((instance) => instance.includes(instanceText))\n        .sort((a, b) => {\n          // Move text that starts with instanceText to the start\n          const aStartsWith = a\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          const bStartsWith = b\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          if (aStartsWith && !bStartsWith) return -1;\n          if (!aStartsWith && bStartsWith) return 1;\n          return 0;\n        })\n        .slice(0, 10)\n    : [];\n\n  const selectedInstanceText = instanceTextLooksLikeDomain\n    ? cleanInstanceText\n    : instancesSuggestions?.length\n    ? instancesSuggestions[0]\n    : instanceText\n    ? instancesList.find((instance) => instance.includes(instanceText))\n    : null;\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    // const { elements } = e.target;\n    // let instanceURL = elements.instanceURL.value.toLowerCase();\n    // // Remove protocol from instance URL\n    // instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // // Remove @acct@ or acct@ from instance URL\n    // instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    // if (!/\\./.test(instanceURL)) {\n    //   instanceURL = instancesList.find((instance) =>\n    //     instance.includes(instanceURL),\n    //   );\n    // }\n    // submitInstance(instanceURL);\n    submitInstance(selectedInstanceText);\n  };\n\n  if (submit) {\n    useEffect(() => {\n      submitInstance(instance || selectedInstanceText);\n    }, []);\n  }\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>\n          <img src={logo} alt=\"\" width=\"80\" height=\"80\" />\n          <br />\n          Log in\n        </h1>\n        <label>\n          <p>Instance</p>\n          <input\n            value={instanceText}\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            // list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellcheck={false}\n            placeholder=\"instance domain\"\n            onInput={(e) => {\n              setInstanceText(e.target.value);\n            }}\n          />\n          {instancesSuggestions?.length > 0 ? (\n            <ul id=\"instances-suggestions\">\n              {instancesSuggestions.map((instance, i) => (\n                <li>\n                  <button\n                    type=\"button\"\n                    class=\"plain5\"\n                    onClick={() => {\n                      submitInstance(instance);\n                    }}\n                  >\n                    {instance}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rdquo;</div>\n          )}\n          {/* <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist> */}\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <div>\n          <button\n            disabled={\n              uiState === 'loading' || !instanceText || !selectedInstanceText\n            }\n          >\n            {selectedInstanceText\n              ? `Continue with ${selectedInstanceText}`\n              : 'Continue'}\n          </button>{' '}\n        </div>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        {!DEFAULT_INSTANCE && (\n          <p>\n            <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n              Don't have an account? Create one!\n            </a>\n          </p>\n        )}\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import './status.css';\n\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useSearchParams } from 'react-router-dom';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MediaModal from '../components/media-modal';\nimport Menu2 from '../components/menu2';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  getStatus,\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\n\nconst LIMIT = 40;\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\nconst MAX_WEIGHT = 5;\n\nlet cachedRepliesToggle = {};\nlet cachedStatusesMap = {};\nlet scrollPositions = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete scrollPositions[id];\n}\n\nconst scrollIntoViewOptions = {\n  block: 'nearest',\n  inline: 'center',\n  behavior: 'smooth',\n};\n\n// Select all statuses except those inside collapsed details/summary\n// Hat-tip to @AmeliaBR@front-end.social\n// https://front-end.social/@AmeliaBR/109784776146144471\nconst STATUSES_SELECTOR =\n  '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)';\n\nconst STATUS_URL_REGEX = /\\/s\\//i;\n\nfunction StatusPage(params) {\n  const { id } = params;\n  const { masto, instance } = api({ instance: params.instance });\n  const snapStates = useSnapshot(states);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaOnlyParam = searchParams.get('media-only');\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\n  let showMedia = mediaIndex > 0;\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const mediaStatus = getStatus(mediaStatusID, instance);\n  if (mediaStatusID && !mediaStatus) {\n    showMedia = false;\n  }\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\n\n  const sKey = statusKey(id, instance);\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\n  useEffect(() => {\n    if (states.statuses[sKey]) {\n      setHeroStatus(states.statuses[sKey]);\n    }\n  }, [sKey]);\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = states;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    const matchStatusPath =\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\n    if (!pathname || matchStatusPath) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n\n  useEffect(() => {\n    if (!heroStatus && showMedia) {\n      (async () => {\n        try {\n          const status = await masto.v1.statuses.$select(id).fetch();\n          saveStatus(status, instance);\n          setHeroStatus(status);\n        } catch (err) {\n          console.error(err);\n          alert('Unable to load post.');\n          location.hash = closeLink;\n        }\n      })();\n    }\n  }, [showMedia]);\n\n  const mediaAttachments = mediaStatusID\n    ? mediaStatus?.mediaAttachments\n    : heroStatus?.mediaAttachments;\n\n  const handleMediaClose = useCallback(() => {\n    if (\n      !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\n      snapStates.prevLocation\n    ) {\n      history.back();\n    } else {\n      if (showMediaOnly) {\n        location.hash = closeLink;\n      } else {\n        searchParams.delete('media');\n        searchParams.delete('mediaStatusID');\n        setSearchParams(searchParams);\n      }\n    }\n  }, [showMediaOnly, closeLink, snapStates.prevLocation]);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      // carouselRef.current?.focus?.();\n      const $carousel = document.querySelector('.carousel');\n      if ($carousel) {\n        $carousel.focus();\n      }\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [showMediaOnly]);\n\n  return (\n    <div class=\"deck-backdrop\">\n      {showMedia ? (\n        mediaAttachments?.length ? (\n          <MediaModal\n            mediaAttachments={mediaAttachments}\n            statusID={mediaStatusID || id}\n            instance={instance}\n            lang={heroStatus?.language}\n            index={mediaIndex - 1}\n            onClose={handleMediaClose}\n          />\n        ) : (\n          <div class=\"media-modal-container loading\">\n            <Loader abrupt />\n          </div>\n        )\n      ) : (\n        <Link to={closeLink} />\n      )}\n      {!showMediaOnly && (\n        <StatusThread\n          id={id}\n          instance={params.instance}\n          closeLink={closeLink}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction StatusParent(props) {\n  const { linkable, to, onClick, ...restProps } = props;\n  return linkable ? (\n    <Link class=\"status-link\" to={to} onClick={onClick} {...restProps} />\n  ) : (\n    <div class=\"status-focus\" tabIndex={0} {...restProps} />\n  );\n}\n\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const showMedia = parseInt(mediaParam, 10) > 0;\n  const firstLoad = useRef(\n    !states.prevLocation &&\n      (history.length === 1 ||\n        ('navigation' in window && navigation?.entries?.()?.length === 1)),\n  );\n  const [viewMode, setViewMode] = useState(\n    searchParams.get('view') || firstLoad.current ? 'full' : null,\n  );\n  const translate = !!parseInt(searchParams.get('translate'));\n  const { masto, instance } = api({ instance: propInstance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n  const totalDescendants = useRef(0);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const lastInitContextTS = useRef();\n  const initContext = ({ reloadHero } = {}) => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.$select(id).fetch(), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(\n        () => masto.v1.statuses.$select(id).context.fetch(),\n        {\n          retries: 8,\n        },\n      );\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus && !reloadHero) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        totalDescendants.current = descendants?.length || 0;\n\n        const missingStatuses = new Set();\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (\n            status.inReplyToId &&\n            !ancestors.find((s) => s.id === status.inReplyToId)\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n        });\n        const ancestorsIsThread = ancestors.every(\n          (s) => s.account.id === heroStatus.account.id,\n        );\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n\n          if (\n            status.inReplyToId &&\n            !descendants.find((s) => s.id === status.inReplyToId) &&\n            status.inReplyToId !== heroStatus.id\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else if (\n            !status.inReplyToAccountId &&\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\n            status.account.id === heroStatus.account.id\n          ) {\n            // If replying to hero's own statuses, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n        if (missingStatuses.size) {\n          console.error('Missing statuses', [...missingStatuses]);\n        }\n\n        function expandReplies(_replies) {\n          return _replies?.map((_r) => ({\n            id: _r.id,\n            account: _r.account,\n            repliesCount: _r.repliesCount,\n            content: _r.content,\n            weight: calcStatusWeight(_r),\n            replies: expandReplies(_r.__replies),\n          }));\n        }\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            isThread: ancestorsIsThread,\n            accountID: s.account.id,\n            account: s.account,\n            repliesCount: s.repliesCount,\n            weight: calcStatusWeight(s),\n          })),\n          {\n            id,\n            accountID: heroStatus.account.id,\n            weight: calcStatusWeight(heroStatus),\n          },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            account: s.account,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            weight: calcStatusWeight(s),\n            replies: expandReplies(s.__replies),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n\n        // Set limit to hero's index\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\n        if (heroLimit >= limit) {\n          setLimit(heroLimit + 1);\n        }\n\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    lastInitContextTS.current = Date.now();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n\n  const [showRefresh, setShowRefresh] = useState(false);\n  useEffect(() => {\n    let interval = setInterval(() => {\n      const now = Date.now();\n      if (\n        lastInitContextTS.current &&\n        now - lastInitContextTS.current >= 60_000\n      ) {\n        setShowRefresh(true);\n      }\n    }, 60_000); // 1 minute\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext({\n          reloadHero: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n      cachedRepliesToggle = {};\n      statusWeightCache.clear();\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    let text = statusPeek(heroStatus);\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const postInstance = useMemo(() => {\n    if (!heroStatus) return;\n    const { url } = heroStatus;\n    if (!url) return;\n    return new URL(url).hostname;\n  }, [heroStatus]);\n  const postSameInstance = useMemo(() => {\n    if (!postInstance) return;\n    return postInstance === instance;\n  }, [postInstance, instance]);\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(\n    'esc',\n    () => {\n      location.hash = closeLink;\n    },\n    {\n      // If media is open, esc to close media first\n      // Else close the status page\n      enabled: !showMedia,\n      ignoreEventWhen: (e) => {\n        const hasModal = !!document.querySelector('#modal-container > *');\n        return hasModal;\n      },\n    },\n  );\n  // For backspace, will always close both media and status page\n  useHotkeys('backspace', () => {\n    location.hash = closeLink;\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(STATUSES_SELECTOR),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoView(scrollIntoViewOptions);\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoView(scrollIntoViewOptions);\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const [reachTopPost, setReachTopPost] = useState(false);\n  // const { nearReachStart } = useScroll({\n  //   scrollableRef,\n  //   distanceFromStartPx: 16,\n  // });\n\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\n\n  const handleMediaClick = useCallback(\n    (e, i, media, status) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearchParams({\n        media: i + 1,\n        mediaStatusID: status.id,\n      });\n    },\n    [id],\n  );\n\n  const handleStatusLinkClick = useCallback((e, status) => {\n    resetScrollPosition(status.id);\n  }, []);\n\n  useEffect(() => {\n    let timer;\n    if (mediaStatusID && showMedia) {\n      timer = setTimeout(() => {\n        const status = scrollableRef.current?.querySelector(\n          `.status-link[href*=\"/${mediaStatusID}\"]`,\n        );\n        if (status) {\n          status.scrollIntoView(scrollIntoViewOptions);\n        }\n      }, 400); // After CSS transition\n    }\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [mediaStatusID, showMedia]);\n\n  const renderStatus = useCallback(\n    (status, i) => {\n      const {\n        id: statusID,\n        ancestor,\n        isThread,\n        descendant,\n        thread,\n        replies,\n        repliesCount,\n        weight,\n      } = status;\n      const isHero = statusID === id;\n      const isLinkable = isThread || ancestor;\n\n      return (\n        <li\n          key={statusID}\n          ref={isHero ? heroStatusRef : null}\n          class={`${ancestor ? 'ancestor' : ''} ${\n            descendant ? 'descendant' : ''\n          } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n        >\n          {isHero ? (\n            <>\n              <InView\n                threshold={0.1}\n                onChange={(inView) => {\n                  queueMicrotask(() => {\n                    requestAnimationFrame(() => {\n                      setHeroInView(inView);\n                    });\n                  });\n                }}\n                class=\"status-focus\"\n                tabIndex={0}\n              >\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  withinContext\n                  size=\"l\"\n                  enableTranslate\n                  forceTranslate={translate}\n                />\n              </InView>\n              {uiState !== 'loading' && !authenticated ? (\n                <div class=\"post-status-banner\">\n                  <p>\n                    You're not logged in. Interactions (reply, boost, etc) are\n                    not possible.\n                  </p>\n                  <Link to=\"/login\" class=\"button\">\n                    Log in\n                  </Link>\n                </div>\n              ) : (\n                !sameInstance && (\n                  <div class=\"post-status-banner\">\n                    <p>\n                      This post is from another instance (<b>{instance}</b>).\n                      Interactions (reply, boost, etc) are not possible.\n                    </p>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      onClick={() => {\n                        setUIState('loading');\n                        (async () => {\n                          try {\n                            const results = await currentMasto.v2.search.fetch({\n                              q: heroStatus.url,\n                              type: 'statuses',\n                              resolve: true,\n                              limit: 1,\n                            });\n                            if (results.statuses.length) {\n                              const status = results.statuses[0];\n                              location.hash = currentInstance\n                                ? `/${currentInstance}/s/${status.id}`\n                                : `/s/${status.id}`;\n                            } else {\n                              throw new Error('No results');\n                            }\n                          } catch (e) {\n                            setUIState('default');\n                            alert('Error: ' + e);\n                            console.error(e);\n                          }\n                        })();\n                      }}\n                    >\n                      <Icon icon=\"transfer\" /> Switch to my instance to enable\n                      interactions\n                    </button>\n                  </div>\n                )\n              )}\n            </>\n          ) : (\n            <StatusParent\n              linkable={isLinkable}\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n              onClick={() => {\n                resetScrollPosition(statusID);\n              }}\n            >\n              {/* <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`}\n              onClick={() => {\n                resetScrollPosition(statusID);\n              }}\n            > */}\n              {i === 0 && ancestor ? (\n                <InView\n                  threshold={0.5}\n                  onChange={(inView) => {\n                    queueMicrotask(() => {\n                      requestAnimationFrame(() => {\n                        setReachTopPost(inView);\n                      });\n                    });\n                  }}\n                >\n                  <Status\n                    statusID={statusID}\n                    instance={instance}\n                    withinContext\n                    size={thread || ancestor ? 'm' : 's'}\n                    enableTranslate\n                    onMediaClick={handleMediaClick}\n                    onStatusLinkClick={handleStatusLinkClick}\n                  />\n                </InView>\n              ) : (\n                <Status\n                  statusID={statusID}\n                  instance={instance}\n                  withinContext\n                  size={thread || ancestor ? 'm' : 's'}\n                  enableTranslate\n                  onMediaClick={handleMediaClick}\n                  onStatusLinkClick={handleStatusLinkClick}\n                  showActionsBar={!!descendant}\n                />\n              )}\n              {ancestor && repliesCount > 1 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment2\" />{' '}\n                  <span title={repliesCount}>\n                    {shortenNumber(repliesCount)}\n                  </span>\n                </div>\n              )}{' '}\n              {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n            </StatusParent>\n            // </Link>\n          )}\n          {descendant && replies?.length > 0 && (\n            <SubComments\n              instance={instance}\n              replies={replies}\n              hasParentThread={thread}\n              level={1}\n              accWeight={weight}\n              openAll={totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT}\n              parentLink={{\n                to: instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`,\n                onClick: () => resetScrollPosition(statusID),\n              }}\n            />\n          )}\n          {uiState === 'loading' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-loading\">\n                <Loader />\n              </div>\n            )}\n          {uiState === 'error' &&\n            isHero &&\n            !!heroStatus?.repliesCount &&\n            !hasDescendants && (\n              <div class=\"status-error\">\n                Unable to load replies.\n                <br />\n                <button\n                  type=\"button\"\n                  class=\"plain\"\n                  onClick={() => {\n                    states.reloadStatusPage++;\n                  }}\n                >\n                  Try again\n                </button>\n              </div>\n            )}\n        </li>\n      );\n    },\n    [\n      id,\n      instance,\n      uiState,\n      authenticated,\n      sameInstance,\n      translate,\n      handleMediaClick,\n      handleStatusLinkClick,\n      hasDescendants,\n    ],\n  );\n\n  const prevLocationIsStatusPage = useMemo(() => {\n    // Navigation API\n    if ('navigation' in window && navigation?.entries) {\n      const prevEntry = navigation.entries()[navigation.currentEntry.index - 1];\n      if (prevEntry?.url) {\n        return STATUS_URL_REGEX.test(prevEntry.url);\n      }\n    }\n    return STATUS_URL_REGEX.test(states.prevLocation?.pathname);\n  }, [sKey]);\n\n  const moreStatusesKeys = useMemo(() => {\n    if (!showMore) return [];\n    const ids = [];\n    function getIDs(status) {\n      ids.push(status.id);\n      if (status.replies) {\n        status.replies.forEach(getIDs);\n      }\n    }\n    statuses.slice(limit).forEach(getIDs);\n    return ids.map((id) => statusKey(id, instance));\n  }, [showMore, statuses, limit, instance]);\n\n  const statusesList = useMemo(\n    () => statuses.slice(0, limit).map(renderStatus),\n    [statuses, limit, renderStatus],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      ref={scrollableRef}\n      class={`status-deck deck contained ${\n        statuses.length > 1 ? 'padded-bottom' : ''\n      } ${\n        initialPageState.current === 'status' && !firstLoad.current\n          ? 'slide-in'\n          : ''\n      } ${viewMode ? `deck-view-${viewMode}` : ''}`}\n      onAnimationEnd={(e) => {\n        // Fix the bounce effect when switching viewMode\n        // `slide-in` animation kicks in when switching viewMode\n        if (initialPageState.current === 'status') {\n          // e.target.classList.remove('slide-in');\n          initialPageState.current = null;\n        }\n      }}\n    >\n      <header\n        class={`${uiState === 'loading' ? 'loading' : ''}`}\n        onDblClick={(e) => {\n          // reload statuses\n          states.reloadStatusPage++;\n        }}\n      >\n        {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n        <div class=\"header-grid header-grid-2\">\n          <h1>\n            {prevLocationIsStatusPage && (\n              <button\n                type=\"button\"\n                class=\"plain deck-back\"\n                onClick={() => {\n                  history.back();\n                }}\n              >\n                <Icon icon=\"chevron-left\" size=\"xl\" />\n              </button>\n            )}\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\n              <>\n                <span class=\"hero-heading\">\n                  <NameText\n                    account={heroStatus.account}\n                    instance={instance}\n                    showAvatar\n                    short\n                  />{' '}\n                  <span class=\"insignificant\">\n                    &bull;{' '}\n                    <RelativeTime\n                      datetime={heroStatus.createdAt}\n                      format=\"micro\"\n                    />\n                  </span>\n                </span>{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    heroStatusRef.current.scrollIntoView({\n                      behavior: 'smooth',\n                      block: 'start',\n                    });\n                  }}\n                  title=\"Go to main post\"\n                >\n                  <Icon\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                  />\n                </button>\n              </>\n            ) : (\n              <>\n                Post{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    // Scroll to top\n                    e.preventDefault();\n                    e.stopPropagation();\n                    scrollableRef.current.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                  hidden={!ancestors.length || reachTopPost}\n                  title={`${ancestors.length} posts above ‒ Go to top`}\n                >\n                  <Icon icon=\"arrow-up\" />\n                  {ancestors\n                    .filter(\n                      (a, i, arr) =>\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\n                    )\n                    .slice(0, 3)\n                    .map((ancestor) => (\n                      <Avatar\n                        key={ancestor.account.id}\n                        url={ancestor.account.avatar}\n                        alt={ancestor.account.displayName}\n                      />\n                    ))}\n                  {/* <Icon icon=\"comment\" />{' '} */}\n                  {ancestors.length > 3 && (\n                    <>\n                      {' '}\n                      <span class=\"insignificant\">\n                        {shortenNumber(ancestors.length)}\n                      </span>\n                    </>\n                  )}\n                </button>\n              </>\n            )}\n          </h1>\n          <div class=\"header-side\">\n            <button\n              type=\"button\"\n              class=\"plain4 button-switch-view\"\n              style={{\n                display: viewMode === 'full' ? '' : 'none',\n              }}\n              onClick={() => {\n                setViewMode(null);\n                searchParams.delete('media');\n                searchParams.delete('media-only');\n                searchParams.delete('view');\n                setSearchParams(searchParams);\n              }}\n              title=\"Switch to Side Peek view\"\n            >\n              <Icon icon=\"layout4\" size=\"l\" />\n            </button>\n            {showRefresh && (\n              <button\n                type=\"button\"\n                class=\"plain button-refresh\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                  setShowRefresh(false);\n                }}\n              >\n                <Icon icon=\"refresh\" size=\"l\" />\n              </button>\n            )}\n            <Menu2\n              align=\"end\"\n              portal={{\n                // Need this, else the menu click will cause scroll jump\n                target: scrollableRef.current,\n              }}\n              menuButton={\n                <button type=\"button\" class=\"button plain4\">\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                </button>\n              }\n            >\n              <MenuItem\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                <Icon icon=\"refresh\" />\n                <span>Refresh</span>\n              </MenuItem>\n              <MenuItem\n                className=\"menu-switch-view\"\n                onClick={() => {\n                  setViewMode(viewMode === 'full' ? null : 'full');\n                  searchParams.delete('media');\n                  searchParams.delete('media-only');\n                  if (viewMode === 'full') {\n                    searchParams.delete('view');\n                  } else {\n                    searchParams.set('view', 'full');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon\n                  icon={\n                    {\n                      '': 'layout5',\n                      full: 'layout4',\n                    }[viewMode || '']\n                  }\n                />\n                <span>\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\n                </span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  // Click all buttons with class .spoiler but not .spoiling\n                  const buttons = Array.from(\n                    scrollableRef.current.querySelectorAll(\n                      '.spoiler-button:not(.spoiling), .spoiler-media-button:not(.spoiling)',\n                    ),\n                  );\n                  buttons.forEach((button) => {\n                    button.click();\n                  });\n                }}\n              >\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\n              </MenuItem>\n              <MenuDivider />\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\n              <MenuItem\n                disabled={!postInstance || postSameInstance}\n                onClick={() => {\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\n                  if (statusURL) {\n                    location.hash = statusURL;\n                  } else {\n                    alert('Unable to switch');\n                  }\n                }}\n              >\n                <Icon icon=\"transfer\" />\n                <small class=\"menu-double-lines\">\n                  Switch to post's instance\n                  {postInstance ? (\n                    <>\n                      {' '}\n                      (<b>{postInstance}</b>)\n                    </>\n                  ) : (\n                    ''\n                  )}\n                </small>\n              </MenuItem>\n            </Menu2>\n            <Link class=\"button plain deck-close\" to={closeLink}>\n              <Icon icon=\"x\" size=\"xl\" />\n            </Link>\n          </div>\n        </div>\n      </header>\n      {!!statuses.length && heroStatus ? (\n        <ul\n          class={`timeline flat contextual grow ${\n            uiState === 'loading' ? 'loading' : ''\n          }`}\n        >\n          {statusesList}\n          {showMore > 0 && (\n            <li>\n              <button\n                type=\"button\"\n                class=\"plain block show-more\"\n                disabled={uiState === 'loading'}\n                onClick={() => setLimit((l) => l + LIMIT)}\n                style={{ marginBlockEnd: '6em' }}\n                data-state-post-ids={moreStatusesKeys.join(' ')}\n              >\n                <div class=\"ib avatars-bunch\">\n                  {/* show avatars for first 5 statuses */}\n                  {statuses.slice(limit, limit + 5).map((status) => (\n                    <Avatar\n                      key={status.id}\n                      url={status.account.avatarStatic}\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\n                    />\n                  ))}\n                </div>{' '}\n                <div class=\"ib\">\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </div>\n              </button>\n            </li>\n          )}\n        </ul>\n      ) : (\n        <>\n          {uiState === 'loading' && (\n            <ul class=\"timeline flat contextual grow loading\">\n              <li>\n                <Status skeleton size=\"l\" />\n              </li>\n            </ul>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load post\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction SubComments({\n  replies,\n  instance,\n  hasParentThread,\n  level,\n  accWeight,\n  openAll,\n  parentLink,\n}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const totalWeight = useMemo(() => {\n    return replies?.reduce((acc, reply) => {\n      return acc + reply?.weight;\n    }, accWeight);\n  }, [accWeight, replies?.length]);\n\n  let open = false;\n  if (openAll) {\n    open = true;\n  } else if (totalWeight <= MAX_WEIGHT) {\n    open = true;\n  } else if (!hasParentThread && totalComments === 1) {\n    const shortReply = calcStatusWeight(replies[0]) < 2;\n    if (shortReply) open = true;\n  }\n  const openBefore = cachedRepliesToggle[replies[0].id];\n\n  const handleMediaClick = useCallback((e, i, media, status) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setSearchParams({\n      media: i + 1,\n      mediaStatusID: status.id,\n    });\n  }, []);\n\n  const detailsRef = useRef();\n  useLayoutEffect(() => {\n    function handleScroll(e) {\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\n    }\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\n      passive: true,\n    });\n    return () => {\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <details\n      ref={detailsRef}\n      class=\"replies\"\n      open={openBefore || open}\n      onToggle={(e) => {\n        const { open } = e.target;\n        // use first reply as ID\n        cachedRepliesToggle[replies[0].id] = open;\n      }}\n      style={{\n        '--comments-level': level,\n      }}\n      data-comments-level={level}\n      data-comments-level-overflow={level > 4}\n    >\n      <summary class=\"replies-summary\" hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n              squircle={a?.bot}\n            />\n          ))}\n        </span>\n        <span class=\"replies-counts\">\n          <b>\n            <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n            repl\n            {replies.length === 1 ? 'y' : 'ies'}\n          </b>\n          {!sameCount && totalComments > 1 && (\n            <>\n              {' '}\n              &middot;{' '}\n              <span>\n                <span title={totalComments}>\n                  {shortenNumber(totalComments)}\n                </span>{' '}\n                comment\n                {totalComments === 1 ? '' : 's'}\n              </span>\n            </>\n          )}\n        </span>\n        <Icon icon=\"chevron-down\" class=\"replies-summary-chevron\" />\n        {!!parentLink && (\n          <Link\n            class=\"replies-parent-link\"\n            to={parentLink.to}\n            onClick={parentLink.onClick}\n            title=\"View post with its replies\"\n          >\n            &raquo;\n          </Link>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            {/* <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            > */}\n            <div class=\"status-focus\" tabIndex={0}>\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n                enableTranslate\n                onMediaClick={handleMediaClick}\n                showActionsBar\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment2\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n            </div>\n            {/* </Link> */}\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                replies={r.replies}\n                level={level + 1}\n                accWeight={!open ? r.weight : totalWeight}\n                openAll={openAll}\n                parentLink={{\n                  to: instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`,\n                  onClick: () => {\n                    resetScrollPosition(r.id);\n                  },\n                }}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nconst MEDIA_VIRTUAL_LENGTH = 140;\nconst POLL_VIRTUAL_LENGTH = 35;\nconst CARD_VIRTUAL_LENGTH = 70;\nconst WEIGHT_SEGMENT = 140;\nconst statusWeightCache = new Map();\nfunction calcStatusWeight(status) {\n  const cachedWeight = statusWeightCache.get(status.id);\n  if (cachedWeight) return cachedWeight;\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\n  const length = htmlContentLength(spoilerText + content);\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\n  const cardLength =\n    card && (mediaAttachments?.length || poll?.options?.length)\n      ? 0\n      : CARD_VIRTUAL_LENGTH;\n  const totalLength = length + mediaLength + pollLength + cardLength;\n  const weight = totalLength / WEIGHT_SEGMENT;\n  statusWeightCache.set(status.id, weight);\n  return weight;\n}\n\nexport default memo(StatusPage);\n","import { useParams } from 'react-router-dom';\n\nimport Status from './status';\n\nexport default function StatusRoute() {\n  const params = useParams();\n  const { id, instance } = params;\n  return <Status id={id} instance={instance} />;\n}\n","export default \"__VITE_ASSET__W5CngKHO__\"","export default \"__VITE_ASSET__vmqRZ5q5__\"","export default \"__VITE_ASSET__DFAo1Udm__\"","export default \"__VITE_ASSET__D2_o1n6___\"","export default \"__VITE_ASSET__ySLnBMku__\"","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20xml:space='preserve'%20fill-rule='evenodd'%20stroke-linejoin='round'%20stroke-miterlimit='2'%20clip-rule='evenodd'%20viewBox='0%200%20102%2028'%3e%3cpath%20fill='none'%20d='M0%200h101.5v27.5H0z'/%3e%3cg%20fill-rule='nonzero'%3e%3cpath%20fill='url(%23a)'%20d='M2.32%2021.85c1.4%200%202.21-.85%202.21-2.3v-4.64H8.5c4.45%200%207.54-2.9%207.54-7.24%200-4.35-2.98-7.24-7.32-7.24h-6.4C.93.43.11%201.28.11%202.73v16.82c0%201.45.82%202.3%202.21%202.3Zm2.21-10.4V3.94h3c2.54%200%204%201.34%204%203.75s-1.47%203.76-4%203.76h-3Z'/%3e%3cpath%20fill='url(%23b)'%20d='M20.52%2021.88c1.25%200%202.13-.76%202.13-2.23v-7.04c0-2.07%201.2-3.49%203.21-3.49%201.95%200%202.95%201.23%202.95%203.25v7.28c0%201.47.89%202.23%202.13%202.23%201.26%200%202.14-.76%202.14-2.23v-8.18c0-3.64-1.99-5.9-5.48-5.9-2.38%200-4.1%201.12-4.93%203.1h-.09V2.3c0-1.38-.78-2.2-2.1-2.2-1.31%200-2.1.82-2.1%202.2v17.34c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23c)'%20d='M40.45%2021.82c1.96%200%203.93-.98%204.8-2.65h.1v.8c.08%201.27.89%201.91%202.05%201.91%201.21%200%202.08-.73%202.08-2.15v-8.95c0-3.17-2.63-5.25-6.65-5.25-3.26%200-5.78%201.16-6.5%203.04-.15.32-.23.63-.23.96%200%20.97.75%201.64%201.79%201.64.69%200%201.23-.26%201.7-.79.95-1.23%201.74-1.65%203.04-1.65%201.62%200%202.64.85%202.64%202.31v1.04l-3.95.24c-3.93.23-6.13%201.88-6.13%204.74%200%202.83%202.27%204.76%205.26%204.76Zm1.4-3.09c-1.43%200-2.4-.73-2.4-1.9%200-1.12.91-1.83%202.51-1.95l3.31-.2v1.14c0%201.7-1.54%202.91-3.41%202.91Z'/%3e%3cpath%20fill='url(%23d)'%20d='M54.37%2021.88c1.26%200%202.14-.76%202.14-2.23v-7.09c0-2.03%201.21-3.44%203.13-3.44s2.89%201.17%202.89%203.22v7.31c0%201.47.88%202.23%202.14%202.23%201.24%200%202.13-.76%202.13-2.23v-8.2c0-3.68-1.96-5.87-5.45-5.87-2.41%200-4%201.07-4.83%203.01h-.09v-.87c0-1.35-.85-2.17-2.14-2.17-1.28%200-2.06.82-2.06%202.15v11.95c0%201.47.9%202.23%202.14%202.23Z'/%3e%3cpath%20fill='url(%23e)'%20d='M71.65%2027.17c1.26%200%202.14-.76%202.14-2.23v-6h.09a5.15%205.15%200%200%200%204.88%202.88c3.92%200%206.35-3.05%206.35-8.1%200-5.07-2.44-8.1-6.43-8.1a5.12%205.12%200%200%200-4.86%202.99h-.09v-.85c0-1.45-.88-2.21-2.1-2.21-1.24%200-2.11.76-2.11%202.2v17.2c0%201.46.89%202.22%202.13%202.22Zm5.6-8.8c-2.1%200-3.47-1.8-3.47-4.65%200-2.81%201.37-4.67%203.47-4.67%202.14%200%203.49%201.83%203.49%204.67%200%202.86-1.35%204.66-3.5%204.66Z'/%3e%3cpath%20fill='url(%23f)'%20d='M89.61%2027.39c3.44%200%205.26-1.5%206.73-5.55l4.81-13.1a4%204%200%200%200%20.24-1.26c0-1.13-.85-1.93-2.08-1.93-1.1%200-1.71.51-2.07%201.7l-3.4%2010.9h-.08L90.35%207.28c-.36-1.25-.94-1.73-2.07-1.73-1.26%200-2.21.83-2.21%201.99%200%20.35.09.82.25%201.26l5%2013.21-.21.56c-.52%201.1-1.32%201.42-2.07%201.42l-.75-.01c-.96%200-1.56.54-1.56%201.4%200%201.29%201%202%202.88%202Z'/%3e%3c/g%3e%3cdefs%3e%3cradialGradient%20id='a'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='b'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='c'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='d'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='e'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3cradialGradient%20id='f'%20cx='0'%20cy='0'%20r='1'%20gradientTransform='rotate(28.51%20.06%20.22)%20scale(57.6252)'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20offset='0'%20stop-color='%23a4bff7'/%3e%3cstop%20offset='1'%20stop-color='%236081e6'/%3e%3c/radialGradient%3e%3c/defs%3e%3c/svg%3e\"","import './welcome.css';\n\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\nimport logoText from '../assets/logo-text.svg';\nimport logo from '../assets/logo.svg';\n\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst {\n  PHANPY_DEFAULT_INSTANCE: DEFAULT_INSTANCE,\n  PHANPY_WEBSITE: WEBSITE,\n  PHANPY_PRIVACY_POLICY_URL: PRIVACY_POLICY_URL,\n  PHANPY_DEFAULT_INSTANCE_REGISTRATION_URL: DEFAULT_INSTANCE_REGISTRATION_URL,\n} = import.meta.env;\nconst appSite = WEBSITE\n  ? WEBSITE.replace(/https?:\\/\\//g, '').replace(/\\/$/, '')\n  : null;\nconst appVersion = __BUILD_TIME__\n  ? `${__BUILD_TIME__.slice(0, 10).replace(/-/g, '.')}${\n      __COMMIT_HASH__ ? `.${__COMMIT_HASH__}` : ''\n    }`\n  : null;\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <div class=\"hero-container\">\n        <div class=\"hero-content\">\n          <h1>\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"160\"\n              height=\"160\"\n              style={{\n                aspectRatio: '1/1',\n                marginBlockEnd: -16,\n              }}\n            />\n            <img src={logoText} alt=\"Phanpy\" width=\"200\" />\n          </h1>\n          <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\n          <p>\n            <Link\n              to={\n                DEFAULT_INSTANCE\n                  ? `/login?instance=${DEFAULT_INSTANCE}&submit=1`\n                  : '/login'\n              }\n              class=\"button\"\n            >\n              {DEFAULT_INSTANCE ? 'Log in' : 'Log in with Mastodon'}\n            </Link>\n          </p>\n          {DEFAULT_INSTANCE && DEFAULT_INSTANCE_REGISTRATION_URL && (\n            <p>\n              <a href={DEFAULT_INSTANCE_REGISTRATION_URL} class=\"button plain5\">\n                Sign up\n              </a>\n            </p>\n          )}\n          {!DEFAULT_INSTANCE && (\n            <p class=\"insignificant\">\n              <small>\n                Connect your existing Mastodon/Fediverse account.\n                <br />\n                Your credentials are not stored on this server.\n              </small>\n            </p>\n          )}\n        </div>\n        {(appSite || appVersion) && (\n          <p class=\"app-site-version\">\n            <small>\n              {appSite} {appVersion}\n            </small>\n          </p>\n        )}\n        <p>\n          <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n            Built\n          </a>{' '}\n          by{' '}\n          <a\n            href=\"https://mastodon.social/@cheeaun\"\n            target=\"_blank\"\n            onClick={(e) => {\n              e.preventDefault();\n              states.showAccount = 'cheeaun@mastodon.social';\n            }}\n          >\n            @cheeaun\n          </a>\n          .{' '}\n          <a href={PRIVACY_POLICY_URL} target=\"_blank\">\n            Privacy Policy\n          </a>\n          .\n        </p>\n      </div>\n      <div id=\"why-container\">\n        <div class=\"sections\">\n          <section>\n            <img\n              src={boostsCarouselUrl}\n              alt=\"Screenshot of Boosts Carousel\"\n              loading=\"lazy\"\n            />\n            <h4>Boosts Carousel</h4>\n            <p>\n              Visually separate original posts and re-shared posts (boosted\n              posts).\n            </p>\n          </section>\n          <section>\n            <img\n              src={nestedCommentsThreadUrl}\n              alt=\"Screenshot of nested comments thread\"\n              loading=\"lazy\"\n            />\n            <h4>Nested comments thread</h4>\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\n          </section>\n          <section>\n            <img\n              src={groupedNotificationsUrl}\n              alt=\"Screenshot of grouped notifications\"\n              loading=\"lazy\"\n            />\n            <h4>Grouped notifications</h4>\n            <p>\n              Similar notifications are grouped and collapsed to reduce clutter.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiColumnUrl}\n              alt=\"Screenshot of multi-column UI\"\n              loading=\"lazy\"\n            />\n            <h4>Single or multi-column</h4>\n            <p>\n              By default, single column for zen-mode seekers. Configurable\n              multi-column for power users.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiHashtagTimelineUrl}\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\n              loading=\"lazy\"\n            />\n            <h4>Multi-hashtag timeline</h4>\n            <p>Up to 5 hashtags combined into a single timeline.</p>\n          </section>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default Welcome;\n","// Replace alert() with toastify-js\nimport Toastify from 'toastify-js';\n\nconst nativeAlert = window.alert;\nif (!window.__nativeAlert) window.__nativeAlert = nativeAlert;\n\nwindow.alert = function (message) {\n  console.debug(\n    'ALERT: This is a custom alert() function. Native alert() is still available as window.__nativeAlert()',\n  );\n  // If Error object, show the message\n  if (message instanceof Error && message?.message) {\n    message = message.message;\n  }\n  // If not string, stringify it\n  if (typeof message !== 'string') {\n    message = JSON.stringify(message);\n  }\n\n  const toast = Toastify({\n    text: message,\n    className: 'alert',\n    gravity: 'top',\n    position: 'center',\n    duration: 10_000,\n    offset: {\n      y: 48,\n    },\n    onClick: () => {\n      toast.hideToast();\n    },\n  });\n  toast.showToast();\n};\n","import './app.css';\n\nimport debounce from 'just-debounce-it';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { matchPath, Route, Routes, useLocation } from 'react-router-dom';\nimport 'swiped-events';\nimport { subscribe } from 'valtio';\n\nimport BackgroundService from './components/background-service';\nimport ComposeButton from './components/compose-button';\nimport { ICONS } from './components/ICONS';\nimport KeyboardShortcutsHelp from './components/keyboard-shortcuts-help';\nimport Loader from './components/loader';\nimport Modals from './components/modals';\nimport NotificationService from './components/notification-service';\nimport SearchCommand from './components/search-command';\nimport Shortcuts from './components/shortcuts';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Bookmarks from './pages/bookmarks';\nimport Favourites from './pages/favourites';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HttpRoute from './pages/http-route';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Mentions from './pages/mentions';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport StatusRoute from './pages/status-route';\nimport Trending from './pages/trending';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport focusDeck from './utils/focus-deck';\nimport states, { initStates, statusKey } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount } from './utils/store-utils';\nimport './utils/toast-alert';\n\nwindow.__STATES__ = states;\nwindow.__STATES_STATS__ = () => {\n  const keys = [\n    'statuses',\n    'accounts',\n    'spoilers',\n    'unfurledLinks',\n    'statusQuotes',\n  ];\n  const counts = {};\n  keys.forEach((key) => {\n    counts[key] = Object.keys(states[key]).length;\n  });\n  console.warn('STATE stats', counts);\n\n  const { statuses } = states;\n  const unmountedPosts = [];\n  for (const key in statuses) {\n    const $post = document.querySelector(\n      `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\n    );\n    if (!$post) {\n      unmountedPosts.push(key);\n    }\n  }\n  console.warn('Unmounted posts', unmountedPosts.length, unmountedPosts);\n};\n\n// Experimental \"garbage collection\" for states\n// Every 15 minutes\n// Only posts for now\nsetInterval(() => {\n  if (!window.__IDLE__) return;\n  const { statuses, unfurledLinks, notifications } = states;\n  let keysCount = 0;\n  const { instance } = api();\n  for (const key in statuses) {\n    if (!window.__IDLE__) break;\n    try {\n      const $post = document.querySelector(\n        `[data-state-post-id~=\"${key}\"], [data-state-post-ids~=\"${key}\"]`,\n      );\n      const postInNotifications = notifications.some(\n        (n) => key === statusKey(n.status?.id, instance),\n      );\n      if (!$post && !postInNotifications) {\n        delete states.statuses[key];\n        delete states.statusQuotes[key];\n        for (const link in unfurledLinks) {\n          const unfurled = unfurledLinks[link];\n          const sKey = statusKey(unfurled.id, unfurled.instance);\n          if (sKey === key) {\n            delete states.unfurledLinks[link];\n            break;\n          }\n        }\n        keysCount++;\n      }\n    } catch (e) {}\n  }\n  if (keysCount) {\n    console.info(`GC: Removed ${keysCount} keys`);\n  }\n}, 15 * 60 * 1000);\n\n// Preload icons\n// There's probably a better way to do this\n// Related: https://github.com/vitejs/vite/issues/10600\nsetTimeout(() => {\n  for (const icon in ICONS) {\n    queueMicrotask(() => {\n      if (Array.isArray(ICONS[icon])) {\n        ICONS[icon][0]?.();\n      } else {\n        ICONS[icon]?.();\n      }\n    });\n  }\n}, 5000);\n\n(() => {\n  window.__IDLE__ = true;\n  const nonIdleEvents = [\n    'mousemove',\n    'mousedown',\n    'resize',\n    'keydown',\n    'touchstart',\n    'pointerdown',\n    'pointermove',\n    'wheel',\n  ];\n  const setIdle = () => {\n    window.__IDLE__ = true;\n  };\n  const IDLE_TIME = 3_000; // 3 seconds\n  const debouncedSetIdle = debounce(setIdle, IDLE_TIME);\n  const onNonIdle = () => {\n    window.__IDLE__ = false;\n    debouncedSetIdle();\n  };\n  nonIdleEvents.forEach((event) => {\n    window.addEventListener(event, onNonIdle, {\n      passive: true,\n      capture: true,\n    });\n  });\n  window.addEventListener('blur', setIdle, {\n    passive: true,\n  });\n  // When cursor leaves the window, set idle\n  document.documentElement.addEventListener(\n    'mouseleave',\n    (e) => {\n      if (!e.relatedTarget && !e.toElement) {\n        setIdle();\n      }\n    },\n    {\n      passive: true,\n    },\n  );\n  // document.addEventListener(\n  //   'visibilitychange',\n  //   () => {\n  //     if (document.visibilityState === 'visible') {\n  //       onNonIdle();\n  //     }\n  //   },\n  //   {\n  //     passive: true,\n  //   },\n  // );\n})();\n\n// Possible fix for iOS PWA theme-color bug\n// It changes when loading web pages in \"webview\"\nconst isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\nif (isIOS) {\n  document.addEventListener('visibilitychange', () => {\n    if (document.visibilityState === 'visible') {\n      const theme = store.local.get('theme');\n      let $meta;\n      if (theme) {\n        // Get current meta\n        $meta = document.querySelector(\n          `meta[name=\"theme-color\"][data-theme-setting=\"manual\"]`,\n        );\n        if ($meta) {\n          const color = $meta.content;\n          const tempColor =\n            theme === 'light'\n              ? $meta.dataset.themeLightColorTemp\n              : $meta.dataset.themeDarkColorTemp;\n          $meta.content = tempColor || '';\n          setTimeout(() => {\n            $meta.content = color;\n          }, 10);\n        }\n      } else {\n        // Get current color scheme\n        const colorScheme = window.matchMedia('(prefers-color-scheme: dark)')\n          .matches\n          ? 'dark'\n          : 'light';\n        // Get current theme-color\n        $meta = document.querySelector(\n          `meta[name=\"theme-color\"][media*=\"${colorScheme}\"]`,\n        );\n        if ($meta) {\n          const color = $meta.dataset.content;\n          const tempColor = $meta.dataset.contentTemp;\n          $meta.content = tempColor || '';\n          setTimeout(() => {\n            $meta.content = color;\n          }, 10);\n        }\n      }\n    }\n  });\n}\n\n{\n  const theme = store.local.get('theme');\n  // If there's a theme, it's NOT auto\n  if (theme) {\n    // dark | light\n    document.documentElement.classList.add(`is-${theme}`);\n    document\n      .querySelector('meta[name=\"color-scheme\"]')\n      .setAttribute('content', theme || 'dark light');\n\n    // Enable manual theme <meta>\n    const $manualMeta = document.querySelector(\n      'meta[data-theme-setting=\"manual\"]',\n    );\n    if ($manualMeta) {\n      $manualMeta.name = 'theme-color';\n      $manualMeta.content =\n        theme === 'light'\n          ? $manualMeta.dataset.themeLightColor\n          : $manualMeta.dataset.themeDarkColor;\n    }\n    // Disable auto theme <meta>s\n    const $autoMetas = document.querySelectorAll(\n      'meta[data-theme-setting=\"auto\"]',\n    );\n    $autoMetas.forEach((m) => {\n      m.name = '';\n    });\n  }\n  const textSize = store.local.get('textSize');\n  if (textSize) {\n    document.documentElement.style.setProperty('--text-size', `${textSize}px`);\n  }\n}\n\nsubscribe(states, (changes) => {\n  for (const [action, path, value, prevValue] of changes) {\n    // Change #app dataset based on settings.shortcutsViewMode\n    if (path.join('.') === 'settings.shortcutsViewMode') {\n      const $app = document.getElementById('app');\n      if ($app) {\n        $app.dataset.shortcutsViewMode = states.shortcuts?.length ? value : '';\n      }\n    }\n\n    // Add/Remove cloak class to body\n    if (path.join('.') === 'settings.cloakMode') {\n      const $body = document.body;\n      $body.classList.toggle('cloak', value);\n    }\n  }\n});\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = decodeURIComponent(\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\n    );\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      window.history.replaceState(\n        {},\n        document.title,\n        window.location.pathname || '/',\n      );\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n      const vapidKey = store.session.get('vapidKey');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const client = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(client, instanceURL),\n          initAccount(client, instanceURL, accessToken, vapidKey),\n        ]);\n        initStates();\n        initPreferences(client);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      window.__IGNORE_GET_ACCOUNT_ERROR__ = true;\n      const account = getCurrentAccount();\n      if (account) {\n        store.session.set('currentAccount', account.info.id);\n        const { client } = api({ account });\n        const { instance } = client;\n        // console.log('masto', masto);\n        initStates();\n        initPreferences(client);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(client, instance);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n  // useLayoutEffect(() => {\n  //   states.currentLocation = location.pathname;\n  // }, [location.pathname]);\n\n  useEffect(focusDeck, [location, isLoggedIn]);\n\n  if (/\\/https?:/.test(location.pathname)) {\n    return <HttpRoute />;\n  }\n\n  return (\n    <>\n      <PrimaryRoutes isLoggedIn={isLoggedIn} loading={uiState === 'loading'} />\n      <SecondaryRoutes isLoggedIn={isLoggedIn} />\n      {uiState === 'default' && (\n        <Routes>\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\n        </Routes>\n      )}\n      {isLoggedIn && <ComposeButton />}\n      {isLoggedIn && <Shortcuts />}\n      <Modals />\n      {isLoggedIn && <NotificationService />}\n      <BackgroundService isLoggedIn={isLoggedIn} />\n      {uiState !== 'loading' && <SearchCommand onClose={focusDeck} />}\n      <KeyboardShortcutsHelp />\n    </>\n  );\n}\n\nfunction PrimaryRoutes({ isLoggedIn, loading }) {\n  const location = useLocation();\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/.test(pathname);\n  }, [location]);\n\n  return (\n    <Routes location={nonRootLocation || location}>\n      <Route\n        path=\"/\"\n        element={\n          isLoggedIn ? (\n            <Home />\n          ) : loading ? (\n            <Loader id=\"loader-root\" />\n          ) : (\n            <Welcome />\n          )\n        }\n      />\n      <Route path=\"/login\" element={<Login />} />\n      <Route path=\"/welcome\" element={<Welcome />} />\n    </Routes>\n  );\n}\n\nfunction getPrevLocation() {\n  return states.prevLocation || null;\n}\nfunction SecondaryRoutes({ isLoggedIn }) {\n  // const snapStates = useSnapshot(states);\n  const location = useLocation();\n  // const prevLocation = snapStates.prevLocation;\n  const backgroundLocation = useRef(getPrevLocation());\n\n  const isModalPage = useMemo(() => {\n    return (\n      matchPath('/:instance/s/:id', location.pathname) ||\n      matchPath('/s/:id', location.pathname)\n    );\n  }, [location.pathname, matchPath]);\n  if (isModalPage) {\n    if (!backgroundLocation.current)\n      backgroundLocation.current = getPrevLocation();\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  return (\n    <Routes location={backgroundLocation.current || location}>\n      {isLoggedIn && (\n        <>\n          <Route path=\"/notifications\" element={<Notifications />} />\n          <Route path=\"/mentions\" element={<Mentions />} />\n          <Route path=\"/following\" element={<Following />} />\n          <Route path=\"/b\" element={<Bookmarks />} />\n          <Route path=\"/f\" element={<Favourites />} />\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n          <Route path=\"/ft\" element={<FollowedHashtags />} />\n        </>\n      )}\n      <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n      <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n      <Route path=\"/:instance?/p\">\n        <Route index element={<Public />} />\n        <Route path=\"l\" element={<Public local />} />\n      </Route>\n      <Route path=\"/:instance?/trending\" element={<Trending />} />\n      <Route path=\"/:instance?/search\" element={<Search />} />\n      {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n    </Routes>\n  );\n}\n\nexport { App };\n","import './index.css';\n\nimport './cloak-mode.css';\n\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\n// AbortSignal.timeout polyfill\n// Temporary fix from https://github.com/mo/abortcontroller-polyfill/issues/73#issuecomment-1541180943\n// Incorrect implementation, but should be good enough for now\nif ('AbortSignal' in window) {\n  AbortSignal.timeout =\n    AbortSignal.timeout ||\n    ((duration) => {\n      const controller = new AbortController();\n      setTimeout(() => controller.abort(), duration);\n      return controller.signal;\n    });\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n\nwindow.__CLOAK__ = () => {\n  document.body.classList.toggle('cloak');\n};\n"],"names":["usePageVisibility","fn","deps","savedCallback","useRef","useEffect","current","handleVisibilityChange","hidden","document","visibilityState","console","STREAMING_TIMEOUT","POLL_INTERVAL","BackgroundService","memo","isLoggedIn","visible","setVisible","useState","checkLatestNotification","masto","instance","skipCheckMarkers","states","notificationsLast","notificationsIterator","v1","notifications","list","limit","sinceId","id","value","next","length","notificationsShowNew","lastReadId","markers","fetch","timeline","sub","pollNotifications","streaming","api","hasStreaming","setTimeout","user","notification","subscribe","log","entry","_a","checkForUpdates","clearTimeout","clearInterval","info","visible2","lastCheckDate","useHotkeys","currentCloakMode","Date","diff","ComposeButton","handleButton","e","shiftKey","openCompose","showCompose","ignoreEventWhen","querySelector","_jsx","type","onClick","children","Icon","icon","size","alt","KeyboardShortcutsHelp","snapStates","useSnapshot","onClose","showKeyboardShortcutsHelp","hasModal","Modal","class","tabindex","action","keys","_jsxs","_Fragment","className","map","Accounts","accounts","store","local","getJSON","currentAccount","session","get","moreThanOneAccount","_","reload","useReducer","x","accountsListParent","useAutoAnimate","tabIndex","ref","account","i","isCurrent","isDefault","Avatar","url","avatarStatic","onDblClick","$select","NameText","test","showAcct","set","Menu2","align","menuButton","title","MenuItem","MenuDivider","disabled","splice","MenuConfirm","subMenu","confirmLabel","menuItemClassName","href","Link","to","logo","createBackendPushSubscription","subscription","push","create","fetchBackendPushSubscription","updateBackendPushSubscription","update","removeBackendPushSubscription","remove","isPushSupported","navigator","window","getRegistration","serviceWorker","getSubscription","registration","pushManager","undefined","urlBase64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","initSubscription","backendSubscription","err","message","sameEndpoint","vapidKey","sameKey","getCurrentAccount","applicationServerKey","vapidKeyStr","applicationServerKeyStr","updateSubscription","data","policy","removeSubscription","userVisibleOnly","define_import_meta_env_default","focusDeck","timer","columns","getElementById","modals","querySelectorAll","modal","modalFocusElement","focus","backDrop","pages","page","useLocationChange","location","useLocation","currentLocationRef","pathname","ListAddEdit","uiState","setUIState","editMode","nameFieldRef","repliesPolicyFieldRef","exclusiveFieldRef","repliesPolicy","checked","exclusive","supportsExclusive","supports","onSubmit","preventDefault","formData","FormData","target","listResult","replies_policy","alert","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","LIMIT","ACCOUNT_INFO_MAX_AGE","fetchFamiliarFollowers","currentID","familiarFollowers","memFetchFamiliarFollowers","pmem","maxAge","fetchPostingStats","accountID","fetchStatuses","statuses","total","originals","replies","status","stats","boosts","memFetchPostingStats","fetchAccount","standalone","authenticated","currentMasto","currentInstance","isString","useMemo","setInfo","sameCurrentInstance","info2","acct","avatar","bot","createdAt","displayName","emojis","fields","group","lastStatusAt","locked","note","statusesCount","username","memorial","moved","roles","header","headerStatic","headerIsAvatar","isSelf","infoHasEssentials","account2","updated","forEach","headerCornerColors","setHeaderCornerColors","followersIterator","domain","fetchFollowers","firstLoad","familiarFollowersCache","results","familiarFollowers2","newValue","familiar","followingIterator","LinkOrDiv","accountLink","postingStats","setPostingStats","renderFamiliarFollowers","setFamiliarFollowers","postingStatsUIState","setPostingStatsUIState","hasPostingStats","followers","renderPostingStats","onRelationshipChange","AccountBlock","src","canvas","add","pixelDimension","r","createElement","ctx","g","b","width","height","drawImage","colors","getImageData","a","dataLength","color","lightenRGB","rgbColors","avatarSize","external","role","accountInstance","handleContentLinks","enhanceContent","verifiedAt","__html","EmojiText","name","follower","heading","fetchAccounts","excludeRelationshipAttrs","shortenNumber","followersCount","fetchFollowing","followingCount","niceDateTime","FAMILIAR_FOLLOWERS_LIMIT","currentAuthenticated","relationship","privateNote","following","showingReblogs","notifying","followedBy","blocking","blockedBy","muting","mutingNotifications","requested","domainBlocking","endorsed","currentInfo","setIsSelf","q","fetchRelationships","relationships","setRelationshipUIState","relationship2","updateAccount","setRelationship","loading","relationshipUIState","showTranslatedBio","setShowPrivateNoteModal","showAddRemoveLists","showPrivateNoteModal","dir","setShowTranslatedBio","setShowAddRemoveLists","showToast","clipboard","share","newRelationship","openTrigger","duration","label","counter","Loader","confirm","AddRemoveListsSheet","PrivateNoteSheet","luminence","alpha","urlObj","host","path","TranslatedBioSheet","fieldsText","Math","getHTMLText","text","lists","setLists","listsContainingAccount","setListsContainingAccount","c","style","listsContainingAccount2","lists2","reloadCount","showListAddEditModal","setShowListAddEditModal","sort","l","inList","accountIds","result","abrupt","textareaRef","initialNote","e2","trim","AccountSheet","propInstance","AccountInfo","lookup","skip_webfinger","v2","search","resolve","accountURL","URL","hostname","Drafts","drafts","setDrafts","db","ns","getCurrentAccountNS","ownKeys","filter","key","startsWith","getMany","updatedAt","getTime","hasDrafts","draft","draftStatus","replyTo","updatedAtDate","replyToStatus","MiniDraft","poll","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","EmbedModal","html","rel","dangerouslySetInnerHTML","relationshipsMap","uniqueAccountIds","reduce","acc","includes","GenericAccounts","isCurrentInstance","setAccounts","showMore","setShowMore","showGenericAccounts","staticAccounts","showReactions","setRelationshipsMap","loadRelationships","loadAccounts","done","Array","isArray","theAccount","find","j","_types","prev","newAccounts","reloadGenericAccounts","_b","reblog","favourite","showStats","InView","MediaAltModal","lang","forceTranslate","setForceTranslate","targetLanguage","getTranslateTargetLanguage","contentTranslationHideLanguages","settings","differentLanguage","localeMatch","supportsTTS","speak","whiteSpace","textWrap","TranslationBlock","sourceLanguage","clamp","min","max","gammaToLinear","pow","linearToGamma","rgb2oklab","m","s","cbrt","oklab2rgb","L","round","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","MAX_FETCH","fetchFollowedTags","iterator","followedTags","tags","fetchCount","localeCompare","MAX_AGE","getFollowedTags","fauxDiv","extractTagsFromStatus","content","hashtagLinks","AsyncText","setText","Promise","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","placeholder","notRequired","pattern","fetchListTitle","fetchAccountTitle","SHORTCUTS_META","index","subtitle","query","encodeURIComponent","excludeViewMode","split","join","ShortcutsSettings","shortcuts","showForm","setShowForm","showImportExport","setShowImportExport","shortcutsListParent","fontSize","opacity","textTransform","imgURL","multiColumnUrl","shortcutsViewMode","onChange","Boolean","shortcut","Object","values","excludedViewMode","shortcutsArr","from","temp","shortcutIndex","display","justifyContent","alignItems","currentTarget","ShortcutForm","mode","ImportExport","FETCH_MAX_AGE","fetchLists","FORM_NOTES","setFollowedHashtags","currentType","form","formRef","input","setCurrentType","required","defaultValue","switch","autocorrect","followedHashtags","tag","shortcutsStr","compressToEncodedURIComponent","importUIState","setImportUIState","parsedImportShortcutStr","importShortcutStr","parsed","parse","hasCurrentSettings","onInput","nonUniqueShortcuts","every","exceededLimit","newShortcuts","changes","prevValue","Modals","navigate","useNavigate","Compose","__COMPOSE__","editStatus","newStatus","reloadStatusPage","post","reply","edit","delay","toast","hideToast","prevLocation","showSettings","Settings","showAccounts","showAccount","destination","showDrafts","showMediaModal","classList","contains","MediaModal","statusID","showShortcutsSettings","showMediaAlt","showEmbedModal","FollowRequestButtons","requestState","setRequestState","hasRelationship","followRequests","authorize","Error","NOTIFICATION_ICONS","mention","follow","follow_request","contentText","count","reblog_reply","favourite_reply","targetAccount","AVATARS_LIMIT","Notification","isStatic","disableContextMenu","report","_accounts","_statuses","actualStatus","actualStatusID","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","showAvatar","formattedCreatedAt","toLocaleString","genericAccountsHeading","handleOpenGenericAccounts","debug","RelativeTime","datetime","format","Fragment","type2","status2","Status","previewMode","TruncatedLink","onContextMenu","dispatchEvent","clientX","clientY","props","useTruncated","event","accessToken","NotificationService","routeNotification","useLayoutEffect","sameInstance","notificationAccount","hasAccount","hash","warn","id2","setShowNotificationSheet","showNotificationSheet","tagName","instanceURL","SearchForm","forwardRef","searchParams","setSearchParams","useSearchParams","searchMenuOpen","setSearchMenuOpen","setQuery","searchFieldRef","useImperativeHandle","setValue","select","blur","params","autocomplete","autocapitalize","spellcheck","onSearch","onFocus","onBlur","onKeyDown","focusItem","nextItem","nextElementSibling","parentElement","el","firstItem","prevItem","previousElementSibling","lastItem","click","top","SearchCommand","showSearch","setShowSearch","searchFormRef","isSearchPage","closeSearch","enabled","enableOnFormTags","Shortcuts","shortcutsColumnsMode","menuRef","formattedShortcuts","pin","handler","parseInt","closeMenu","updatesButton","instanceRef","overflow","viewScroll","menuClassName","gap","position","MenuLink","groupBoosts","newValues","boostStash","serialBoosts","item","boostStashID","items","half","floor","slice","dedupeBoosts","boostedStatusIDs","filteredItems","statusKey","boosterID","statusKey2","groupContext","contextIndex","contexts","t","repliedItem","self","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","sKey","queueMicrotask","fetchStatus","saveStatus","skipThreading","statusReply","assignFollowedTags","statusFollowedTags","statusWithFollowedTags","itemFollowedTags","extractedTags","clearFollowedTagsState","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","direction","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","scrollLeft","onScroll","scrollHeight","scrollWidth","clientHeight","clientWidth","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","addEventListener","passive","removeEventListener","init","Event","useScrollFn","callback","useThrottledCallback","MediaPost","parent","onMediaClick","accountId","accountEmojis","repliesCount","reblogged","favourited","favouritesCount","bookmarked","muted","sensitive","visibility","language","editedAt","filtered","card","uri","_deleted","_pinned","debugHover","filterContext","useContext","FilterContext","isFiltered","filterInfo","hasSpoiler","readingExpandMedia","prefs","filterTitleStr","titlesStr","showSpoilerMedia","Media","NavMenu","setCurrentAccount","setMoreThanOneAccount","showFollowing","bindLongPress","useLongPress","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","boundingBoxPadding","safeBoundingBoxPadding","mutesIterator","fetchMutes","mutes","blocksIterator","fetchBlocks","blocks","open","state","squircle","ControlledMenu","anchorRef","containerProps","zIndex","portal","body","unmountOnClose","appVersion","commitHash","__COMMIT_HASH__","scrollIntoViewOptions","block","inline","behavior","Timeline","titleComponent","emptyText","errorText","useItemID","boostsCarousel","fetchItems","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","refresh","view","showFollowedTags","showReplyParent","setItems","showNew","setShowNew","allowGrouping","loadItems","useDebouncedCallback","otherPosts","pinnedPosts","items2","itemsSelector","jRef","activeItem","activeItemRect","closest","getBoundingClientRect","allItems","activeItemIndex","indexOf","itemRect","topmostItem","kRef","findLast","oRef","handleLoadNewPosts","useCallback","dotRef","showNewPostsIndicator","headerRef","nearReachStart2","hiddenUI","prevView","disableIdleCheck","loadOrCheckUpdates","inBackground","noPointers","__IDLE__","timeDiff","hasUpdate","useInterval","lastHiddenTime","node","TimelineItem","inView","aFiltered","bFiltered","isCarousel","fItems","StatusCarousel","statusID2","reblog2","actualStatusID2","url2","_pinned2","manyItems","_differentAuthor","isMiddle","isSpoiler","showCompact","isStart","isEnd","itemKey","enableCommentHint","setRender","startButtonRef","render","carouselRef","left","endButtonRef","statusPeekText","statusPeek","statusThreadNumber","MIN_YEAR","MIN_YEAR_MONTH","supportsInputMonth","setAttribute","_isSearchEnabled","isSearchEnabled","AccountStatuses","useParams","month","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","allSearchParams","setAccount","searchOffsetRef","searchEnabled","setSearchEnabled","isValidMonth","_year","_month","monthIndex","after","afterStr","before","beforeStr","searchResults","value2","offset","pinnedStatuses","pinnedStatusesIds","exclude_replies","fetchPromise","fetchAccountPromiseRef","setFeaturedTags","useTitle","cachedAccount","featuredTags","accountInfoMemo","filterBarRef","TimelineStart","month2","date","year","validity","valid","active","allowSwitch","offsetLeft","fetchAccountStatuses","masto2","monthFieldRef","checkValidity","minYear","maxYear","maxMonth","minMonth","yearFieldRef","Bookmarks","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FollowedHashtags","Following","homeIterator","latestItem","latestItemChanged","payload","fetchHome","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","mediaView","columnMode","hashtags","linkParams","hashtagTitle","hashtagPostTitle","maxID","fetchHashtags","timelines","any","maxId","onlyMedia","since_id","followUIState","setFollowUIState","reachLimit","setDownOverflow","catch","finally","MenuHeader","FocusableItem","newHashtag","MenuGroup","exists","some","newInstance","List","listIterator","fetchList","setList","showManageMembersModal","setShowManageMembersModal","ListManageMembers","MEMBERS_LIMIT","listID","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","notificationTypeKeys","fixNotifications","groupNotifications","notificationsMap","cleanNotifications","virtualType","mappedNotification","mappedAccount","n","cleanNotifications2","notificationsMap2","Notifications","notificationID","notificationAccessToken","onlyMentions","setOnlyMentions","setFollowRequests","announcements","setAnnouncements","excludeTypes","allNotifications","groupedNotifications","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","loadNotifications","fetchNotificationsPromise","fetchNotifications","announcements2","loadUpdates","autoRefresh","unsub","v","subscribeKey","yesterdayDate","todayDate","currentDay","showTodayEmpty","announcementsListRef","announcement","AnnouncementBlock","notificationDay","differentDay","contact","contactAccount","startsAt","allDay","publishedAt","endsAt","published","read","reactions","publishedAtDate","publishedDateText","updatedAtText","staticUrl","me","reaction","Public","isLocal","publicIterator","fetchPublic","prompt","toLowerCase","SHORT_LIMIT","Search","offsetRef","scrollTo","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","filterBarParent","link","history","fetchLinks","trends","links","Trending","setHashtags","setLinks","trendIterator","fetchTrend","links2","cur","description","authorName","authorUrl","blurhash","imageDescription","providerName","providerUrl","accentColor","averageColor","labAverageColor","title2","Columns","components","Hashtag","Component","error","Home","NotificationsLink","notificationLinkRef","stopPropagation","matchMedia","matches","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","now","hasFollowRequests","setHasFollowRequests","statusPostRegexes","getInstanceStatusObject","regex","match","getInstanceStatusURL","HttpRoute","statusObject","statusURL","Lists","instancesListURL","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","scrollPositions","resetScrollPosition","STATUSES_SELECTOR","STATUS_URL_REGEX","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","showMedia","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","matchStatusPath","matchPath","handleMediaClose","delete","$carousel","StatusParent","linkable","restProps","StatusThread","navigation","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","lastInitContextTS","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","hasStatus","heroStatus2","_replies","_r","expandReplies","weight","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","nestedDescendants","__replies","ancestor","isThread","allStatuses","offsetTop","setLimit","showRefresh","setShowRefresh","interval","scrollPosition","newScrollOffsets","setInterval","newScrollTop","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","hasDescendants","innerHTML","postSameInstance","activeStatus","activeStatusRect","activeStatusIndex","nextStatus","statusLink","heroInView","heroPointer","statusLinkRect","topmostStatusLink","allStatusLinks","prevStatus","details","reachTopPost","initialPageState","handleMediaClick","renderStatus","descendant","thread","isHero","requestAnimationFrame","setHeroInView","setReachTopPost","isLinkable","SubComments","handleStatusLinkClick","withinContext","showActionsBar","prevEntry","moreStatusesKeys","level","accWeight","openAll","ids","viewMode","prevLocationIsStatusPage","arr","setViewMode","button","buttons","statusesList","diveDeep","replies2","replies3","totalComments","totalWeight","hasParentThread","calcStatusWeight","openBefore","parentLink","detailsRef","handleScroll","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","cachedWeight","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","WEIGHT_SEGMENT","StatusRoute","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","nativeAlert","__nativeAlert","Toastify","gravity","y","__STATES__","__STATES_STATS__","counts","unmountedPosts","unfurledLinks","$post","postInNotifications","unfurled","keysCount","ICONS","nonIdleEvents","setIdle","debouncedSetIdle","onNonIdle","documentElement","isIOS","theme","$meta","tempColor","colorScheme","$manualMeta","themeDarkColor","$autoMetas","textSize","setProperty","$app","$body","setIsLoggedIn","code","decodeURIComponent","clientID","clientSecret","initPreferences","client","initInstance","initStates","PrimaryRoutes","Routes","Route","nonRootLocation","Welcome","element","backgroundLocation","getPrevLocation","isModalPage","timeout","AbortSignal","controller","AbortController","abort","signal","HashRouter","App","localStorage","removeItem","sessionStorage","__CLOAK__","toggle"],"mappings":"k3BAEe,SAASA,GAAkBC,EAAKA,IAAM,GAAIC,EAAO,CAAA,EAAI,CAClE,MAAMC,EAAgBC,EAAOH,CAAE,EAC/BI,EAAU,IAAM,CACdF,EAAcG,QAAUL,CAC1B,EAAG,CAACC,CAAI,CAAC,EAETG,EAAU,IAAM,CACd,MAAME,EAAyBA,IAAM,CACnC,MAAMC,EAASC,SAASD,QAAUC,SAASC,kBAAoB,SAC/DC,EAAwC,QAAA,CAAAH,CAAA,CACxCL,EACF,gBAAC,iBAAA,mBAAAI,CAAA,EAEDE,IAAyB,SAAA,oBAAmB,oBAAyB,GAC9D,CAAA,CAAA,ECNX,MAAMG,GAAoB,IAAO,EAC3BC,GAAgB,KAEtBC,GAAeC,GAAK,SAA2B,CAAEC,WAAAA,CAAW,EAAG,CAG7D,KAAM,CAACC,EAASC,CAAU,EAAIC,EAAS,EAAI,EAC3CnB,GAAkBkB,CAAU,EAC5B,MAAME,EAA0B,MAAOC,EAAOC,EAAUC,IAAqB,OAC3E,GAAIC,EAAOC,kBAAmB,CAC5B,MAAMC,EAAwBL,EAAMM,GAAGC,cAAcC,KAAK,CACxDC,MAAO,EACPC,QAASP,EAAOC,kBAAkBO,EAAAA,CACnC,EACK,CAAEC,MAAOL,CAAAA,EAAkB,MAAMF,EAAsBQ,OAC7D,GAAIN,GAAAA,MAAAA,EAAeO,OACjB,GAAIZ,EACFC,EAAOY,qBAAuB,OACzB,CACDC,IAAAA,EACA,GAAA,CACF,MAAMC,EAAU,MAAMjB,EAAMM,GAAGW,QAAQC,MAAM,CAC3CC,SAAU,eAAA,CACX,EACDH,GAAaC,EAAAA,GAAAA,YAAAA,EAASV,gBAATU,YAAAA,EAAwBD,gBAC3B,CAAC,CACTA,EACFb,EAAOY,qBAAuBR,EAAc,CAAC,EAAEI,KAAOK,EAEtDb,EAAOY,qBAAuB,EAElC,CAEJ,CAAA,EAGF/B,EAAU,IAAM,CACVoC,IAAAA,EACAC,EACJ,GAAI1B,GAAcC,EAAS,CACnB,KAAA,CAAEI,MAAAA,EAAOsB,UAAAA,EAAWrB,SAAAA,GAAasB,EAAI,GAC1C,SAAY,CAELxB,MAAAA,EAAwBC,EAAOC,CAAQ,EAE7C,IAAIuB,EAAe,GAEfF,IACFD,EAAoBI,WAAW,IAAM,EAClC,SAAY,CACP,GAAA,CACaD,EAAA,GACTF,EAAAA,EAAUI,KAAKC,aAAaC,UAAU,EACpCC,wBAEI,GADZ,CAAAT,GACY,CAAAxB,EACV,MAAckC,EAAA,QAAA,gBACND,gBACJC,gBACFxC,CAAQuC,EAC4B1B,EACnB,qBAAA,EAAA,CAEnB,MAAA,CACAA,EAA8B,EAChC,CACAb,MACU,YAAA,IAAA,CACKS,EAAAC,EAAAC,EAAA,EAAA,CACfX,EAAAA,EAAe,EAGjB,IACEA,EAAAA,EAAsD,EAEpDS,IAA6C,CAEjD,MAAA,IAAA,QAAAgC,EAAAX,GAAA,YAAAA,EAAA,cAAA,MAAAW,EAAA,KAAAX,GACCA,OAEP,aAAAC,CAAA,EACF,cAAGA,CAAA,CAAA,CAEL,EAAA,CAAAzB,EAAaD,CAAA,CAAA,EACXyB,MAAAA,EAAmBrC,IACbiD,EAAA,IAAA,CACNC,EAAAA,QAA8B,KAAA,MAC9BC,MAAAA,gBAA+B,EAAA,KAAA,GAAA,EAAA,MAAA,EAAA,KAAAC,GAAA,CACjCA,IACWxC,EAAAA,WAAWwC,EAGxB,CAAA,EAAA,YACA,EACgBlD,OAAAA,GAAAA,KAAmB,IAAA,GAAA,EAAA,EACjCK,GAAgC8C,GAAA,CAC1BA,IAGED,EAAAA,QAGW,KAAA,IAAA,EAAAE,EAAA,QAChB,IAAA,GAAA,IACLL,IALgB7B,IASZ,CAAI,EACcmC,GAAA,cAAA,IAAA,CAAA,MACXC,EAAApC,EAAA,SAAA,UACLA,EAAA,SAAaqC,UAAS,CAAAD,EAClBE,GAAAA,CAEc,KAAA,cAAAF,EAAA,WAAA,SAAA,EAAA,CAClB,CAAA,CACF,EACF,IAAA,CAAA,ECxHJ,SAAwBG,IAAgB,CACtC,SAASC,EAAaC,EAAG,CACnBA,EAAEC,SACWC,OAGb3C,EAAO4C,YAAc,IAGvB5C,EAAO4C,YAAc,EAEzB,CAEAT,OAAAA,GAAW,aAAcK,EAAc,CACrCK,gBAAwBJ,GACL,CAAC,CAACxD,SAAS6D,cAAc,sBAAsB,CAElE,CACD,EAGCC,EAAA,SAAA,CAAQC,KAAK,SAASxC,GAAG,iBAAiByC,QAAST,EAAaU,SAC9DH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,KAAKC,IAAI,SAAA,CAAW,CAAA,CACtC,CAEZ,CCrBA,MAAAC,GAAehE,GAAK,UAAiC,CAC7CiE,MAAAA,EAAaC,GAAYzD,CAAM,EAErC,SAAS0D,GAAU,CACjB1D,EAAO2D,0BAA4B,EACrC,CAEAxB,OAAAA,GACE,0BACOM,GAAA,CACLtD,EAAAA,0BAAkB,EAClBa,EAAAA,CAEF,gBAAAyC,GAC0B,CAAA,CAAA,SAAA,cAAA,sBAAA,CAEfmB,CACT,EAEJ,CAAA,CAAAJ,EAAA,2BAAAT,EAAAc,GAAA,CAEA,MACIL,QACOM,QAAAA,EAAcJ,SAAAA,EAAAA,MAAAA,CAAiBR,GAAAA,oCAC/B1C,MAAG,QAAoCsD,SAAM,KAAQC,SAAS,CAAAhB,EAAA,SAAA,CAAIG,KAAAA,SAC7DF,MAAK,cAASc,QAAMJ,EAAcT,SAASS,EAAAA,EAAAA,CAAQR,KAAAA,GACpD,CAAA,CAAM,CAAA,EAAKH,EAAA,SAAA,CAElBA,SAAAA,EAAA,KAAA,CAAAG,6BACE,CAAA,CAAI,CAAA,EAAsBH,EAAA,OAAA,CAE5BA,SAAAA,EAAA,QAAA,CAAAG,kBAEK,0BAEGc,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,YACED,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,gBACED,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,6BACED,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,iCACEc,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,iBACEc,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,oBACED,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAU,SAAKA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAChC,CAGN,OAAAgB,EAAAC,EAAA,CACEH,sCACEjB,EAAA,KAAA,CAAA,CAAA,EAAA,kCAAA,CAAA,CAAAG,EAIA,KAAEH,EAAA,MAAA,CAEJkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,wBACED,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,KAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAQ,SAAKA,WAAA,CAAA,CAAAG,CAAK,CAAA,CAAe,EACtC,CAGN,OAAA,oCACEc,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,GAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAM,SAAKA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC5B,CAGN,OAAA,mBACEc,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,gCACED,UAAQ,gBACRI,KAAWF,EAAAC,EAAA,CACXF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,YACEc,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,MAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAS,SAAIA,OAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAU,SAAKA,GAAA,CAAA,EAAK,KAAA,IAAAA,EAAA,MAAA,CAAM,SAAI,OACrD,CAAA,CAAAG,CAAK,CAAA,CAAW,EAChB,CAGN,OAAA,SACEc,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,QACED,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,qBACED,UAAQ,gBACRI,KAAWF,EAAAC,EAAA,CACXF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,mBACEc,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,GAAA,CAAA,EAAK,OAAAA,EAAA,MAAA,CAAM,SAAKA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC5B,CAGN,OAAA,QACEc,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,EAC/B,CAGN,OAAA,WACEc,KAAQjB,EAAA,MAAA,CACRkB,SAAM,GAAA,CAAA,CAAK,EAAM,CAEnB,OAAA,oBACED,KAAQE,EAAAC,EAAA,CACRF,SACEE,CAAApB,EAAA,MAAA,CAAAG,SACEH,OAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAU,SAAIA,KAAA,CAAA,EAAK,MAAAA,EAAA,MAAA,CAAQ,SAAIA,GAAA,CAAA,CAAAG,CAAK,CAAA,CAAO,CAAA,EAChD,IAAA,CAAA,CAGNmB,OAAAA,EAAOL,UAAAA,EAAQI,KAAAA,CAAAA,IAAWH,EAAAA,KAAAA,CAAK,SAC/B,CAAAlB,EAAA,KAAA,CAAAG,MAAAA,EACMY,SAAOM,CAAAA,CAAAA,EAAYJ,EAAAA,KAAAA,CACvBjB,SAAAkB,CAAA,CAAA,CAAAf,CAAKe,EAASD,CAAC,CAAA,CAAA,CAAA,CAElB,CAAA,CAAC,CACG,CAAA,CACF,CAAA,CACJ,CAAA,EC1Kb,SAASM,GAAS,CAAEZ,QAAAA,CAAQ,EAAG,CACvB,KAAA,CAAE7D,MAAAA,GAAUuB,EAAI,EAEhBmD,EAAWC,GAAMC,MAAMC,QAAQ,UAAU,EACzCC,EAAiBH,GAAMI,QAAQC,IAAI,gBAAgB,EACnDC,EAAqBP,EAAS5D,OAAS,EAEvC,CAACoE,EAAGC,CAAM,EAAIC,GAAkBC,GAAAA,EAAI,EAAG,CAAC,EACxC,CAACC,CAAkB,EAAIC,KAE7B,OACElB,EAAA,MAAA,CAAK1D,GAAG,qBAAqBsD,MAAM,QAAQuB,SAAS,KAAInC,SACrD,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,cAAcb,QAASS,EAAQR,SACzDH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVL,EAAA,SAAA,CAAQe,MAAM,cAAaZ,SACzBH,EAAA,KAAA,CAAAG,SAAI,UAAA,CAAY,CAAA,CACV,EACRH,EAAA,OAAA,CAAAG,SACEgB,EAAA,UAAA,CAAAhB,UACEH,EAAA,KAAA,CAAIe,MAAM,gBAAgBwB,IAAKH,EAAmBjC,SAC/CqB,EAASF,IAAI,CAACkB,EAASC,IAAM,CACtBC,MAAAA,EAAYF,EAAQvD,KAAKxB,KAAOmE,EAChCe,EAAYF,IAAM,EACxB,OACEtB,EAAA,KAAA,CAAAhB,UACEgB,EAAA,MAAA,CAAAhB,SAAA,CACG4B,GACC/B,EAAA,OAAA,CAAMe,MAAQ,WAAU2B,EAAY,aAAe,EAAG,GAAEvC,SACtDH,EAACI,EAAI,CAACC,KAAK,eAAeE,IAAI,SAAA,CAAW,CAAA,CACrC,EAERP,EAAC4C,GAAM,CACLC,IAAKL,EAAQvD,KAAK6D,aAClBxC,KAAK,MACLyC,WAAY,SAAY,CACtB,GAAIL,EACE,GAAA,CACIzD,MAAAA,EAAO,MAAMnC,EAAMM,GAAGoE,SACzBwB,QAAQR,EAAQvD,KAAKxB,EAAE,EACvBO,MAAM,EACDW,EAAAA,OACR6D,GAAAA,MAAevD,QAAAA,WAAAA,CAAAA,EACTyC,GACC,MAAA,EAEX,CAAA,CACF,EAAA1B,EAAAiD,GAAA,CAEFjD,QAAS+B,EAAA,MAGD,KACE,KAAW9C,IAAAA,KAAAA,EAAAA,KAAAA,IAAAA,EAAAA,EAAAA,KAAAA,KAAAA,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,WAAAA,EAAAA,IACDiE,KAGZ,SACQjE,GAEdkE,QAAQ,IAAA,GAENlG,EAAe,YAAA,GAAAuF,EAAA,KAAA,QAAA,IAAAA,EAAA,WAAA,IAERf,GAAA,QAAA,IAAA,iBAAAe,EAAA,KAAA,EAAA,EACLf,SAAc2B,OAAAA,EAEhB,CAAA,CACF,CAAA,CAAA,CAAA,EACAjC,EAAA,MAAA,CAEJA,MAAAA,UAAKJ,SAAM,CAAA4B,GAAAZ,GAAAZ,EAAAC,EAAA,UACKW,CAAAA,EAAAA,OAAAA,CACZ5B,MAAAA,MACQY,SAAM,SAAA,CAAA,EAAM,GAAA,CAAA,CAAO,IAAWsC,GAAA,CAGxClC,MAAAA,MACEmC,WAAMtD,EAAA,SAAA,CACNuD,KAAAA,SAEItD,MAAK,OACLuD,MAAM,oBACNzC,SAAMf,EAAAI,EAAA,CAAmBD,KAAAA,OAEnBE,KAAK,IAAOC,IAAK,MAAA,CAAA,CAAQ,CAAA,EAAS,SAClC,CAAAa,EAAAsC,GAAA,CACTtD,QAEDgB,IAACsC,GACUvD,YAAM,GAAAsC,EAAA,KAAA,QAAA,IAAAA,EAAA,WAAA,EACbvF,EACF,SAAA,CAAA+C,EAAAI,EAAA,CAAED,KAAAA,MAEG,CAAA,EAAMH,EAAA,OAAA,CACXA,SAAA,eAAA,CAAA,CAAAG,CAAM,CAAA,EAAoBH,EAAA0D,GAAA,CAAA,CAAA,EAAA3B,GAAAZ,EAAAsC,GAAA,UAE3BC,EAGGC,QAAUhB,IAAAA,GACK,OAAAF,EAAA,CAAA,EAEJmB,EAAAA,SAAW,EACpBpC,GAAAA,cAAwB,WAAAA,CAAA,EAClBE,GACC,EACT,SAAA,CAAA1B,EAAAI,EAAA,CAAED,KAAAA,cAEG,CAAA,EAAMH,EAAA,OAAA,CACXA,SAAA,gBAAA,CAAA,CAAAG,CAAM,CAAA,EAAqBgB,EAAA0C,GAAA,CAG/B1C,QAAY,GACV2C,aAAO3C,EAAAC,EAAA,CACP2C,SAAAA,CAAAA,IACE,CAAA5D,KAAAA,MACO,CAAA,EAAMgB,EAAA,OAAA,CACXA,SAAA,CAAA,YAAAqB,EAAA,KAAA,KAAA,GAAA,CAAA,CAAA,CAAArC,CAAmC,CAAA,EAAO,SAC1C,CAAAuC,EAEJiB,kBAAWjB,SACXsB,QAAkB,IAAA,GACH,OAAAvB,EAAA,CAAA,EAGJmB,GAAAA,MAAAA,QAAW,WAAApC,CAAA,EACdE,SAAAA,KAAc,SAAA,UAAoB,GAE/BuC,EACX,SAAA,CAAAjE,EAAAI,EAAA,CAAED,KAAAA,MAEG,CAAA,EAAMH,EAAA,OAAA,CACXA,SAAA,UAAA,CAAA,CAAAG,CAAM,CAAA,CAAQ,CAAO,CAAA,CAAA,CACT,CAAA,CAAA,CACR,EACLqC,EAAC,KAAA,EAAA,CAAA,CAAA,CACJ,CAAA,EAEPxC,EAAA,IAAA,CAEHA,SAAAmB,EAAA+C,EAAA,CAAA/D,GAAAA,SACQgE,MAAG,gBAASpD,QAAMJ,EAAgBT,SAASS,CAAAA,EAAAA,EAAAA,CAAQR,KAAAA,MAClD,CAAA,EAAM,IAAAH,EAAA,OAAA,CAAQ,SAAEA,yBAAA,CAAA,CAAAG,CAAM,CAAA,CAA8B,CAAA,EACrD4B,GAAA/B,EAAA,IAAA,CACL,SAEDA,EAAAA,QAAAA,CAAAG,mBACEH,EAAA,IAAA,CAAA,SACQA,SAAA,CAAA,EAAG,iGAAA,CAAA,CAAO,CAElB,CAAA,CAAA,CAAO,CAAA,CAEV,CAAA,CAAA,CACM,CAAA,CACJ,CC7Kb,MAAeoE,GAAA,8lCCkCf,SAASC,GAA8BC,EAAc,CACnD,KAAM,CAAExH,MAAAA,CAAO,EAAGuB,EAAG,EACrB,OAAOvB,EAAMM,GAAGmH,KAAKD,aAAaE,OAAOF,CAAY,CACvD,CAEA,SAASG,IAA+B,CACtC,KAAM,CAAE3H,MAAAA,CAAO,EAAGuB,EAAG,EACrB,OAAOvB,EAAMM,GAAGmH,KAAKD,aAAatG,MAAK,CACzC,CAEA,SAAS0G,GAA8BJ,EAAc,CACnD,KAAM,CAAExH,MAAAA,CAAO,EAAGuB,EAAG,EACrB,OAAOvB,EAAMM,GAAGmH,KAAKD,aAAaK,OAAOL,CAAY,CACvD,CAEA,SAASM,IAAgC,CACvC,KAAM,CAAE9H,MAAAA,CAAO,EAAGuB,EAAG,EACrB,OAAOvB,EAAMM,GAAGmH,KAAKD,aAAaO,OAAM,CAC1C,CAKO,SAASC,IAAkB,CAChC,MAAO,kBAAmBC,WAAa,gBAAiBC,MAC1D,CAEO,SAASC,IAAkB,CAEhC,OAAOF,UAAUG,cAAcD,iBACjC,CAEA,eAAeE,IAAkB,CAC/B,MAAMC,EAAe,MAAMH,KACrBX,EAAec,EACjB,MAAMA,EAAaC,YAAYF,gBAAiB,EAChDG,OACJ,MAAO,CAAEF,aAAAA,EAAcd,aAAAA,EACzB,CAEA,SAASiB,GAAsBC,EAAc,CAC3C,MAAMC,EAAU,IAAIC,QAAQ,EAAKF,EAAa5H,OAAS,GAAM,CAAC,EACxD+H,EAAU,GAAEH,CAAa,GAAEC,CAAQ,GACtCG,QAAQ,KAAM,GAAG,EACjBA,QAAQ,KAAM,GAAG,EAEdC,EAAUb,OAAOc,KAAKH,CAAM,EAC5BI,EAAc,IAAIC,WAAWH,EAAQjI,MAAM,EAEjD,QAAS6E,EAAI,EAAGA,EAAIoD,EAAQjI,OAAQ,EAAE6E,EACpCsD,EAAYtD,CAAC,EAAIoD,EAAQI,WAAWxD,CAAC,EAGvC,OAAOsD,CACT,CAKO,eAAeG,IAAmB,CACvC,GAAI,CAACpB,GAAe,EAAI,OACxB,KAAM,CAAER,aAAAA,CAAa,EAAI,MAAMa,GAAe,EAC9C,IAAIgB,EAAsB,KAC1B,GAAI,CACFA,EAAsB,MAAM1B,IAC7B,OAAQ2B,EAAK,CACZ,GAAI,wBAAuBlD,KAAKkD,EAAIC,OAAO,EAIzC,MAAMD,CAEV,CAGED,GAAAA,GAAAA,EAAAA,CACA,MAAAG,EAAAH,EAAA,WAAA7B,EAAA,UAEF,SAAAiC,CACIJ,EAAAA,GAAmB,EACfG,EAAAA,EAAkC,YAAchC,EACtD,GAAM,CAAAgC,EAAEC,MAAAA,IAAAA,MAAAA,uCAAAA,EACR,GAAA,CAAAC,EAGA,MAAA,IAAA,MAAA,gDAAA,QAY6B,CAAAL,EAAU,CAErC,KAAE,CACF,SAAAI,CACA,EAAAE,GAAA,EACA,CACA,qBAAAC,CACA,EAAApC,EAAA,QACAqC,EAAApB,GAAAgB,CAAA,EAAA,SAAA,EACAK,EAAA,IAAA,WAAAF,CAAA,EAAA,SAAA,EAEA,GAAA,EADAC,IAAAC,GAKAtC,YAAYA,EAAK6B,cACnB,IAAA,MAAA,wCAAA,CACQI,CAWNnK,MAAAA,qCAGEoK,CACF,CACA,eAAAK,GAAA,CACA,KAAAC,EACA,OAAAC,CACF,EAAA,CACF,GAAA,CAAAjC,GAAA,EAAA,WAEA,aAAAM,EACA,aAAAd,CACA,EAAA,MAAAa,GAAA,EACAgB,EAAA,KACA,GAAA7B,EACA,GAAA,CACA6B,EAAA,MAAAzB,GAAA,CACA,KAAAoC,EACA,OAAAC,GAEqB,MAAA,CACvBZ,EAAA,MAAA9B,GAAA,CAEO,aAAAC,EAAwC,KAAAwC,EAAEC,OAAAA,CAAO,CAAG,CACX,KAAEA,CAChD,KAAKjC,CACD,SAAAyB,CAAc,EAAAE,GAAA,EAAEnC,GAAAA,CAAAA,EAAAA,MAAAA,IAAAA,MAAAA,qBAAAA,EAAiBA,EAAqB,MAAAc,EAAE,YAAA,UAAA,CACxDe,gBAAAA,GAEA7B,qBAAciB,GAAAgB,CAAA,EACZ,IACiB,MAAS7B,GAAAA,gBAE1BqC,KAAAA,EACF,OAAAA,CACA,CAAA,CAEA,OAEmB,qCAGjBA,CACF,CACA,eAAAC,IAAA,CACF,GAAA,CAAAlC,GAAA,EAAA,OACF,KAAO,CACL,aAAAR,GACM,MAAAa,GAAA,EAAEoB,IAAS,MAAqB3B,GAAE,EACxC,QAAe,cAEbqC,CCnNN,IAAOC,GAAA,CAAA,mBAAA,WAAA,eAAA,yBAAA,wBAAA,4FAAA,0BAAA,yDAAA,aAAA,aAAA,wBAAA,aAAA,SAAA,KAAA,KAAA,aAAA,IAAA,GAAA,KAAA,GAAA,IAAA,EAAA,04YCAP,MAAMC,GAAYA,IAAM,CAClBC,IAAAA,EAAQ7I,WAAW,IAAM,CAE3B,GAAI8I,CADYnL,SAASoL,eAAe,SAAS,EAI1C,CACCC,MAAAA,EAASrL,SAASsL,iBAAiB,sBAAsB,EAC/D,GAAID,GAAAA,MAAAA,EAAQ3J,OAAQ,CAElB,MAAM6J,EAAQF,EAAOA,EAAO3J,OAAS,CAAC,EAChC8J,EACJD,EAAM1H,cAAc,iBAAiB,GAAK0H,EAC5C,GAAIC,EAAmB,CACrBA,EAAkBC,MAAM,EACxB,MACF,CACF,CAEIC,GADa1L,SAAS6D,cAAc,gBAAgB,EAC1C,OAER8H,MAAAA,EAAQ3L,SAASsL,iBAAiB,iBAAiB,EACnDM,EAAOD,EAAMA,EAAMjK,OAAS,CAAC,EAC/BkK,GAAQA,EAAKxF,WAAa,IACpB3D,EAAAA,MAAAA,CAEV,CACF,EAAA,GAAA,EACF,MAAM,IAAA,aAAAyI,CAAA,CACN,ECvBa,SAASW,GAAkBrM,EAAI,CAC5C,GAAI,CAACA,EAAI,OACT,MAAMsM,EAAWC,KACXC,EAAqBrM,EAAOmM,EAASG,QAAQ,EACnDrM,EAAU,IAAM,CAMZoM,EAAmBnM,SACnBiM,EAASG,WAAaD,EAAmBnM,UAEzCL,GAAAA,MAAAA,IAEH,EAAE,CAACsM,EAASG,SAAUzM,CAAE,CAAC,CAC5B,CCdA,SAAS0M,GAAY,CAAE9K,KAAAA,EAAMqD,QAAAA,CAAQ,EAAG,CAChC,KAAA,CAAE7D,MAAAA,GAAUuB,EAAI,EAChB,CAACgK,EAASC,CAAU,EAAI1L,EAAS,SAAS,EAC1C2L,EAAW,CAAC,CAACjL,EACbkL,EAAe3M,IACf4M,EAAwB5M,IACxB6M,EAAoB7M,IAC1BC,EAAU,IAAM,CACVyM,IACWxM,EAAAA,QAAQ2B,MAAQJ,EAAKkG,MACZzH,EAAAA,QAAQ2B,MAAQJ,EAAKqL,cACvCD,EAAkB3M,UACFA,EAAAA,QAAQ6M,QAAUtL,EAAKuL,WAE7C,EACC,CAACN,CAAQ,CAAC,EACPO,MAAAA,EAAoBC,GAAS,0BAA0B,EAE7D,OACE5H,EAAA,MAAA,CAAKJ,MAAM,QAAOZ,SACf,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,cAAcb,QAASS,EAAQR,SACzDH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EACP,IACHL,EAAA,SAAA,CAAAG,SACEH,EAAA,KAAA,CAAAG,SAAKoI,EAAW,YAAc,UAAA,CAAe,CAAA,CACvC,EACRvI,EAAA,OAAA,CAAAG,SACEgB,EAAA,OAAA,CACEJ,MAAM,YACNiI,SAAiBtJ,GAAA,CACfA,EAAEuJ,eAAe,EAEjB,MAAMC,EAAW,IAAIC,SAASzJ,EAAE0J,MAAM,EAChC5F,EAAQ0F,EAASpH,IAAI,OAAO,EAC5B6G,EAAgBO,EAASpH,IAAI,gBAAgB,EAC7C+G,EAAYK,EAASpH,IAAI,WAAW,IAAM,KAChD1F,EAAY,SAAA,GACVoH,SAAAA,CACAmF,GAAAA,CACAE,IAAAA,EACDN,EACDD,EAAoB,MAAAxL,EAAA,GAAA,MAAA,QAAAQ,EAAA,EAAA,EAAA,OAAA,CAEP,MAAAkG,EACP,eAAAmF,EACEU,UAAAA,CAEJ,CAAA,EAEI7F,EAAAA,MAAAA,EAAAA,GAAAA,MAAAA,OAAAA,CACA8F,MAAAA,EACAT,eAAAA,EACD,UAAAA,CAAA,CACI,EAEHrF,EAAAA,SAAAA,EAAAA,GAAAA,MAAAA,EACgBmF,CAChBE,MAAAA,UACF,KAACQ,CAAA,EAGHjN,OACAkM,EAAW,OAAS,EACV,MAAAC,EAAA,uBAAA,wBAAA,CAAA,CACD,IACDc,EACP,YACS,MAAA,CACVjN,MAAAA,gBACAkM,SAAAA,EAAkB,QAAA,CAEhBC,IAAAA,aAEJ,SAAA,CAAA,OAAA,IAAAvI,EAAA,QAAA,CACC,IAAAwI,EACL,KAAA,OAAErI,gBAES,KAAA,QAAeA,YACb,SAAAkI,IAAA,UAAa,IAAA,MAEtB,CAAA,CACE9F,CAAKiG,CAAAA,CACA,CAAA,EAAAxI,EACF,MAAA,CAAA,MACE,gBAAA,SACGmB,EAAA,SAAA,CAAA,MACc,KAClB,iBAAM,SACV,GACG,SAAAkH,IAAA,UAETrI,SAAA,CAAAA,EAAA,SAAA,CAAW,MAAA,OAAeG,uCACxB,CACOsI,EAAAA,EAAAA,SAAAA,CACA,MAAA,WACG,SAAA,iCAAA,cACc,CAAUtI,MAAAA,OAExBzC,SAAM,oBAAA,CAAA,CAAMyC,CAAC,CAA4B,CACjD,CAAA,EAAA2I,GAAc9I,EAAA,MAAA,CAAA,MAAW,gBAA+B,SACxDA,EAAA,QAAA,CAAA,MAAc,cAAA,SAAO,CAAAA,EAAA,QAAA,CAA2B,IAAA0I,EAC1C,KAAA,WAGR1I,KAAAA,YAAW,SAAAqI,IAAA,SAAA,CAAelI,EAAAA,iDACxB,CAAA,CAAA,CAAa,CAAaA,EAAAA,EAAAA,MACxBH,CAAA,MACO0I,mBAAAA,SACA,CAAA1I,EAAA,SAAA,CAAA,KACA,SAAA,aACiB,UAAU,SAGpCuI,EAAA,OAAA,QAAA,CAAO,EAAAA,GAAAvI,EAAA6D,GAAA,CAGX1C,SAAAkH,IAAA,UAAW,MAAA,MAAkBlI,kBAC3B,SAAQF,aAAK,oBAAS0D,YAAsB,CAAUxD,WAC/B,GAGrBH,SAAAA,KAEQ,MAAAlD,EAAA,GAAA,MAAA,QAAAQ,EAAA,EAAA,EAAA,SACYgL,EAAA,SAAA,EACL3H,GAAA,MAAAA,EAAA,OACE,SAGb2H,EAEa,MAAA,CACPA,EAAA,OAAA,EACF,MAAMxL,wBAA4BW,CAClC6K,CACA3H,IAAU,EACD,SACRX,EAAA,SAAA,CAAA,cAED5D,MAAAA,eACAkM,SAAAA,IAAkB,UAClBiB,SAAM,SAAwB,CAChC,CAAA,CAAA,CAAA,CACC,CACL,CAAA,CAAA,CAAEpJ,CAEF,CAAA,CAAA,CACO,CAAA,CACC,CC1HxB,MAAMqJ,GAAiB,CACrB,GAAK,EACL,GAAK,GACL,GAAK,GACL,GAAK,GAAK,EACV,GAAK,GAAK,GACV,GAAK,GAAK,GAAK,EACf,GAAK,GAAK,GAAK,EACf,CAAG,EAECC,GAAwB,CAC5B,EAAG,UACH,IAAK,YACL,KAAO,aACP,KAAO,SACP,MAAQ,UACR,MAAQ,QACR,OAAS,SACT,OAAS,QACX,EAEMC,GAAQ,GAERC,GAAuB,IAAO,GAAK,GAEzC,SAASC,GAAuBC,EAAW/M,EAAO,CAChD,OAAOA,EAAMM,GAAGoE,SAASsI,kBAAkB9L,MAAM,CAC/CP,GAAI,CAACoM,CAAS,CAAA,CACf,CACH,CACA,MAAME,GAA4BC,GAAKJ,GAAwB,CAC7DK,OAAQN,EACV,CAAC,EAED,eAAeO,GAAkBC,EAAWrN,EAAO,CAC3CsN,MAAAA,EAAgBtN,EAAMM,GAAGoE,SAC5BwB,QAAQmH,CAAS,EACjBE,SAAS/M,KAAK,CACbC,MAAO,EAAA,CACR,EACAI,KAAK,EAEF,CAAED,MAAO2M,GAAa,MAAMD,EAC1BzL,GACR,MAAc0L,EAAA,OACZC,UAAgB1M,EAChB2M,QAAW,EACXC,OAAS,CAAA,EAEX,OAAAH,EAAA,QAAAI,GAAA,CAMAJ,SACEK,WACQC,EAAAA,aAAAA,EAAAA,qBAAAA,EAAAA,QAAAA,GACRD,EAAA,UAKOA,EAAA,WACCH,CACR,EACDF,EAAA,SAGDK,oBAAqB,KAAA,MAAA,KAAA,MAAA,IAAA,KAAAL,EAAAA,EAAA,OAAA,CAAA,EAAA,SAAA,GAAA,KAAA,GAKrBK,CAEAtO,CACA,MAAOsO,GAAAA,GAAAA,GAAAA,CACT,OAAAf,EACA,CAAMiB,EAA+C,SAC3CjB,GAAAA,CACT,QAAAnH,EAED,aAAAqI,EAAqB,IAAA,CACnBrI,EACAqI,WAAAA,EAAsB,SAAA9N,EACtB+N,cAAAA,CAAAA,EACA/N,CACAgO,KAAAA,CACC,MAAAjO,CACK,EAAAuB,EAAA,CAAEvB,SAAAA,CAAAA,GACNC,CACD,MAAAiO,EACK,SAAAC,CAAA,EAASD,EAAAA,EAAwBC,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAwBC,EAAA,OAAA1I,GAAA,SACzD,CAAC6F,EAAAA,CAAmB,EAAAzL,IAAsB,KAAA4F,CAAA,EAC1C0I,EAA8BC,GAAA,IAAApO,IAAAkO,EAAA,CAAAlO,EAAAkO,CAAA,CAAA,EACpCnP,EAAasP,IAAAA,CAEPC,GAAAA,CAAAA,EAAAA,CAKNvP,EAAgB0G,CAAA,EACd,MACE4I,CACA9C,EAAA,SAAA,GACF,SAAA,CACAA,GAAAA,CACa,MAAAgD,EAAA,MAAAT,IACP5N,EAAA,SAAA,GAAAqO,EAAA,EAAA,IAAAvO,CAAA,EAAA,EAAAuO,EACIrM,EAAAA,CAAAA,EACNhC,WAAmBgC,CACnBmM,MAAY,CACZ9C,EAAAA,IAAoB,IACV,OAAA,CACVlM,CACAgP,IACA9C,EAAAA,CAAAA,EAAAA,EAAkBuC,CAAA,CAAA,EACpB,KAAA,CACF,KAAAU,EACC,OAAAC,EAEG,aAAA1I,EACJyI,IAAAA,EACAC,UAAAA,EACA1I,YAAAA,EACA2I,OAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAC,MAAAA,EAGAC,GAAAA,EAAAA,aAAAA,EAAAA,OAAAA,EAGArO,KAAAA,EACAsO,cAAAA,EACAC,IAAAA,EACAC,SAAAA,EACAC,SAAAA,EACArJ,MAAAA,EACAsJ,MAAAA,EAAAA,EACAC,GAAAA,CAAAA,EACAC,IAAAA,GAAAA,GACAC,CACF,OAAAC,GACA,aAAAC,CACA,EAAIvN,GAAA,CAAA,GAAEsN,CAAAA,IAAAA,gBAAAA,KAAAA,EAAAA,IAAQC,GAAAA,CAAAA,gBAAAA,KAAAA,CAAAA,IAAiBvN,GAASuM,EACpCiB,GAA2BvJ,GACfJ,GAAiBI,CAAAA,qBAAcJ,CAAA,IAClC0I,EAAAA,IAIT,MAAAkB,EAAAvB,GAAA,IAAA1N,IAAAgE,GAAA,QAAA,IAAA,gBAAA,EAAA,CAAAhE,CAAA,CAAA,EACF3B,EAAA,IAAA,CACF,MAAA6Q,EAAA,CAAA,EAAA1N,GAAA,MAAAA,EAAA,KAAAA,GAAA,MAAAA,EAAA,YAAAA,GAAA,MAAAA,EAAA,QAAAA,GAAA,MAAAA,EAAA,UAAAA,GAAA,MAAAA,EAAA,gBAAAA,GAAA,MAAAA,EAAA,eAAAA,GAAA,MAAAA,EAAA,MAEMyN,GAAAA,GACJ3P,GAAA4P,EAA2B7K,CAI7BhG,MAAU0F,GAAMC,GAAA,MAAA,QAAA,UAAA,EACd,IAAMkL,GAAoB,GAStBD,GAAAA,YAAyC,CACrClL,GAAWC,KAAAA,KAAYE,EAAAA,IAAkBiL,GAAA,cAAA7P,IAC3C8P,GAAU,KAAA5N,EACL6N,GAAAA,GAELtK,CAAAA,EACUqK,IACZpL,GAAA,MAAA,QAAA,WAAAD,EAAA,CAEF,CACU7C,EAAAA,CAAAA,EAAAA,EAAI5B,IACN2E,MAAAA,EAAcyJ,GAAA,IACtBtI,EAEQ5D,SAAe,EAAA,SADzB,KAIA,CAAA4D,CAAKA,CAAAA,EAAY,CAAAkK,GAAAC,EAAA,EAAApQ,EAAA,CAAA,CAAA,EACjBqQ,GAAuBpK,IAChBqK,GAAAA,EAAAA,CAAAA,CAAAA,EACT,eAAQC,GAAAC,EAAA,EAEFA,GAAqBJ,CAAAA,GAAAA,WAE3BC,WAAiCnQ,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,UAAA,KAAA,CAC3B4P,MAAAA,EACN,CAAA,GAEsBtR,MAAAA,GAAAA,MAAAA,GAAmByF,QAASwB,OAGhD,GAFIzF,GAEJ,CAAA8N,EACA,OAAgBiC,GACZZ,KAAAA,CAAeY,MAAAA,EACnB,EAAIA,GAA6BA,IAAAA,GAAAA,CAAAA,EAE3B,GAAAF,EAAA,CAAE1P,MAAAA,GAAAA,MAAAA,EAAAA,GAAAA,SAAAA,kBAAAA,MAAAA,CAAU4P,GAAAA,CAAAA,CAAAA,CAClB,CAAA,EAGAD,GAAe,QAAAE,GAAA,CAAA,EAAA,SACbC,UAAgC1Q,QAAS0E,GAAAA,cACvC,CAAA6L,GAAA,QAAA,KAAAI,IAAAA,GAAA,KAAAb,GAAA,EAAA,CAAA,CAAA,CAAA,MACSlP,IAAA,MAAAA,GAAA,SACT8P,GACF9P,GAAA,OAAAkP,IAAA,CAAAS,GAAA,QAAA,KAAAI,IAAAA,GAAA,KAAAb,GAAA,EAAA,CAAA,GAEAY,MAAAA,CASF,GAAAF,GACEE,MAAAA,EAKA,CAGK,CAAA,MACFF,GAAAA,IAAAA,eACIE,EAAAA,EAAAA,CACT,OAAAJ,GAAA,CAAAM,GAAA,WACFA,GAAA,QAAA5Q,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,UAAA,KAAA,CAEMiQ,QACN,CAAA,GAEsB3R,MAAAA,GAAmByF,QAASwB,MACrC0G,CAEX,MAAAiE,EAAA7C,EAAA,MAAA5G,EACA0J,EAAgB7Q,EAAwBhB,IAAAA,CAAAA,MAAAA,CAAa,GAAA,MAAA0B,CAAA,GAC9C6P,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EACT,CAAAO,EAAAC,EAAA,EAAAlR,EAAA,EAEM+Q,CAAAA,KAAiCzJ,EAAAA,EAAAA,SAAAA,EACjC0J,iBAA6B7Q,OAE7BgR,EAAoBC,MAAAA,GAAwBpR,CAClD,GAAM,CACN,MAAOqR,GAAAA,MAAqBC,GAA0BtR,EAAkBoO,CAAA,EAClEmD,GAAmBC,GAAe9D,CAAAA,EAAAA,SAAAA,MAAAA,EAAAA,EAAAA,CAAAA,CAExC,MAAMyD,CAAAA,CACJ,EACEM,EAAkB,SAChBxE,CAGMlL,GAAAA,EAIV,CAAAuP,GAAY,SAAA,EACV9R,GAAAA,CACF,MAAAsO,EAAA,MAAAE,GAAAnN,EAAAX,CAAA,EACFgR,GAAApD,CAAA,EAEAwD,GAA2B,SAAY,CACrC,MAAKzQ,CAAIyQ,GAAA,OAAA,CACTA,EACA,EACEI,EAAyC7Q,GAAAA,CAAAA,CACzCqQ,aAAAA,EACAI,UAAAA,EAAgC,KAEhC9R,EAAe,YACf8R,EAA8BrE,EAAA,EAChC,CAAAiB,GAAAoB,EAAA,GACFmC,IAGmBxE,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAU,OAAM1I,EAAA,MAAA,CAC3B,cACF4M,MAAAA,sBAAiC1F,IAAA,UAAA,WAAA,EAAA,GAC7B,MAACyC,CAEgB,mBAAAiC,GAAA,CAAA,EACrB,mBAAAA,GAAA,CAAA,EACF,mBAAAA,GAAA,CAAA,EAEDjC,sBACH,CAAA,CAEA,EAEIxI,SAAS,CAAA+F,IAAA,SAAAlH,EAAA,MAAA,CACD,MAAA,WACD,SAAA,CAAAnB,EAAA,IAAA,CACL,SAAA,yBAAwC,CACxC,EAAAA,EAAA,IAAA,CACA,SAAAmB,EAAA,KACA,KAAA+J,MACF,OAAA,SAEC7C,IAAAA,sBACY,SAAA,CAAA,sBAAArI,EAAAI,EAAA,CAAUD,KACnBH,UAAA,CAAG,CAAA,CAAA,CACHA,CAAA,CAAAG,CAAAA,CAEI8D,CAAAA,EAAAA,cAA2BpB,EAAAA,EAAAA,CAAAA,SACpB,CAAA7C,EAAA,SAAA,CAAA,SACHA,EAAAuO,GAAA,CAAqBpO,WAENH,OAAK,SAAM,EAAA,CAAA,CAAa,CAAA,EAC1CmB,EAAA,OAAA,CACD,SAAA,CAAAA,EAAA,MAAA,CAGK,MAAA,OACXhB,SACEH,CAAAA,EAAA,IAAA,CAAAG,4BACe,CAAY,EAAAH,EAAA,IAAA,CAAe,SAAA,wCAAA,CAAE,CAAA,CAAA,CAE5CmB,EAAAA,EAAA,MAAA,CAAAhB,MAAAA,uBACOY,SAAM,CAAAI,EAAA,MAAA,CAAMhB,MAAAA,mBACfA,SAAG,CAAAgB,EAAA,MAAA,CACHnB,MAAA,gBAAG,SAAA,CAAAA,EAAA,IAAA,CAA0C,MAAA,qBAE/CmB,SAAA,KAAA,CAAW,EAAAnB,EAAA,IAAA,CAAsBG,SAC/BgB,QAAA,CAAW,CAAA,CAAA,CAAkBhB,EAAAA,QAC3B,CAAKY,MAAM,gBAAeZ,UACxBH,EAAA,IAAA,CAAGe,MAAM,qBAAoBZ,SAAC,MAAA,CAAM,EACpCH,EAAA,IAAA,CAAAG,SAAG,aAAA,CAAS,CAAC,CAAA,CACV,CACLgB,CAAA,CAAA,EAAKJ,EAAM,MAAA,CAAeZ,MAAAA,QACxB,SAAS,CAAAgB,EAAA,MAAA,CAAA,SAAqB,CAAAnB,EAAA,OAAA,CAC9BA,SAAA,IAAA,CAAA,EAAG,YAAA,CAAA,CAAA,EAAemB,EAAA,MAAA,CACd,SAAA,CAAAnB,EAAA,OAAA,CAERmB,SAAA,IAAW,CAAA,EAAA,YAAA,CAAA,CAAOhB,EAAAA,QAChB,CAAAA,UACEH,EAAA,OAAA,CAAAG,SAAM,IAAQ,CAAA,EAChB,QAAA,CAAA,CAAK,CACLgB,CAAA,CAAAhB,CAAAA,CACE,CAAA,EAAAgB,EAAM,MAAA,CAAE,gBACV,SACAA,CAAAA,EAAA,OAAA,CAAA,CAAA,EAAAnB,EAAA,OAAA,CAAAG,MAAAA,UACE,SAAMH,EAAA,SAAA,CAAE,KACV,SAAM,MAAA,OACF,MAAA,QAERmB,SAAA,GAAW,SAAAnB,EAAAI,EAAA,CAASD,KACX,OACK,KAAA,IAASA,IAAAA,MACnB,CAAa,CAAA,CAAA,CAAe,CAAA,CAAA,CAAa,CAAA,CAAA,CAAgB,CAAAA,CAAAA,CAClD,CAAA,EAAAlB,GAAMkC,EAAAC,EAAA,CAAA,SAAOd,CAAK,CAAA,CAAA+L,GAAAlL,EAAA,MAAA,CAAA,MAAA,gBAAQ,SAAQ,CAAAA,EAAA,IAAA,CAAA,SACjC,CAAAnB,EAAA,IAAA,CACH,SAAA2L,CACH,CAAA,EAAA,+CAAA,CAAA,CACD,EAAA3L,EAAAuO,GAAA,CAIPpN,QAAAA,aAEe,QAAAzB,GAAA,CAAeS,EAAAA,gBACxB,EAAAA,EAAAA,YACEkM,CAAA,CAAIV,CAAW,CAAA,CAEjB,CAAA,EACA3L,CAAAA,CAAAA,IAAa,CAAA,gBAAA,KAAAuM,EAAA,GAAAvM,EAAA,MAAA,CAAA,IACFqM,GACTtP,IAAAA,GAAAA,uBACgB0P,GAAA,mBAAA,EAAA,GACd/M,QAAkBA,GAAA,CAClBzC,EAAAA,OAAqBoP,YACvB3M,EAAA,OAAA,MAAA8M,EACA9M,EAAA,OAAA,IAAA8M,GAKGD,EAAAA,OAAAA,gBAAAA,aAAAA,EACD7M,EAAA,OAAA,IAAA6M,IAIY7M,EAAA,OAAA,MAAA8M,EACV9M,EAAAA,WAAsB8M,EAEtB9M,EAAAA,eAEE0J,EACF1J,wBACF,OAAAA,GAAA,CACFA,EAAWA,OAAAA,UAAS8O,IAAAA,QAAsB,EACxC9O,GAAE0J,CACG,MAAAqF,GAAA,SAAA,cAAA,QAAA,KACWA,GAAA,WAAA,KAAA,CAClB,mBAAA,EAAA,CACF,EACYA,GAAA,MAAA/O,EAAA,OAAA,SACG,OAAAA,EAAA,OAAA,OACX0J,GAAAA,UAAiBsF,EAAAA,OAAY,EAAA,CAAA,EAC3B,MAAAC,GAAA,GAiDEC,GA/CW1S,CAAS2S,GAAAA,aAAAA,EAAAA,EAAsBF,GAAAA,EAAA,EAAA,KAAAG,GAAA,aAAApP,EAAA,OAAA,MAAAiP,GAAA,EAAAA,GAAAA,EAAA,EAAA,KAAAG,GAAA,aAAA,EAAApP,EAAA,OAAA,OAAAiP,GAAAA,GAAAA,EAAA,EAAA,KAAAG,GAAA,aAAApP,EAAA,OAAA,MAAAiP,GAAAjP,EAAA,OAAA,OAAAiP,GAAAA,GAAAA,EAAA,EAAA,IAAA,EAAA,IAAA7H,IAAA,CACxCgI,IAAAA,GAAAA,EACgBC,GAAA,EACrBC,GAAA,EACMC,GAAAA,EACAC,QAAAA,GAAAA,EAAW9F,GAAO8F,GAAAA,OAAAA,IAAAA,EACrBC,IAAUzP,GAAAA,EAAAA,EAadqP,IAAuBjI,GAAArE,GAAA,CAAA,EACjB2M,IAAAA,GAAAA,GACAC,CAAAA,EAqBJC,IAAQxI,GAAArE,GAAA,CAAA,EAER,MAAQ8M,GAAAzI,GAAA,OAAA,EACR,MAAQ,CAAA8H,GAAAW,GAAAR,GAAAQ,GAAAP,GAAAO,GAAAD,GAAAC,EAAA,CACR,CAAA,EACa,IAAAC,IAAA,CACN1I,KAAAA,CAAAA,GAAAA,MAASwI,EAAC,EAAAG,GAAAD,EAAA,EACV1I,MAAAA,UAAS,KAACiI,EAAA,KAAAC,EAAA,KAAAM,EAAA,GACfA,CAAKxI,EACPkG,GAAA0C,EAAA,CACMH,MAAAA,CACC,CAIS,CAGlB,CAAMG,EAAAA,EAAAA,SAAAA,CACJ,SAAA1P,EAAU+O,IACV,QAAA9P,EAAmC,SAAAlC,EAErCiQ,WAAAA,OACA5Q,SAAQuC,EAAMyQ,SAAAA,CAAAA,CAAAA,CAAQM,CAAAA,CAAAA,EAAAA,EAAW,MAAA,CAAA,uBAEjC,cAAA,MAAA,CAEJ,EAAAvO,EAAA,OAAA,CAGJnB,SAAA,CAAA,CAAA,CAAAoM,GAAApM,EAAA,OAAA,CAAAG,MAAAA,MAEIqC,SAASvD,aACTlC,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EAAAA,OAAAA,CACA4S,MAAW,MACXC,SAAU9E,CAAAA,EAAAA,EAAAA,WAEX,CAAA,EAAA,YAAA,CAEH9K,CAAAA,EAAAA,CAAAA,CAAAA,GAAAmB,EAAA,OAAA,CAAW,MAAA,MAA6B,SAAA,CAAAnB,EAAAI,EAAA,CACxCe,KAAA,kBACKiL,CAAY,CAAA,EAAYE,IAAA,YAAAA,GAAA,IAAAuD,GAAA1O,EAAA,OAAA,CAAKhB,MAAC,MAChC,SAAEsL,CACDtK,OAAA,CAAA,CAAA2O,GAAA3O,EAAAC,EAAA,CAAY,SAAA,CAAA,IAAApB,EAAA,OAAA,CAAKG,MACfH,qBAAW,SAAA8P,CAAA,EACb,CAAA,CAED,CAAA,CACC,CAAA,GAAY9P,EAAA,MAAA,CAAKG,MAAAA,OACV,IAAM,OAAO,QACpB4P,GAAA,CAEDzD,SAAYuD,CACX,CAAY,EAAK1P,wBAEZ2P,CACD3P,OAAA6P,GAEE/D,EAAA,CAAMlL,OAAAA,CAAM,CAAA,CAAsB+O,CAAuB,CAAA,EAE5D3O,EAAA,MAAA,CAEJ,MACDnB,uBACEe,SAAM,EAAA8K,GAAA,YAAAA,EAAA,QAAA,GAAA7L,EAAA,MAAA,CACF,MAAA,4BACwB6L,EAAA,IAAA,CAAA,CAChBZ,KAAAA,EACX,MAAAvN,GACwB,WAAAuS,EAAA,EACvBC,cAA+BtE,MAAAA,iBAAAA,GAAAA,mBAAAA,EAAAA,GAAQ,IAAA,OACzC,SAAA,CAAAzK,EAAA,IAAA,CAEFA,SAAA,CAAAnB,EAAAmQ,GAAA,CAAW,KAAAC,UAEI,CAAA,EAAA,IAAA,CAAA,CAAAH,IAAAjQ,EAAAI,EAAA,CAAkBD,KACnBmB,eAAO8O,KAAAA,GAAAA,CAAM1S,CAAAA,CAAAA,CAAOuS,EAAAA,EAAAA,IAAAA,CAC1B9O,wBAAA,CACU,OAAA6O,GACOtS,GAAA,CAGX,OAAAkO,CAAA,CAAMzL,CAEVA,CACY,CAAA,CAAA,CAAOiQ,EAAMxE,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,EAAmB,MACvCqE,CACI,MAAM,QAAA,SAAoB,CAAA9O,EAAAwM,EAAA,CAAA,SAChC,EAAA,GAEH3N,EAAA,QAC2B,IAAA,CACvBkQ,gBAAgCtE,EAAAA,oBAAAA,CAAQ,QAAA,YAC1C,cAAAuB,GACA,SAAApQ,EAbU0F,yBAefiK,EAAA,CAAA,YAAA,EAAA,CAAA,CAAA,CAGM,EAAA,CAAA,CAAOvM,EAEdmC,SAAU,CAAA,CAAA,CAAAwH,GAAA,QAAA9J,EAAA,OAAA,CACN4N,MAAAA,uCACW5N,EAAA,OAAA,CAEbzB,MAAAA,6CACEtB,SAA6B6M,GAAA,IAAAuG,GAAArQ,EAAA4C,GAAA,CAC3B0N,IAASD,EAAA,aACTE,KAAepD,IACfpQ,IAAAA,GAAAA,EAAAA,WAAAA,KAAAA,EAAAA,IAAAA,GACAyT,SAA0B9D,GAAAA,YAAAA,EAAAA,GAEtB,CACN,CAAA,CAAA,EACE,CACN,EAAA1M,EAAA,OAAA,SAGQe,SAAM0P,GAAAC,CAAA,CAAA,CAA6BvQ,EAAAA,IAAAA,WACvC,CAAA,CAAA,EAAAgB,EAAYwM,EAAA,CAAA,MACT7D,gBACQ,WACShH,GAAAA,EACT,YACGuN,CAAuC,eAC3B5E,CAAIxO,EAE3B,oBAAA,CACG,QAAA,YAGV+C,cAAA2Q,EAAaD,SAAAA,EAAevQ,yBACGuM,EAAA,CAAA,WAAA,EAAA,CAAA,CAAA,CAIjCvL,EAAAA,CAAAA,CACQ,EACNmB,SAAU,CAAAtC,EAAA,OAAA,CACN4N,MAAAA,WACW6C,GAAAG,CAAA,CAEbrS,CAAAA,EAAAA,IAAAA,YAAiByB,EAAA,KAAA,CAAA,CAAA,CAAA,CACf/C,CAAAA,EAAAA,EAAAA,EAA6B,CAAA,MAClB,gBAAA,GAAA2Q,EAET7Q,SAAAA,CAAAA,EAAAA,OAAAA,CAAAA,MAC0B2P,EAC5B,SAAA+D,GAAAvE,CAAA,CAAA,CAAA,MACE,OAAA,CACN,CAAA,EAAA,CAAA,CAAAR,GAAAvK,EAAA,MAAA,CAAEhB,MAAAA,gBAEF,SAAayQ,CAAAA,SAAAA,IAAAA,EAAAA,OAAAA,CAAezQ,SACzBsQ,WACSI,KAEN,CAER1P,SAAU,EAAA,CACF,CAAA,CACFyM,CAAAA,CAAAA,CAOJzN,CAAAA,CAEA,CAAA,CAAA,CAA2BA,CAAAA,EAAAA,CAAAA,CAAAA,OACG,CAAC,GAAAyN,EAGjC,MACE,uBACA,SAAW5N,EAAA,MAAA,CAAA,MAAgB,mBAEzB,SAAgB0L,EAAAA,MAAAA,CAAUvL,MAAAA,yBACC,SACbgO,GAAAhN,EAAA,MAAA,CACZ,MAAC,gBACI,MAAA,GAAA,KAAA,MAAA0M,EAAA,UAAAA,EAAA,MAAA,GAAA,CAAA,qBAAA,KAAA,MAAAA,EAAA,QAAAA,EAAA,MAAA,GAAA,CAAA,cAAA,KAAA,MAAAA,EAAA,OAAAA,EAAA,MAAA,GAAA,CAAA,WAEV,SAAA,CAAA7N,EAAA,MAAA,CACG,SAAA6N,EAAA,kBAAA,IAAA,QAAAA,EAAA,KAAA,QAAAA,EAAA,MAAA,EAAA,IAAA,EAAA;AAAA,wBAELA,EACS,iBAAA,OAAAA,EAAA,kBAAA,EAAA,IAAA,EAAA,GAAA;AAAA,6BACJD,EAAAA,KAAAA;AAAAA,uBACE,CAGNzN,EAEAH,EAAA,MAAA,CAAW,MAAA,oBAAkBG,OACQA,yBAE/BgB,GAAA0M,EAAA,UAAAA,EAAA,MAAA,GAAA,IACQ,uBAAA,IAAAA,EAAA,UAAAA,EAAA,SAAAA,EAAA,MAAA,GAAA,GACNrK,CAME,CAAUrD,EAAAA,QAEZ,CAAAA,MACG0N,wBAILA,SAAAA,CAAAA,EAAAA,QAGS,MAAA,KACe,SAAA,CAAA7N,EAAA,OAAA,CAGtBA,MAAA,+DAAA,CACQ,EAAA,IAAA,UAAA,CAAA,CACC,EAAA,IAAAmB,EAAA,OAAA,CAAA,MAAA,KAEL,oBAIA,MAAA,6DAKC,CACH,EAAA,IAAA,SAAA,CAAA,CAEFA,EAAAA,IAAAA,EAAA,OAAA,CAAW,MAAA,KAAuBhB,SAChCgB,CAAAA,EAAA,OAAA,CAAY,MAAA,4DAAA,CAAIhB,EAAAA,IAAAA,QACd,CAAA,CAAA,CAAA,CAAY,CAA+D,CAAA,CAE7E,CAAA,EAAMH,EACNmB,MAAAA,CAAA,MAAY,gBAAIhB,SAAAA,yBACd,CAAA,CAAY,CAA6D,CAE3E,CAAA,CACA,CAAA,EAAAH,EAAA,MAAY,CAAIG,MAAAA,uBACd,SAAAH,EAAY,MAAA,CAA4D,MAAA,gCAE1E,OAAO,CAAA,CAAA6N,EAAA,SACH7N,EAAA,MAAA,CAAA,MAGRA,yBAAA,SAAWmB,EAAA,SAAA,CAAehB,KAAC,SAA4B,MAAA,uBAEtD,SAAA8N,KAAA,UACF,QAAA,IAAA,CAGTI,GAAW,EAAsBlO,SAC/B,CAAAH,EAAA,MAAA,CACQ,MAAA,wCAAAiO,KAAA,UAAA,UAAA,EAAA,GACNhS,MAAU4R,CAAa1N,yBAEvB,MAAW,uBAAA,KAAwBA,CACjC,CACO,EAAA,kBAAA,GAAA,CAAA,CAAA,CACC,CAAA,CAC4B,CAAA,CAEhCkO,CAAmB,CAAA,CAAA,CACrB,EAAArO,EAAA,SAAA,CAAEG,SAAAA,EAAAA,GAEF,CAAA,KAAAlB,EAGG,SAAAlC,EACM,cAAAgO,EACqB,qBAAAuD,CACF,CAC1B,CAAA,CAAE,CAAA,CAEe,CAAA,CAAA,CAKb,CAAA,CACL,CACF,MAAAwC,GACD,EAAA,SAER9Q,GAAA,CAAAG,KAAAA,EAEIlB,SAAAA,EACAlC,cAAAA,EACAgO,qBAAAA,EAAAA,IAAAA,CACAuD,CAAAA,EAAAA,QACD,GAAC,CACIrP,EAAC,OAGd,KAAA,KACE,CAET,MAAA+L,EAEA,SAAiCC,EAEjC,cAAwB8F,CACtB9R,EAAAA,EAAAA,EACAlC,EAAAA,IAAAA,EACAgO,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,MAC6B,EAAAnO,EAAA,IAAA,EAAC,CAC7B,GAAAa,EACD,KAAA8N,EAAkB,IAAA1I,EACZ,SAAAsJ,EACJrP,OAAAA,EACAC,aAAAA,EACAgO,KAAAA,WAEF,MAAAsB,CAEA,EAAApN,EACMkL,EAAC6G,EAA6BvT,CAAA,EAE9B,CAAEA,UAAAA,EAAI8N,eAAAA,EAAM1I,UAAAA,EAAKsJ,WAAAA,EAAUH,SAAAA,EAAQD,UAAAA,EAAcE,OAAAA,EAAMJ,oBAAAA,EAAQQ,UAAAA,EACnEpN,eAAAA,EACIkL,SAAAA,EAEA,KAAA8G,CAAA,EACJC,GAAAA,CAAAA,EACAC,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EACAC,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EACAC,EAAAA,IAAAA,CACAC,GAAAA,EAAAA,CACAC,MAAAA,EAAAA,GAAAA,QAAAA,IAAAA,gBAAAA,EACAC,IAAAA,GACAC,SAAAA,CACAC,GAAAA,GAAAA,EACAC,EAAAA,UACAC,CAAAA,GAAAA,EAAAA,CACMX,MAAAA,GAAAA,EAAAA,KAAAA,SAAAA,GAAAA,MAGDY,MAAAA,GAA2B,MAAA7G,KAAiB,OAAA,MAAA,CAC5C0B,EAAQoF,KAA2B,KAAA,GAAA7S,EAAA,QAAA,IAAAlC,CAAA,GAE1B,KAAA,WACJ,MAAA,EACe0E,QAAAA,EACvB,CAAIoI,EACSyD,GAAA,SAAA,cACwB,SAAA,CAAA,EAAA,GACrB7P,GAAAA,GAAAA,SAAAA,CAAAA,CAAAA,EAGZ,MAAwBwB,CAAAA,CACpB,CACF,GAAA,CAAA4K,EACEkI,OAA8D,GAAAnQ,IACxDiI,EAAA,CAAAiI,EACC,EAAA,EAAA,MACE,CAGPxE,GADI3O,EAAAA,UACJ2O,EACUA,OACGA,EAAAA,SAAiB,EAClC,MAAA0E,EAAAhH,EAAA,GAAA,SAAA,cAAA,MAAA,CACF,KAAY,CACV5O,CAAAA,EACF,GAAA,CACF,MAAA6V,GAAA,MAAAD,EAEgB,GAAhBE,EAAKrI,SAAAA,EAAWoI,GAAA,OAAA,CAEZrQ,SAA8BqQ,GAAA,CAAA,EAEhCH,EAAcK,EAAA,EACd7D,EAAA,CACF,aAAA6D,GAEAhI,UAAAA,CAEA,CAAIkC,CAAO,CAEX6F,MAAAA,CAEAA,EAA2BlH,OAAAA,CAEvBvN,CAAc,IAId,CACF,EAAA,CAAAwB,EAAA8L,IACQpM,EAAAA,IAAAA,CACRuT,GAAAA,IAEAE,KAEEC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EACqB,MAAAC,EAAAC,IAAA,UAAA,CAAAC,EAAExB,EAAAA,EAAAA,EAAAA,EAAAA,EAAcnH,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,GAAW4I,EAAA,EAAA7V,EAAA,EAAA,EAClD,OAAAuE,EAAAC,EAAA,CAAA,YACU,MAAA,CACVhF,MAAAA,UACA8V,SAAAA,CAAAA,EAAAA,OAAAA,CACF,SAAA,CAAAb,EAAArR,EAAA,OAAA,CACC,MAAA,MACL,SAAA,aACQ+K,CAAAA,EAAAA,EAAc5J,EAAA,QAAA,CAExBrF,MAAgB,yBACM,CAAA,aAAA,IAAAkE,EAAA,OAAA,CAClBoS,MAAAA,KACF,SAAAvB,GAAA9E,EAAA,CACQW,SAAO,EAEjB,EAEA,CAAO8F,CAAAA,CACP,CAAOE,EAAAA,EAAAA,OAAAA,CAAAA,CAAAA,EAAyClB,GAAAxR,EAAA,OAAIpD,CAC7C+V,MAAAA,sBAGL,OAAA,CAAAxS,EAAAA,GACEH,EAAA,OAAA,CAAW,MAAA,aAASG,SAClBgB,SAAA,CAAA,CAAA,CAEI,CAAA,EAAMJ,IAAMI,EAAA,OAAA,CAAA,MAAM,UAAW,SACzB4K,CAAAA,CAAAA,CAAAA,GACJ/L,EAAA,SAAA,CAAOe,KAAM,SAAeZ,MAAC,mBAE3B,MAAY,eAAIA,QAAAA,KACcsS,GAChB,EAAA,CAAA,EACV,IACG,gBAGTzS,EAAA,OAESA,CAAY,SAAAiR,CAAA,CAAa,CAAA,CAAW,EAC9CK,EAAYtR,GAAAA,CAAMe,OAAM,CAAa,OAAA,SAAA,IAAc,EAC9C,eACR,CAAY,MAAA,CAGD,OAAA,IACC,CACA,EACNb,eACEuS,SAAAA,SACF,SAAA,OACAG,WAAI5S,EAAA,SAAA,CAAMG,KAAAA,SAEVA,MAAO8Q,OAAkB,MAAA,QAG7B9P,SAAMmR,EACI,SAAAtS,EAAAI,EAAA,MACElE,OACV,KAAA,IACgB,IAAA,MAAA,CACP,CAAA,CAAA,EAAA,SAEG,CAAA6U,GAAA,CAAArE,IAAAvL,EAAAC,EAAA,CACV,SAAA,CAAAD,EAAAsC,GAAA,CACF,QAAA,IAAA,CACMxG,EAAA,YAAA,CACG,YAAA,CACA,OAAA,KAAA4U,IAAA,YAAAA,GAAA,OAAAtG,CAAA,GACThI,CACE,CAEQ,EACA,SAAA,CAAAvD,EAAAI,EAAA,CACIkS,KAAAA,IAAAA,CAAQnS,EAAAA,SAEb,CAAM,SAAA,CAAA,YAAAgM,CAAA,CAAA,CAAY,CAAA,CAAA,CAAA,EAAQhL,EAAAsC,GAAA,CAAQ,QAAA,IAAA,CACjCoP,GAAA,EAAA,GAIR1S,SACEgB,CAAAA,EAASf,EAAA,iBAELnD,CAAAA,EAAAA,EAAO4C,OAAc,CAAA,SACN,eAAA,CAAA,CAAA,CAC2B,CACxC,EAAAsB,EAAAsC,GAAA,CACF,QAAA,IAAA,CACFgP,GAAA,EAAA,CAAEtS,EAEG,SAAM,CAAAH,EAAAI,EAAA,CACXe,KAAAA,QAAA,CAAAhB,EAAAA,EAAAA,OAAM,CAA0B,SAAA8Q,EAAA,oBAAA,kBAAA,CAElC9P,CAAAA,CAAS,CAAA,KACQA,EAAAsC,GAAA,CACboP,QAAAA,IAAAA,CACFC,GAAA,EAAA,CAAE3S,EAEG,SAAM,CAAAH,EAAAI,EAAA,CACXJ,KAAAA,MAAA,CAAA,EAAMA,EAAA,OAAA,CAAoB,SAAA,uBAAA,CAE5BmB,CAAAA,CAAS,CAAA,OACQ,CAAA,CAAA,CAAA,CACbsR,CAAAA,EAAAA,EAAAA,GAAAA,CACF,KAAA5P,EAAE1C,OAAAA,SAEG,SAAM,CAAAH,EAAAI,EAAA,CAAQ,KACnBJ,UAAA,CAAAG,EAAAA,EAAAA,SACyD,MAClD,oBACC,SAGRgB,GAAS0B,CAAA,CAAA,CAAA,CACP3C,CACE4S,CAAAA,EAAAA,EAAAA,MAAAA,CACF,MAAA,kBAAE3S,SAAAA,CAAAA,EAEFH,GAAK,CAAA,QAAM,IAAA,CACXA,GAAAA,CAAM,UAAA,UAAA,UAAA6C,CAAA,EAA4BkQ,GAAA,aAAA,CAGtC/S,OAGJmB,GAAS,qBAAA,CAAO0B,CAAY,EAAQ1C,SAClCH,CAAAA,EAAKI,EAAA,CAAM,KAAA,MAAA,CACXJ,EAAAA,EAAA,OAAA,CAAa,SAAA,MAAA,CAAmBG,CAAAA,CAA6B,CAAA,GAAC,iCAAA,UAAAtB,GAAA,iCAAA,WAAA,YAAAA,GAAA,eAAA,CAEhEsC,IAAAA,CAAA,KAAWA,EAAAsC,GAAA,CAAiBtD,QAC1BgB,IAACsC,KAGO,UAAA,MAAA,CACQuP,IAAAA,CACVD,CAAAA,OACU,CACV3W,MAAAA,+BAAe,CACf2W,CACF,EACF,SAAA,CAAA/S,EAAAI,EAAA,CAAED,KAAAA,OAEG,CAAA,EAAMH,EAAA,OAAA,CACXA,SAAA,QAAA,CAAA,CAAAG,CAAM,CAAA,CAAI,CAAO,CAAA,EACT,CAAA,CACT4E,GAAWkO,IACY,CACpBpQ,SAAAA,CAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAAAA,CAEA1B,QAAAA,IAAS,GACQ,SAAA,GACT,SAAA,CACF4D,GAAAA,CACElC,MAAAA,EAAAA,MAAAA,EAAAA,GAAAA,SAAAA,SAAAA,IAAAA,YAAAA,GAAAA,KAAAA,CAAAA,EAAAA,OAAAA,EACDwP,EAAAa,CAAA,IACS,SAAA,EACV9W,eAAe+P,CAAA,EAAA,EACf5C,EAAqC,sBAAA,GAAA,OACvCtM,EAAA,sBAAA,SACF,MAAA,CAAEkD,EAEG,OAAA,CAAM,CAAA,IACX,EAAY,SAAO,CAAAH,EAAAI,EAAA,CAEtB,KAAA,QAAA,CAEH,EAAC4Q,EAAAA,OACD7P,CAAAhB,SACGuD,CAAAA,WAAAA,CAECvC,CAAS,GAEL+Q,CAAAA,EAAAA,EAAAA,GAAAA,CACA,YAAa,YACP,UAAA,SACIgB,SAAAA,OAGEvU,MAAAA,GACR0T,MAAAA,EAAAA,EAA+B,CAC/BH,SAAAA,CAAAA,EAAAA,EAAAA,CACW,KAAA,MACXjV,CAAAA,EAAAA,EAAAA,QACAA,MAAAA,YACF,SAAY,CAAA,SAAAkP,EAAA,GAAA,CACV/P,CAAAA,EAAAA,EAAAA,OAAcsD,CACdwS,MAAAA,CACF,aAAA,MACC,EACL,SAAA,CAAAlS,EAAAI,EAAA,CAAED,KAEFH,MAAK,CAAM,EAAAA,EAAAI,EAAA,CACXe,KAAA,eAAA,CAAAhB,CAAAA,CAAuB,CAAQ,CAAA,CAAA,CAGjCH,EACEmT,SAAYnT,EAAA,MAAA,CACF,MAAA,YACD,SAAAwJ,GAAA,IAAA4J,GAAApT,EAAAyD,GAAA,CACF,QAAA,IAAA,CACP4P,EACE,SAAA,GAAAlT,SACO,CAAM,GAAA,CACXgB,MAAA+R,EAAA,MAAAlI,EAAA,GAAA,SAAA,SAAA6G,IAAA,YAAAA,GAAA,KAAApU,CAAA,EAAA,KAAA,CAAY,SAAA2V,CAAA,CAAY,EACxBjS,EAAA+R,CAAA,EACShB,EAAA,SAAA,EACSa,GAAA,UAAA5G,CAAA,QAAA1C,GAAA2J,CAAA,CAAA,EAAA,EAChBnW,EAAA,sBAAA,GAAA,OAAEkD,EAEFH,sBAAK,SAAM,MAAA,CACXA,EAAK,OAAA,EAAM+S,GAAA,mBAAA5G,CAAA,EAAA,CAAkB,CAAA,IAE/B,EACHhM,YAEDiT,CAAA,CAAA,CAAW,CAAA,CAAA,CAAA,CAEE,CAAA,EAAApT,KACQ,CACbkS,QAAAA,GACA,QAAa,CAAAZ,EACP,aAAAnQ,EAAAC,EAAA,CACI8R,SAAAA,CAAAA,EAAAA,EAAAA,CAIAE,KAAAA,OAAAA,CAAAA,EAAAA,EACD,OAAA,CACGzU,SAAAA,CAAAA,YAA6B,GAAA,CACrC0T,CAAAA,CAAAA,CACAH,CAAAA,EACAa,kBAAAA,SAGA9V,QAAAA,IAAAA,CACAA,EAA6BqW,SAAAA,GAAAA,UAE7BlX,GAAAA,CACA8V,GAAAA,EAAAA,CACW,MAAAgB,EAAA,MAAAlI,EAA4B,GAAA,SAAA,SAAA6G,IAAA,YAAAA,GAAA,KAAApU,CAAA,EAAA,QAAA,EACzC4U,EAAAa,CAAA,EACChB,EAAA,SAAA,EACLa,GAAA,cAAA5G,CAAA,EAAA,CAAA,KAAEhM,CAIL,MAAA+S,EAAA,MAAAlI,EAAA,GAAA,SAAA,SAAA6G,IAAA,YAAAA,GAAA,KAAApU,CAAA,EAAA,MAAA,EACE4U,EAAAa,CAAA,EAGGhB,EAAA,SAAA,EACHa,GAAA,YAAA5G,CAAA,EAAA,EAEPpI,EAAAA,sBACE,GAAA,QAAA5D,EACEH,sBAAK,SAAM,MAAA,CACXmB,EAAA,OAAA,EAAMmQ,EAAyByB,GAAA,sBAAA5G,CAAA,EAAA,EAGjB4G,GAAA,oBAAA5G,CAAA,EAAA,CAKhB+F,CACA,IACM,EACF,SAAIZ,EAAUnQ,EAAAC,EAAA,CACN8R,SAAAA,CAAAA,EAAAA,EAAAA,CAGEvU,KAAAA,SACR0T,CAAAA,EAAAA,EAAAA,OAAAA,CACAH,SAAAA,CAAAA,YAAAA,CAAgC,CAChCa,CAAW,CAAA,CAAuB,CAAA,EAAA5R,EAC7BC,EAAA,CACC8R,SAAAA,CAAAA,EAAAA,EAAAA,CAGEvU,KAAAA,OACR0T,CAAAA,EAAAA,EAAAA,OAAAA,CACAH,SAAAA,CAAAA,UAAAA,EAAgC,GAAA,CAChCa,CAAW,CAAA,CAAqB,CAClC,CACA9V,CAAAA,CAAAA,CACAA,CAAAA,CAAAA,CAA6BqW,CAAAA,EAAAA,CAAAA,GACnBf,IAAA,WAAAvS,EAAAuT,GAAA,CACVnX,OAAAA,EACA8V,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EAAAA,GAA8B,CAC9B,QAAAhB,GAAcQ,EACD,aAAA1R,EAAA,OAAA,CAA+B,SACrC0R,EAAA,2BAAA,aAAAzS,EAAA,MAAAA,EAAA,QAAA,GACL8T,CAAW,EACb,kBAAA,SACF,MAAA,MAAA,SACCT,EACL,QAAA,IAAA,CAAEnS,EAGAgB,SAAA,GAAAhB,SAAAA,CACO,GAACE,CAAc,IACpBc,EAAAhB,GAAMuR,EAA0BwB,EAAA,MAAAlI,EAAA,GAAA,SAAA,QAAAb,EAAA,OAAA,EAAA,WAGlChK,EACO,MAAA6K,EAAA,GAAA,SAAA,QAAAb,EAAA,OAAA,EAAA,SACLhJ,GAAAhB,EAAcgM,CAAAA,EAAU+F,EAAO,SAAA,CAC/B,OAAAxS,EAAA,CAEQ,MAAAA,CAAA,EAMjBwS,EAAA,OAAA,EAGM,IAER,EAEGsB,SAAsB9B,EAAAA,SAAAA,CACtB3N,KAAAA,SACE5D,SACGuR,GACGA,EAAA,aAAA,KAEA,kBAAAR,GAAAQ,EAAA,SAAA,GAEU,SAAAY,EACZ,SAAApB,EAAA/P,EAAAC,EAAA,CACIkR,SAAAA,CAAAA,EAAAA,OAAAA,UACK,WACbJ,CAAAA,EAAAA,EAAAA,OAAAA,CACa,SAAA,WACX,CAAI,CAAA,CACF,CAAIgB,EAAAA,EAAAA,EAAAA,EAAAA,CAEJ,mBAA4B,CAQR,SAAA,WAEN,CAAA,EAEPlT,EAAA,OAAA,CACa,SAAA,WAER,CACZ,CAAA,CAEA,CAAIkT,EAAAA,EAAAA,EAAAA,EAAAA,CAAiBb,SAAAA,CAAAA,EAAAA,EAA+B,CACpDH,KAAAA,MAAgC,OACzBxS,EAAG,OAAA,CACV6J,SAAO,QACP2I,CAAAA,CAAAA,CACF,CAAA,EAAA,QAAA,CAAA,CACC,CACL,CAAA,CAAA,CAAE/R,CAAAA,CAEF,CAAA,EAAA,CAAA,CAAAqS,GACOxS,EAAAc,GAAA,CAAA,MACG,QACR,QAAA,IAAA,CAAqD+R,GAC3CP,EAAAA,CAAQnS,EAGhBA,SAAAA,EAAAA,GACE,CAAA,KAAA8L,EAAe,OAAAJ,EACf,QAAM,IAAAgH,GAAA,EAAA,CAAA,CAAA,CAAgB,CAAA,EAAA,CAAA,CAAAH,IAGxBvR,EAAAL,GAAA,CAAAX,MAAAA,QACE,QAAA,IAAM,CAAS2S,GACf,EAAA,CAAA,EAAM,SAAgB9S,EAAAyT,GAAA,CAAA,UAGxBtS,EAAAA,QAAAhB,QAAAA,IAAAA,GACO,EAAA,CAAA,CAAA,CAAM,CAAA,EAAA,CAAA,CAAAwS,IAAU3S,EAAAc,GAAA,CAAA,MAAA,QAAM,QAAY,IAAC,CAAA2R,GAG1C,EAAA,CAAA,EAEI,SAEXzS,EAAA0T,GAAA,CACI,QAAAzU,EAER,KAAEuT,EAEO,qBAAAL,GAAA,GACSA,CAAA,CACbU,EACF,QAAA,IAAAJ,GAAA,EAAA,CAAA,CAAEtS,CAEiB,CACjB8L,CAAAA,CAAAA,CACAJ,CAAAA,CACyC,SAC1C4D,GAAA,CAAAb,EAAAG,EAAAC,CAAA,EAAA,CAAA,MAGJ2E,EAAEjB,MAAAA,QACK3D,EAAA,MAAAC,EAAA,IACJjO,EAAM,OACNJ,GAAe,IACbmS,EAAAA,EACFa,GAAA,GAAExT,EAAAA,GAIAQ,EAAAA,EAAemS,IAChBc,EAGFjB,KAAAA,IAAAA,EAAAA,CAAAA,EAEO,CAAA/D,EAAAG,EAAAC,EAAA4E,CAAA,CAAA,CAEJnB,SAAAA,GAAAA,EAAAA,CACF,GAAA,CAAA5P,EAAE1C,OAEe,MACfqC,EAASvD,IAAAA,IAAAA,CAAAA,EACTgN,CACAqC,KAAAA,EACE+D,SAAAA,CAEF,EAAAwB,EACAlT,EAAAA,EAAe8R,QAAAA,MAAAA,EAAAA,EAAAA,QAA6B,MAAA,EAAA,EAAA,OAC7CtR,EAAAC,EAAA,CAAC,SAEL,CAAAD,EAAA,OAAA,CACD,MAAA,qBAEN,SAAA,CAAA2S,EAAA,GAAA,CAGA,CAAA,EAAA9T,EAAoB,MAAA,CAAI+O,CAAAA,EAAAA,EAAO,OAAA,CAC7B,SAAkBgF,CAClB3X,CAAQuC,CAAAA,CACR,CAAIiV,CACJ,CACEA,SAAQI,GAAA,CACV,KAAA/H,EACU,OAAAJ,EACV,QAAAlL,CACEiT,EAAAA,CACF,MAAAK,GAAApI,GAAA,YAAAA,EAAA,IAAA,CAAA,CACQqI,KAAAA,EACR,MAAAxW,CACF,IAAA,GAAA0S,CAAA;AAAA,EAEA+D,SAAwBtR,KAAK;AAAA;AAAA,KAAA,GACtBA,EAAAA,GAAAA,CAAAA,GAAAA,EAAAA;AAAAA;AAAAA,EACCgR,CAAAA,GAAS,IACT,OAAA1S,EAAA,MAAA,CAAE2S,MAAAA,QAAM3L,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,EAAAA,SAAAA,CAAa0L,KAAAA,SACrBE,MAAAA,cACN,QACE3S,EAAAjB,SACEgB,EAAAf,EAAA,CAAY,KAAA,GAAA,CAAoBD,CAAQ,CAAM,EAC9CH,EAAM,SAAA,CACNG,SAAO4T,EAAAA,KAAAA,CAAY,SAAA,gBAAA,CACnB,CAEN,CAAA,EAAA5S,EAAA,OAAA,CAEA,SAA4B,CAAAnB,EAAA,IAAA,CAAEiM,MAAAA,CAAMJ,WAAAA,UAAQlL,EAAW,SAAAyT,CACrD,CAAMH,EAAAA,EAAAA,GAEI,CAAG7D,eAAAA,GAAM1S,KAAAA,CAAAA,CAAM,CAAO,CAAO,GAGvC,CAAA,CAAgD,CAAA,YAAqB,CAErE,UAAAyM,EACE,QAAAxJ,CAAW,EAAA,CAEP,KAAa,CAAA,MAAA7D,CAAe,EAAcoD,EAASS,EAAQR,CAAAA,GACpD,EAAAvD,EAAA,SAAA,EAACyD,CAAKgU,EAAAC,CAAA,EAAA1X,EAAA,CAAA,CAAA,EAAK,CAAA2X,EAAAC,CAAA,EAAA5X,EAAA,CAAA,CAAA,EAGpBoD,CAAAA,EAAAiC,CAAA,EAAAC,GAAAuS,GAAAA,EAAA,EAAA,CAAA,EAAAtU,EAAAA,KACEmI,EAAI,SAAA,GAAA,SAAkB,CAExBnH,GAAAA,CAAAhB,MAAAA,EACE,MAAArD,EAAA,GAAA,MAAA,KAAA,EACE4X,EAAO,KAAA,CAAApF,EAAAN,IAAAM,EAAA,MAAA,cAAAN,EAAA,KAAA,CAAA,EAAA,MACO2F,EAAA,MAAA7X,EAAA,GAAA,SAAA,QAAAqN,CAAA,EAAA,MAAA,OACdmK,EAAAM,CAAA,EAAEzU,EAEDiU,CAAAA,EAEHpU,EAAiB,SAAA,CAAA,MAAe,CAACoU,EAAAA,OAAAA,CAAa,CAAC,IAC1C,EACJ,CAAAS,CAAA,CAAA,EAET,KAAA,CAAAC,EAAAC,CAAA,EAAAnY,EAAA,EAAA,EAEA,OAAS6W,EAAoB,MAAA,CAAEtJ,MAAAA,QAAWxJ,GAAAA,4BAAW,SAAA,CAAA,CAAA,CAAAA,GAAAX,EAAA,SAAA,CAC7C,KAAA,SAAElD,MAAAA,cAAUuB,QAAIsC,EACtB,SAAO0H,EAAmBjI,EAAA,CACpB,KAAQkU,GACd,CAAA,CACA,CAAM,EAAAtU,WAAoB,CAE1BlE,SAAgBkE,EAAA,KAAA,CACdsI,SAAoB,uBACpB,CAAa,CACX,CAAI,EAAAnH,EAAA,OAAA,CACF,SAAc,CAAAkT,EAAA,OAAYjX,EAAAA,OAAc,CACxCiX,MAAMW,kBACAT,SAAAA,EAAAA,IAAAA,GAAAA,CAGNnY,MAAQuC,EAAI4V,EAAA,KAAAU,GAAAA,EAAA,KAAA3X,EAAA,EAAA,EAAE+W,OAAAA,EAAAA,KAAAA,CAAOE,SAAAA,EAAAA,SAAAA,CAAwB,KAAA,SAC7CD,MAAc,SAAAY,EAAA,UAAA,EAAA,GACdV,SAAAA,IAAgD,UAChDlM,QAAoB,IAAA,CACVA,EAAA,SAAA,YACK,CACfA,GAAkB,CACpB4M,EACC,MAAApY,EAAA,GAAA,MAAA,QAAAQ,EAAA,EAAA,EAAA,SAAA,OAAA,CACW,WAAA,CAAA6M,CAAA,CAEhB,CAAO2K,EAGM,MAAAhY,EAAA,GAAA,MAAA,QAAAQ,EAAA,EAAA,EAAA,SAAA,OAAA,CAAW,WAAA,CAAA6M,CAAA,CAAA,CACjBxJ,EAC2BsB,GAAuBtB,MAAAA,GAC5C,OAAA,EAAM,MAAAuU,EAAA,8BAAA,wBAAA,CAAK,CAAA,IAGpB/U,EACM,SAAA,CAAAH,EAAAI,EAAA,CAAyB,KAAA,cAAA,CAE/B,EAAAJ,EAAA,OAAA,UACkB1C,EAAA,KACd,CAAU,CAAA,CAAA,CAAiB6C,CAEvB,CAAA,CAGA,CAAA,CACEA,CAAAA,EAAAA,cACEH,EAAA,IAAA,CAAA,MACO,WAAA,SACGA,EAAAuT,GAAiB,CAAe,SAClB,CAAA,CAEpBjL,CAAAA,EAAAA,IAAAA,QAAoBtI,EAAA,IAAA,CACpB,MAAA,WACM,SAAA,uBACF,CAAA,EAAAA,EAAA,IAAA,CACQlD,MAAAA,WAGFqY,SAAAA,WAAsB,CAAA,EAAAhU,EAAA,SACvB,CAAA,KAAA,SAEGrE,MAAAA,SAGFqY,QAAAA,IAAAA,EAAsB,EAAA,EAAA,SAAA9M,IACvB,UACL,SAAA,CAAArI,EAAAI,EAAA,CAEO,KAAA,OAAA,KAAA,GAEPhE,CAAAA,EAAAA,IAAAA,EAAAA,QACAkM,SAAAA,UACAiB,CACE2L,CAAAA,CAGF,CACF,CAAA,CAAA,CAAA,EAAAJ,GACC9U,EAAAc,GAAA,CACL,MAAA,QAAEX,QAAAA,GAAAA,CAEGT,EAAA,SAAMA,EAAA,eAAcqV,EACzB,EAAA,CAAYvR,EAAa,SACnBxD,EAAAoI,GAAA,CAAA,KACN0M,GAAA,YAAAA,EAAA,KAER,QAACM,GAAA,CAEWA,EAAA,QAAA,WACLnT,IACCoT,EAAM,EAAA,CAAE,CAAA,CACf,CAEH,CAAA,CAAA,CAAS,CAAA,CAAW,CAEpB,SAAS3B,GAAA,CAAA,QAAAlR,EAAoB,KAE/BrB,EAAA,qBAAAmN,EACO,IAAA,CAAA,EAELpO,QAAAA,EAAAA,IAAe6U,CAA4B,CACrB,EAAU5U,CAE3B,KAAA,CAAM,MAAArD,CAAY,EAAAuB,EAAK,EAAE,CAAAgK,EAAMC,CAAA,EAAA1L,EAAA,SAAA,EAAQ0Y,EAAOzZ,EAAA,IAAA,EAAAC,OAAAA,EAC5C,IAAA,CAAA,IAEVgZ,EACO,OACEQ,EAAA,SAAA,CAAAC,IACNrV,aAAgB,IAAA,UACVR,GAAAA,EAAAA,EAAaA,SAAiB,QAA9BA,MAAAA,EAAAA,KAAAA,EACFqV,EAAAA,GAAAA,GAEJ,IAAA,CAAE5U,cAEU,CAAA,CACkB7C,EAAAA,CAAAA,CAAAA,EAEtB8X,EAAAA,OACK,MAAA,QACT,GAAA,yBACAL,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,EAAAA,SAA6B,CAC/B,KAAA,SAAE,MACH,cAEJ,QAAApU,EACE,SAAAX,EAAAI,EAAA,CAET,KAAA,GAEA,CAAA,CAA0B,CACxBoC,EAAAA,EAAAA,SAAAA,CACM+S,SAAAA,EAAAA,IAAAA,mCACuB/S,GAAA,YAAAA,EAAA,YAAAA,GAAA,YAAAA,EAAA,KAAA,CAAA,CAAC,CAAA,KACd,OAAA,CAAC,SAAArB,EAAA,OAAA,CAChB,SAAAzB,GAAA,CACKA,EAAA,eAAA,EAAgB,MAAAuM,EAAdnP,IAAAA,SAAAA,EAAAA,MAAAA,EAAc,IAAA,MAAA,GACfuL,GAAAA,YAAAA,EAAmB,WAAAkN,GAAA,YAAAA,EAAsB,UAC1CD,WAAyB,GAEf,SAAA,CACVlO,GAAAA,CACAkO,MAAuBpC,EAAc,MAAApW,EAAA,GAAA,SAAA,QAAA0F,GAAA,YAAAA,EAAA,EAAA,EAAA,KAAA,OAAA,SACdyJ,CACvBqJ,CAAAA,EACIhN,EAAA,SAAA,EACRgG,EAAA4E,CAAA,EACavS,GACX5B,OAAkByW,EAAA,CACpBlN,EAAA,OAAA,EACG,OAAAkN,GAAA,YAAAA,EAAA,UAAA,gCAAA,CAGH,CAAA,OAEiB,SAAA,CAAAxV,EAAA,WAAA,CAAe,IAAAsV,EAAuB3U,KAAAA,OAAQR,aACpD,UAAM,SAAAoV,CAAA,CAAK,EAAApU,EAAA,SAAA,CAGpBnB,SAAA,CAAAA,EAAA,SAAA,CAAAG,oBACK,QAA2D,SAAAkI,IAAA,UAEhErI,QAAA,IAAA,CAAAG,GAAAA,MAAAA,KAGQ8I,SAAe,QACjB,CAAA,EAAA9H,EAAiB,OAAA,CACX8K,SAAAA,CAAO/C,EAASpH,GAAI,CACtBmK,OAAMwJ,GACRnN,OAAAA,IAAoB,SACpB,CAAC,EAAYtI,EAAA,SAAA,CACP,SAAAqI,IAAA,UACI6K,KAAAA,SAES,SACFjH,cAAAA,CAAAA,CAAAA,CAEb7P,CAAQuC,CAAAA,CACR2J,CAAAA,CAAAA,CACAgG,CAAAA,CACA3N,CAAQ,CAAA,CAAA,CAAA,CAERvE,CC5iDlB,SAASsZ,GAAa,CAAElT,QAAAA,EAASzF,SAAU4Y,EAAchV,QAAAA,CAAQ,EAAG,CAC5D,KAAA,CAAE7D,MAAAA,EAAOC,SAAAA,EAAUgO,cAAAA,GAAkB1M,EAAI,CAAEtB,SAAU4Y,CAAAA,CAAc,EACnEzK,EAAW,OAAO1I,GAAY,SAEpC1G,OAAAA,EAAU,IAAM,CACToP,IACHjO,EAAOuE,SAAU,GAAEgB,EAAQ/E,EAAG,IAAGV,CAAS,EAAC,EAAIyF,EACjD,EACC,CAACA,CAAO,CAAC,EAEZuF,GAAkBpH,CAAO,EAGvBQ,EAAA,MAAA,CACEJ,MAAM,QAQNZ,SAEC,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,oBAAoBb,QAASS,EAAQR,SAC/DH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVL,EAAC4V,GAAW,CACV7Y,SAAAA,EACAgO,cAAAA,EACAvI,QAAAA,EACAqI,aAAc,SAAY,CACxB,GAAIK,EACE,GAAA,CAKKjM,OAJM,MAAMnC,EAAMM,GAAGoE,SAASqU,OAAO,CAC1CtK,KAAM/I,EACNsT,eAAgB,EAAA,CACjB,OAES,CACV,MAAMV,EAAS,MAAMtY,EAAMiZ,GAAGC,OAAOhY,MAAM,CACzC+T,EAAGvP,EACHvC,KAAM,WACN1C,MAAO,EACP0Y,QAASlL,CAAAA,CACV,EACGqK,GAAAA,EAAO5T,SAAS5D,OACXwX,OAAAA,EAAO5T,SAAS,CAAC,EACf,GAAA,sBAAsB0B,KAAKV,CAAO,EAAG,CACxC0T,MAAAA,EAAa,IAAIC,IAAI3T,CAAO,EAC5B,CAAE4T,SAAAA,EAAUjO,SAAAA,CAAa+N,EAAAA,EACzB3K,EACJpD,EAASvC,QAAQ,MAAO,EAAE,EAAEA,QAAQ,MAAO,EAAE,EAC7C,IACAwQ,EACIhB,EAAS,MAAMtY,EAAMiZ,GAAGC,OAAOhY,MAAM,CACzC+T,EAAGxG,EACHtL,KAAM,WACN1C,MAAO,EACP0Y,QAASlL,CAAAA,CACV,EACGqK,GAAAA,EAAO5T,SAAS5D,OACXwX,OAAAA,EAAO5T,SAAS,CAAC,CAE5B,CACF,KAEOgB,QAAAA,CAEX,CAAA,CACD,CAAC,CAAA,CACC,CAET,CCtEA,SAAS6T,GAAO,CAAE1V,QAAAA,CAAQ,EAAG,CACrB,KAAA,CAAE7D,MAAAA,GAAUuB,EAAI,EAChB,CAACgK,EAASC,CAAU,EAAI1L,EAAS,SAAS,EAC1C,CAAC0Z,EAAQC,CAAS,EAAI3Z,EAAS,CAAE,CAAA,EACjC,CAACiY,EAAa5S,CAAM,EAAIC,GAAkBuS,GAAAA,EAAI,EAAG,CAAC,EAExD3Y,EAAU,IAAM,CACdwM,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAMpH,EAAO,MAAMsV,GAAGF,OAAOpV,KAAK,EAClC,GAAIA,EAAKtD,OAAQ,CACf,MAAM6Y,EAAKC,KACLC,EAAUzV,EAAK0V,UAAgBC,EAAIC,WAAWL,CAAE,CAAC,EACvD,GAAIE,EAAQ/Y,OAAQ,CAClB,MAAM0Y,EAAS,MAAME,GAAGF,OAAOS,QAAQJ,CAAO,EAC9CL,EAAOtB,KACL,CAAC1F,EAAGN,IACF,IAAI1P,KAAK0P,EAAEgI,SAAS,EAAEC,QAAAA,EACtB,IAAI3X,KAAKgQ,EAAE0H,SAAS,EAAEC,SAC1B,EACAV,EAAUD,CAAM,CAAA,MAEhBC,EAAU,CAAE,CAAA,CACd,MAEAA,EAAU,CAAE,CAAA,EAEdjO,EAAW,SAAS,OACV,CACVlM,SAAe,CACfkM,CAAkB,IACpB,EACC,CAAAuM,CAAA,CAAA,EACL,MAAIA,GAAYyB,GAAA,YAAAA,EAAA,QAAA,EAEVY,OAAAA,EAAAA,OAEN,cACOnW,SAAM,CAAA,CAAA,CAAAJ,GAAAX,EAAA,SAAA,eAECC,MAAK,cAASc,QAAMJ,EAAcT,SAASS,EAAAA,EAAAA,CAAQR,KAAAA,GACpD,CAAA,CAAM,CAAA,EAAKgB,EAAA,SAAA,CAGpBA,SAAA,CAAAA,EAAA,KAAA,CAAAhB,SACEgB,CAAAA,iBAAAnB,EAAAuT,GAAA,CAAI,OAAA,GACoB8B,OAAMhN,IAAA,SAAA,CAAA,CAACpM,CAAoB,CAAA,EAAaib,GAAAlX,EAAA,MAAA,CAC5D,MAEFA,gBAAKe,SAAM,uEAAA,CAAA,CAAeZ,CAAC,CAAA,EAI5BH,EAAA,OAAA,CAEHA,SAAAkX,EAAA/V,EAAAC,EAAA,CAAAjB,SAEIgB,CAAAA,EAAAA,KAAAA,CAAAhB,MAAAA,cACMY,SAAMuV,EAAA,IAAAa,GAAA,CAAahX,KAAAA,CAEb,UAAA6W,EAAEA,IAAAA,EAAWH,YAAAA,EAAKO,QAAAA,CAAaC,EAAAA,EAAYF,EAAAA,IAAAA,KAAAA,CAAAA,EAC3CG,OAAAA,EAAAA,KAAAA,CACN,UACEnW,EAAA,MAAA,CAAAhB,MAAAA,kBACOY,SAAM,CAAAI,EAAA,IAAA,CAAiBhB,SAC1BgB,CAAAA,EAAAf,EAAA,CAAAD,KAAAA,EACO,QAAA,QAACE,KAAMgX,GAAoB,CAAA,EAAc,IAAAlW,EAAA,OAAA,CAAK,SACnDA,CAAAA,CAAAA,CAAAkW,GAAAlW,EAAAC,EAAA,UACI,CAACiW,IAAAA,UACD,KAAArX,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,EAAAA,GAAEmX,CACU9U,CAAAA,CACJ,CAAA,CAAA,CAGkB,CAAA,EACvBxC,EAAA6D,GAAA,CAET7D,aAAYA,EAAA,OAAA,CACV+D,SAAAA,oBAAc,CAAA,EAAwB,kBAAM,SAC5CC,MAAkB,MAClBV,SAAM+E,IAAA,UACN1E,YAAsB,WACP,CACA,GAAA,CACP,MAAA6S,GAAA,OAAA,IAAAK,CAAA,EAGIL,GACC,MAAA,gDAEG,CACVjN,CAA+C,IACjD,EAEJ,SAAAvJ,EAAA,SAAA,CAAEG,KAAAA,SAGAF,MAAK,cACLc,SAAMsH,IAAA,UACN1E,SAAU0E,SAAY,CAAA,CACvB,CAAA,CAED,CAAQ,CAAA,EACIrI,EAAA,SAAA,CAEhBA,KAAAA,SACEC,SAAKoI,IAAA,UACL1E,mBACA5C,QAAM,SAAA,OAGAwW,GAAAA,EAAAA,CACJjP,EAAa,SAAA,EACXA,GAAAA,CACIiP,EAAA,MAAAza,EAAA,GAAA,SAAA,QAAAua,EAAA,EAAA,EAAA,OACc,MAAA,wCAGN,EACVjb,WAAe,EACfmN,MACAjB,CACAA,EAAA,SAAA,CACF,CACAA,OAAAA,YAAoB,CACtB,YAAA8O,EACApS,cAAAA,CAAqB,EAEnBuS,EAAAA,YAAAA,GACFta,EAAA,WAAA,EACAA,EACAA,SAAoB+C,EAAAwX,GAAA,CACtB,MAAAL,CAAA,CAAEhX,CAEQ,CAACgX,CAAAA,CAAAA,EAAAA,CAAe,CAAA,CAAA,CACnB,CAAA,EAAAb,EACP,OAAA,GAAAtW,EAAA,IAAA,CAER,SAACA,EAAA6D,GAAA,CAEFyS,aAAgBtW,EAAA,OACf,CAAAG,6BACc,CACV4D,EAAc,kBAAM,SAAkB,SAAMsE,IAAA,UAC5CrE,QAAkB,IAAA,WACI,GACP,SAAA,EACA,GAAA,CAGXsE,MAAAA,GAAW,OAAS,QAAAgO,EAAA,IAAAa,GAAAA,EAAA,GAAA,CAAA,EAChB7O,EAAA,SAAA,EACIkO,GAGNlO,MAAAA,CACO,MAAA,0CAAA,IACG,OAAA,CACVlM,CACAmN,IACAjB,EACF,SAAAtI,EAAA,SAAA,CAEF,KAAG,SACL,MAAA,eAAEG,aAEF,UACEF,SAAK,aAAA,CAAA,CACC,CAAA,CACgB,CAAA,CAAA,CACvB,CAAA,EAAAD,EAEO,IAAA,CAAA,SACG,kBAAA,CAAA,CAEhB,CAAA,CAAA,CAGH,CAAA,CAAG,CAAmB,SAEnBwX,GAAA,CAAA,MAAAL,CAGb,EAAA,OAEA,KAAA,CAAqBA,YAAAA,EAAS,QAAAE,CACtB,EAAAF,EAAEC,CAAaC,OAAAA,EAAYF,YAAAA,EAC3B,KAAAM,EAAEhN,iBAAAA,CAAQiN,EAAAA,EAAaD,IAAAA,EAAAA,GAAAA,YAAAA,EAAAA,UAAAA,YAAAA,EAAAA,QAAAA,EAAME,GAAAA,GAAAA,YAAAA,EAAAA,QAAAA,EAAqBP,EAAAA,GAAAA,EAClDQ,EAAgBC,GAAkB,IAAA,CAClCC,GAAAA,CAAAA,EACN,OACMC,MAAAA,EAAAA,EAAgC,KAAAC,GAAA,QAAA,KAAAA,EAAA,IAAA,CAAA,EACpC,GAAI,CAACF,EAAU,OACTG,KAAAA,CACN,KAAAC,CAAY,EAAAD,EACJC,OAAF,IAAA,gBAAAA,CAAA,CAAEA,EAASD,CAAAA,EAAAA,CAAAA,CAAAA,EACXE,OAAAA,EAAAA,EAAgBC,CACfD,SAAAA,EAAAA,MAAAA,CACLL,MAAUH,aACd,SACE,CAAAU,GAAAlX,EAAA,MAAA,CAAAhB,0BACE4X,EAAA,YAAA,EAAA,GAAW,MAAAA,EAAA,CAAY,aAEnB5W,OAAAA,CAAA,GAAA,EACU,CAAA,EACRuT,SAEM,CAAAkD,GAAA5X,EAAAI,EAAA,CACE,KAAA,MAAqC,GAEvC0X,GAAC3W,EAAA,OAAA,CAGNyW,SAAW5X,CAAAA,EAAAA,EAAAA,CAAW,KAAA,YAAA,CAAQ,EAE7BmB,IAAAA,EAAAA,QAAA,CAAAhB,SACEH,GAAAA,YAAAA,EAAK,MAAA,CAAA,CAACK,CAAK,CAAA,CAAY,CACvB,CAAA,EAAAc,QAA0BvD,CAAAA,MAAe,kBAAA,SAE5C,CAAA,CAAA,CAAA8Z,GAAA1X,EAAA,MAAA,CAGLmB,MAAA,qBAAW,SAAAuW,SACNA,EAAAA,MAAe1X,CAAKe,MAAM,oBAAoBZ,SAAEuX,CAAAA,CAAiB,CACnE,CAAY,CAAA,CAAA,CAAW,CAAA,CAAqBjN,CAAAA,CAAa,CC3OpE,SAAS6N,GAAW,CAAEC,KAAAA,EAAM1V,IAAAA,EAAKoM,MAAAA,EAAOC,OAAAA,EAAQvO,QAAAA,EAAUA,IAAM,CAAC,CAAE,EAAG,CACpE,OACEQ,EAAA,MAAA,CAAKJ,MAAM,wBAAuBZ,UAChCgB,EAAA,MAAA,CAAKJ,MAAM,eAAcZ,UACvBH,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,QAAQb,QAASA,IAAMS,EAAQ,EAAER,SAC3DH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EACPwC,GACC1B,EAAA,IAAA,CACE8C,KAAMpB,EACNuG,OAAO,SACPoP,IAAI,sBACJzX,MAAM,eAAcZ,UAEpBH,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,EAAC,IAACH,EAACI,EAAI,CAACC,KAAK,UAAA,CAAY,CAAC,CAAA,CAC9C,CACJ,CAAA,CACE,EACLL,EAAA,MAAA,CACEe,MAAM,gBACN0X,wBAAyB,CAAEvI,OAAQqI,CAAK,EACxC7D,MAAO,CACL,UAAWzF,EAAQ,KACnB,WAAYC,EAAS,KACrB,iBAAmB,GAAED,CAAM,IAAGC,CAAO,EACvC,CAAA,CACD,CAAC,CAAA,CACC,CAET,CC9BO,eAAe8C,GAAmBxQ,EAAUkX,EAAmB,GAAI,CACxE,GAAI,EAAClX,GAAAA,MAAAA,EAAU5D,QAAQ,OACvB,KAAM,CAAEd,MAAAA,CAAO,EAAGuB,EAAG,EAEfuD,EAAiBH,GAAMI,QAAQC,IAAI,gBAAgB,EACnD6W,EAAmBnX,EAASoX,OAAO,CAACC,EAAKvJ,KAK3C,CAACuJ,EAAIC,SAASxJ,EAAE7R,EAAE,GAClB,CAACib,EAAiBpJ,EAAE7R,EAAE,GACtB6R,EAAE7R,KAAOmE,GAETiX,EAAItU,KAAK+K,EAAE7R,EAAE,EAERob,GACN,CAAE,CAAA,EACL,GAAI,CAACF,EAAiB/a,OAAQ,OAAO,KAErC,GAAI,CAQF,OAPsB,MAAMd,EAAMM,GAAGoE,SAASyQ,cAAcjU,MAAM,CAChEP,GAAIkb,CACN,CAAC,GACyCC,OAAO,CAACC,EAAKjK,KACrDiK,EAAIjK,EAAEnR,EAAE,EAAImR,EACLiK,GACN,CAAE,CAAA,CAEN,MAAW,CAEV,OAAA,IACA,CACF,CCrBF,SAAwBE,GAAgB,CACtChc,SAAAA,EACAyT,yBAAAA,EAA2B,CAAE,EAC7B7P,QAAAA,EAAUA,IAAM,CAAC,CACnB,EAAG,CACK,KAAA,CAAE7D,MAAAA,EAAOC,SAAUkO,GAAoB5M,EAAI,EAC3C2a,EAAoBjc,EAAWA,IAAakO,EAAkB,GAC9DxK,EAAaC,GAAYzD,CAAM,EAE/B,CAACoL,EAASC,CAAU,EAAI1L,EAAS,SAAS,EAC1C,CAAC4E,EAAUyX,CAAW,EAAIrc,EAAS,CAAE,CAAA,EACrC,CAACsc,EAAUC,CAAW,EAAIvc,EAAS,EAAK,EAI1C,GAFJmL,GAAkBpH,CAAO,EAErB,CAACF,EAAW2Y,oBACP,OAAA,KAGH,KAAA,CACJ3b,GAAAA,EACA6S,QAAAA,EACAC,cAAAA,EACA/O,SAAU6X,EACVC,cAAAA,CAAAA,EACE7Y,EAAW2Y,oBAET,CAACV,EAAkBa,CAAmB,EAAI3c,EAAS,CAAE,CAAA,EAErD4c,EAAoB,MAAOhY,GAAa,CAE5C,GADI,EAACA,GAAAA,MAAAA,EAAU5D,SACX,CAACob,EAAmB,OACxB,MAAM/G,EAAgB,MAAMD,GAAmBxQ,EAAUkX,CAAgB,EACrEzG,GACkBsH,EAAA,CAClB,GAAGb,EACH,GAAGzG,CAAAA,CACJ,CACH,EAGIwH,EAAgBrM,GAAc,CAC7BmD,IACDnD,GAAW6L,EAAY,CAAE,CAAA,EAC7B3Q,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACI,KAAA,CAAEoR,KAAAA,EAAMhc,MAAAA,CAAAA,EAAU,MAAM6S,EAAcnD,CAAS,EACjDuM,GAAAA,MAAMC,QAAQlc,CAAK,EAAG,CACxB,GAAI0P,EAAW,CACb,MAAM5L,EAAW,CAAA,EACjB,QAASiB,EAAI,EAAGA,EAAI/E,EAAME,OAAQ6E,IAAK,CAC/BD,MAAAA,EAAU9E,EAAM+E,CAAC,EACjBoX,EAAarY,EAASsY,KAC1B,CAACxK,EAAGyK,IAAMzK,EAAE7R,KAAO+E,EAAQ/E,IAAMgF,IAAMsX,CACzC,EACKF,EAMHA,EAAWG,OAAOzV,KAAK,GAAG/B,EAAQwX,MAAM,EALxCxY,EAAS+C,KAAK,CACZyV,OAAQ,CAAE,EACV,GAAGxX,CAAAA,CACJ,CAIL,CACAyW,EAAYzX,CAAQ,CAAA,MAIpByX,EAAsBgB,GAAA,CACpB,MAAMC,EAAcD,EACpB,UAAWzX,KAAW9E,EAAO,CAC3B,MAAMmc,EAAaK,EAAYJ,QAAYxK,EAAE7R,KAAO+E,EAAQ/E,EAAE,EACzDoc,EAGHA,EAAWG,OAAOzV,KAAK,GAAG/B,EAAQwX,MAAM,EAFxCE,EAAY3V,KAAK/B,CAAO,CAI5B,CACO0X,OAAAA,CAAAA,CACR,EAEHf,EAAY,CAACO,CAAI,EAEjBF,EAAkB9b,CAAK,CAAA,MAEvByb,EAAY,EAAK,EAEnB7Q,EAAW,SAAS,OACV,CACVlM,SAAe,CACfkM,CAAkB,KACpB,EAEJ8E,EAAAvR,EAAA,EAAA,EAEMuR,OAAAA,EAAAA,IAAAA,EACNtR,GAAAA,YAAAA,EAAgB,QAAA,GACVud,EAAAA,GACFJ,EAA0BI,CAAA,IAErBI,EAAA,EAAA,EACLA,EAAAA,QAAiB,GACG,EACtB,CAAAJ,EAAA9I,CAAA,CAAA,EACFzU,EAAoByU,IAAAA,OAEpBzU,EAAgB,WACS+C,EAAA4B,EAAA,wBAAA,YAAA5B,EAAA,MAAApB,GAGnBgD,EAAW0Z,EAAuB1c,CAEtC,EAAA,CAAAgD,EAAA,sBAAA,OAAA,CAAA,EACa0Z,EAAAA,MAAAA,CAEf,GAAA,6BACO1c,MAAG,QAA6BsD,SAAM,KAAQC,SAAS,CAAAhB,EAAA,SAAA,CAAIG,KAAAA,SACtDF,MAAK,cAASc,QAAMJ,EAAcT,SAASS,EAAAA,EAAAA,CAAQR,KAAAA,GACpD,CAAA,CAAM,CAAA,EAAKH,EAAA,SAAA,CAElBA,SAAAA,EAAA,KAAA,CAAAG,YACE,UAAA,CAAA,CAAgB,CAAA,EAAeH,EAAA,OAAA,CAEjCA,SAAAwB,EAAA,OAAA,EAAAL,EAAAC,EAAA,CACGI,SAAAA,CAAAA,EAAAA,KAAkB,CACjBrB,MAAAA,gBACMY,SAAMS,EAAA,IAAAgB,GAAA,SAAerC,MAAAA,EACRqC,EAAYA,EAAA,EAAA,EACnBwO,EAAAA,GAAAA,EAAgCxO,EAAAA,MAAAA,EAAAA,EAAAA,SAAAA,YAAAA,EAAAA,SAAU,EAAA,GAC1CqU,OAAAA,OAAiBpZ,CACvB,UACE6b,KAAAc,EAAA5X,EAAA,SAAA,YAAA4X,EAAA,QAAA,GAAApa,EAAA,MAAA,CAAAG,MAAAA,kBAESY,SAAMyB,EAAA,OAAA,IAAAvC,GAAAD,EAAAI,EAAA,OAIH,OAAA,SACEia,UAAQ,OAAA,EACRC,CAAW,EACb,MAAM,GAAAra,CAAA,OAAA,CAERc,CAAAA,CAAe,CAAA,EAElBf,EAAA,MAAA,CAGLA,MAAA,wBAAKe,SAAMf,EAAAuO,GAAA,CAAuBpO,QAAAA,EAE9BqC,UAAAA,GACA+X,aAAAA,EACAvJ,yBAAAA,CAAAA,CACAR,CAAAA,CAAAA,CAAmD,CACpD,EACEqG,CAAC,CAAA,CAAA,CACJ,CAAA,EAEPxO,IAAA,UAAA6Q,EAAAlZ,EAAAwa,GAAA,CAEFnS,SAAAA,GACC6Q,IAGMO,GAEA,EACF,SAAAzZ,EAAA,SAAA,CAAEG,KAAAA,SAGAF,MAAK,cACLc,QAAM,IAAA0Y,EAAA,EACNvZ,qBAA4B,CAAA,CAC7B,CAAA,EAEOF,EAAA,IAAA,CAGVA,MAAAA,yBAAGe,SAAM,UAAA,CAAA,EAAyBsH,IAAA,WAAArI,EAAA,IAAA,CAAW,MAGnC,WACPe,SAAMf,EAAAuT,GAAA,CAAUpT,OACjBH,EAAO,CAAA,CAAO,CAAA,CAAA,CAAE,CAAA,EAGrBqI,IAAA,UAAArI,EAAA,IAAA,CACD,MACY,WACXe,SAAMf,EAAAuT,GAAA,CAAUpT,OACjBH,EAAO,CAAA,CAAO,CAAA,EAAEqI,IAAA,QAAArI,EAAA,IAAA,CACf,MACW,WACXe,SAAM,wBAAA,CAAA,EAAWf,EAAA,IAAA,CAEpBA,MAAAA,yBAAGe,SAAM,iBAAA,CAAA,CAAyB,CAAA,CAAe,CAAG,CAAA,CAEjD,CCvMb,SAAwB0Z,GAAc,CAAEla,IAAAA,EAAKma,KAAAA,EAAM/Z,QAAAA,CAAQ,EAAG,CACtDF,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAC0d,EAAgBC,CAAiB,EAAIhe,EAAS,EAAK,EACpDie,EAAiBC,GAA2B,EAAI,EAChDC,EACJta,EAAWua,SAASD,iCAAmC,CAAA,EACnDE,EACJ,CAAC,CAACP,GACFA,IAASG,GACT,CAACK,GAAY,CAACR,CAAI,EAAG,CAACG,CAAc,CAAC,GACrC,CAACE,EAAgCjB,KACxBY,GAAAA,IAASzF,GAAKiG,GAAY,CAACR,CAAI,EAAG,CAACzF,CAAC,CAAC,CAC9C,EAEF,OACE9T,EAAA,MAAA,CAAKJ,MAAM,QAAQC,SAAS,KAAIb,SAC7B,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,oBAAoBb,QAASS,EAAQR,SAC/DH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVc,EAAA,SAAA,CAAQJ,MAAM,cAAaZ,UACzBH,EAAA,KAAA,CAAAG,SAAI,mBAAA,CAAqB,EACzBH,EAAA,MAAA,CAAKe,MAAM,cAAaZ,SACtBgB,EAACkC,GAAK,CACJC,MAAM,MACNC,WACEvD,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,SAAQZ,SAClCH,EAACI,EAAI,CAACC,KAAK,OAAOE,IAAI,OAAOD,KAAK,IAAA,CAAM,CAAA,CAClC,EACTH,SAAA,CAEDgB,EAACsC,GAAQ,CACPE,SAAUgX,EACVza,QAASA,IAAM,CACb0a,EAAkB,EAAI,CACxB,EAAEza,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,WAAA,CAAa,EACxBL,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,CAAC,CAAA,CACd,EACTgb,IACCha,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbkb,GAAM7a,EAAKma,CAAI,CACjB,EAAEva,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,OAAA,CAAS,EACpBL,EAAA,OAAA,CAAAG,SAAM,OAAA,CAAW,CAAC,CAAA,CACV,CACX,CAAA,CACI,CAAA,CACJ,CAAC,CAAA,CACA,EACRgB,EAAA,OAAA,CAAMuZ,KAAAA,EAAY9H,IAAI,OAAMzS,UAC1BH,EAAA,IAAA,CACE0U,MAAO,CACL2G,WAAY,WACZC,SAAU,QACZ,EAAEnb,SAEDI,CACA,CAAA,GACD0a,GAAqBN,IACrB3a,EAACub,GAAgB,CACfZ,eAAAA,EACAa,eAAgBd,EAChBtG,KAAM7T,CAAAA,CACP,CACF,CAAA,CACG,CAAC,CAAA,CACJ,CAET,CCrFA,SAASkb,GAAM/d,EAAOge,EAAKC,EAAK,CAC9B,OAAOzH,KAAKyH,IAAIzH,KAAKwH,IAAIhe,EAAOie,CAAG,EAAGD,CAAG,CAC3C,CAEA,MAAME,GAAiBnH,GACrBA,GAAK,OAAUP,KAAK2H,KAAKpH,EAAI,MAAS,MAAO,GAAG,EAAIA,EAAI,MACpDqH,GAAiBrH,GACrBA,GAAK,SAAY,MAAQP,KAAK2H,IAAIpH,EAAG,EAAI,GAAG,EAAI,KAAQ,MAAQA,EAE3D,SAASsH,GAAU,CAACnN,EAAGG,EAAGC,CAAC,EAAG,CACnCJ,EAAIgN,GAAchN,EAAI,GAAG,EACzBG,EAAI6M,GAAc7M,EAAI,GAAG,EACzBC,EAAI4M,GAAc5M,EAAI,GAAG,EACzB,IAAIiG,EAAI,YAAerG,EAAI,YAAeG,EAAI,YAAeC,EACzDgN,EAAI,YAAepN,EAAI,YAAeG,EAAI,YAAeC,EACzDiN,EAAI,YAAerN,EAAI,YAAeG,EAAI,YAAeC,EAC7DiG,OAAAA,EAAIf,KAAKgI,KAAKjH,CAAC,EACf+G,EAAI9H,KAAKgI,KAAKF,CAAC,EACfC,EAAI/H,KAAKgI,KAAKD,CAAC,EACR,CACLhH,EAAI,YAAgB+G,EAAI,WAAeC,EAAI,aAC3ChH,EAAI,aAAgB+G,EAAI,aAAeC,EAAI,YAC3ChH,EAAI,YAAgB+G,EAAI,YAAgBC,EAAI,WAAY,CAE5D,CAEO,SAASE,GAAU,CAACC,EAAG9M,EAAGN,CAAC,EAAG,CACnC,IAAIiG,EAAImH,EAAI9M,EAAI,YAAgBN,EAAI,YAChCgN,EAAII,EAAI9M,EAAI,aAAgBN,EAAI,aAChCiN,EAAIG,EAAI9M,EAAI,aAAgBN,EAAI,aAEpCiG,EAAIA,GAAK,EACT+G,EAAIA,GAAK,EACTC,EAAIA,GAAK,EACT,IAAIrN,EAAIqG,EAAI,aAAgB+G,EAAI,cAAgBC,EAAI,YAChDlN,EAAIkG,EAAI,cAAgB+G,EAAI,aAAgBC,EAAI,aAChDjN,EAAIiG,EAAI,aAAgB+G,EAAI,aAAgBC,EAAI,YAEpDrN,OAAAA,EAAI,IAAMkN,GAAclN,CAAC,EACzBG,EAAI,IAAM+M,GAAc/M,CAAC,EACzBC,EAAI,IAAM8M,GAAc9M,CAAC,EAEzBJ,EAAI6M,GAAM7M,EAAG,EAAG,GAAG,EACnBG,EAAI0M,GAAM1M,EAAG,EAAG,GAAG,EACnBC,EAAIyM,GAAMzM,EAAG,EAAG,GAAG,EAEnBJ,EAAIsF,KAAKmI,MAAMzN,CAAC,EAChBG,EAAImF,KAAKmI,MAAMtN,CAAC,EAChBC,EAAIkF,KAAKmI,MAAMrN,CAAC,EACT,CAACJ,EAAGG,EAAGC,CAAC,CACjB,CCnDA,IAAA9H,GAAA,CAAA,mBAAsC,WAAA,eAAA,yBAAA,wBAAA,4FAAA,0BAAA,yDAAA,aAAA,aAAA,wBAAA,aAAA,SAAA,KAAA,KAAA,aAAA,IAAA,GAAA,KAAA,GAAA,IAAA,EAAA;;;;;;;89ECAtC,MAAeoV,GAAA,+fCAAC,GAAA,8lBCAAC,GAAA,yjCCGT9S,GAAQ,IACR+S,GAAY,GAEX,eAAeC,IAAoB,CACxC,KAAM,CAAE5f,MAAAA,CAAO,EAAGuB,EAAG,EACfse,EAAW7f,EAAMM,GAAGwf,aAAatf,KAAK,CAC1CC,MAAOmM,EACT,CAAC,EACKmT,EAAO,CAAA,EACb,IAAIC,EAAa,EACjB,EAAG,CACD,KAAM,CAAEpf,MAAAA,EAAOgc,KAAAA,CAAK,EAAI,MAAMiD,EAAShf,OACvC,GAAI+b,IAAQhc,GAAAA,YAAAA,EAAOE,UAAW,EAAG,MACjCif,EAAKtY,KAAK,GAAG7G,CAAK,EAClBof,UACOA,EAAaL,IACtBI,OAAAA,EAAK7H,KAAK,CAAC1F,EAAGN,IAAMM,EAAEc,KAAK2M,cAAc/N,EAAEoB,IAAI,CAAC,EAChDhU,EAAQuC,QAEJke,WAAKjf,IAAQ,CAEb6D,GAAA,QAAA,IAAA,eAAA,CACAA,KAAAA,EACEob,UAAI,KAAA,IAAA,CACJ7F,CAAAA,CACF,EAAC,CAAC,EAEN6F,CAEA,CACF,MAAAG,GAAA,GAAA,GAAA,GAAA,IAEMA,eAAeC,IAAgB,CAC9B,GAAA,CACD,KAAA,CACI,KAAAJ,EAAEA,UAAAA,CAAM7F,EAAAA,GAAAA,QAAAA,IAAAA,cAAAA,GAAAA,CAAAA,EAAU,OAAS6F,GAAA,MAAAA,EAAQ,QACrC,KAAK,MAAQ7F,EAASgG,IAExBN,KACAA,GAJ0D,MAAAA,GAAO,CAOnE,MAAW,CACX,MAAOhd,EACP,CACF,CACF,MAAAwd,GAAA,SAAA,cAAA,KAAA,EAEaC,GAAyBC,GAAO,CAC7C,GAAA,CAAOA,EAAMD,MAAAA,GACX,GAAIC,EAAQ,QAAE,GAAS,IAAA,GAAA,MAAA,GACvBF,GAAIE,UAAgBA,EACpBF,MAAOG,EAAoBH,GAAA,iBAAA,WAAA,EAC3B,OAAAG,EAAkB,OACD,MAAA,KAACzf,OAAiB0R,GAAAA,EAAA,UAAA,KAAA,EAAA,QAAA,WAAA,EAAA,CAAA,EADU,ICtD/C,SAASgO,GAAU,CAAEnd,SAAAA,CAAS,EAAG,CAC/B,GAAI,OAAOA,GAAa,SAAiBA,OAAAA,EACzC,KAAM,CAACiU,EAAMmJ,CAAO,EAAI3gB,EAAS,EAAE,EACnCd,OAAAA,EAAU,IAAM,CACd0hB,QAAQvH,QAAQ9V,CAAQ,EAAEsd,KAAKF,CAAO,CAAA,EACrC,CAACpd,CAAQ,CAAC,EACNiU,CACT,CCgBO,MAAMsJ,GAAkB,EAEzBC,GAAQ,CACZ,YACA,WACA,gBACA,OACA,SACA,WACA,SACA,UACA,YACA,YAEA,EAEIC,GAAY,CAChB1M,UAAW,mBACX7T,cAAe,gBACfC,KAAM,OACNugB,OAAQ,6BACR7H,OAAQ,SACR,mBAAoB,UACpB8H,UAAW,YACXC,WAAY,QACZC,QAAS,UACTC,SAAU,WACVC,SAAU,UACZ,EACMC,GAAc,CAClB7gB,KAAM,CACJ,CACE8W,KAAM,UACNhE,KAAM,IAAA,CACP,EAEHyN,OAAQ,CACN,CACEzJ,KAAM,aACNhE,KAAM,QACNnQ,KAAM,UAAA,EAER,CACEmU,KAAM,WACNhE,KAAM,WACNnQ,KAAM,OACNme,YAAa,iCACbC,YAAa,EAAA,CACd,EAEHJ,SAAU,CACR,CACE7J,KAAM,WACNhE,KAAM,WACNnQ,KAAM,OACNme,YAAa,iCACbC,YAAa,EAAA,CACd,EAEHrI,OAAQ,CACN,CACE5B,KAAM,cACNhE,KAAM,QACNnQ,KAAM,OACNme,YAAa,yCACbC,YAAa,EAAA,CACd,EAEH,mBAAoB,CAClB,CACEjK,KAAM,IACNhE,KAAM,KACNnQ,KAAM,OACNme,YAAa,yBAAA,CACd,EAEHJ,QAAS,CACP,CACE5J,KAAM,IACNhE,KAAM,UACNnQ,KAAM,OACNme,YAAa,yCACbE,QAAS,OAAA,EAEX,CACElK,KAAM,aACNhE,KAAM,QACNnQ,KAAM,UAAA,EAER,CACEmU,KAAM,WACNhE,KAAM,WACNnQ,KAAM,OACNme,YAAa,iCACbC,YAAa,EAAA,CACd,CAEL,EACME,GAAiBvU,GAAK,MAAO,CAAEvM,GAAAA,CAAG,KACzB,MAAMY,EAAMvB,EAAAA,MAAMM,GAAGiX,MAAMrR,QAAQvF,CAAE,EAAEO,SACxCwF,KACb,EACKgb,GAAoBxU,GAAK,MAAO,CAAEvM,GAAAA,CAAG,IAAM,CACzC+E,MAAAA,EAAU,MAAMnE,EAAMvB,EAAAA,MAAMM,GAAGoE,SAASwB,QAAQvF,CAAE,EAAEO,QAC1D,OAAOwE,EAAQ2J,UAAY3J,EAAQ+I,MAAQ/I,EAAQmJ,WACrD,CAAC,EACY8S,GAAiB,CAC5BvN,UAAW,CACTzT,GAAI,OACJ+F,MAAOA,CAACxB,EAAG0c,IAAWA,IAAU,EAAI,OAAS,YAC7C3K,KAAM,IACN1T,KAAM,MACR,EACA6d,SAAU,CACRzgB,GAAI,WACJ+F,MAAO,WACPuQ,KAAM,YACN1T,KAAM,IACR,EACAhD,cAAe,CACbI,GAAI,gBACJ+F,MAAO,gBACPuQ,KAAM,iBACN1T,KAAM,cACR,EACA/C,KAAM,CACJG,GAAI,OACJ+F,MAAO+a,GACPxK,KAAMA,CAAC,CAAEtW,GAAAA,CAAAA,IAAU,MAAKA,CAAG,GAC3B4C,KAAM,MACR,EACAwd,OAAQ,CACNpgB,GAAI,SACJ+F,MAAOA,CAAC,CAAE9B,MAAAA,CAAAA,IAAaA,EAAQ,QAAU,YACzCid,SAAUA,CAAC,CAAE5hB,SAAAA,CAAAA,IAAeA,GAAYsB,EAAAA,EAAMtB,SAC9CgX,KAAMA,CAAC,CAAErS,MAAAA,EAAO3E,SAAAA,CAAAA,IAAgB,IAAGA,CAAS,KAAI2E,EAAQ,KAAO,EAAG,GAClErB,KAAMA,CAAC,CAAEqB,MAAAA,CAAAA,IAAaA,EAAQ,WAAa,OAC7C,EACAuc,SAAU,CACRxgB,GAAI,WACJ+F,MAAO,WACPmb,SAAUA,CAAC,CAAE5hB,SAAAA,CAAAA,IAAeA,GAAYsB,EAAAA,EAAMtB,SAC9CgX,KAAMA,CAAC,CAAEhX,SAAAA,CAAAA,IAAgB,IAAGA,CAAS,YACrCsD,KAAM,OACR,EACA2V,OAAQ,CACNvY,GAAI,SACJ+F,MAAOA,CAAC,CAAEob,MAAAA,CAAaA,IAAAA,EAAS,IAAGA,CAAM,IAAK,SAC9C7K,KAAMA,CAAC,CAAE6K,MAAAA,CAAAA,IACPA,EACK,aAAYC,mBAAmBD,CAAK,CAAE,iBACvC,UACNve,KAAM,SACNye,gBAAiBA,CAAC,CAAEF,MAAAA,KAAcA,EAA2B,CAAA,EAAnB,CAAC,cAAc,CAC3D,EACA,mBAAoB,CAClBnhB,GAAI,mBACJ+F,MAAOgb,GACPzK,KAAMA,CAAC,CAAEtW,GAAAA,CAAAA,IAAU,MAAKA,CAAG,GAC3B4C,KAAM,MACR,EACAyd,UAAW,CACTrgB,GAAI,YACJ+F,MAAO,YACPuQ,KAAM,KACN1T,KAAM,UACR,EACA0d,WAAY,CACVtgB,GAAI,aACJ+F,MAAO,QACPuQ,KAAM,KACN1T,KAAM,OACR,EACA2d,QAAS,CACPvgB,GAAI,UACJ+F,MAAOA,CAAC,CAAEwa,QAAAA,CAAAA,IAAcA,EACxBW,SAAUA,CAAC,CAAE5hB,SAAAA,CAAAA,IAAeA,GAAYsB,EAAAA,EAAMtB,SAC9CgX,KAAMA,CAAC,CAAEiK,QAAAA,EAASjhB,SAAAA,EAAUib,MAAAA,CAAAA,IACzB,GAAEjb,EAAY,IAAGA,CAAS,GAAI,EAAG,MAAKihB,EAAQe,MAAM,KAAK,EAAEC,KAAK,GAAG,CAAE,GACpEhH,EAAQ,WAAa,EACtB,GACH3X,KAAM,SACR,CACF,EAEA,SAAS4e,GAAkB,CAAEte,QAAAA,CAAQ,EAAG,CAChCF,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAEiiB,UAAAA,CAAcze,EAAAA,EAChB,CAAC0e,EAAUC,CAAW,EAAIxiB,EAAS,EAAK,EACxC,CAACyiB,EAAkBC,CAAmB,EAAI1iB,EAAS,EAAK,EAExD,CAAC2iB,CAAmB,EAAIld,KAE9B,OACElB,EAAA,MAAA,CAAK1D,GAAG,+BAA+BsD,MAAM,QAAQC,SAAS,KAAIb,SAC/D,CAAA,CAAC,CAACQ,GACDX,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,cAAcb,QAASS,EAAQR,SACzDH,EAACI,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVL,EAAA,SAAA,CAAAG,SACEgB,EAAA,KAAA,CAAAhB,SAAA,CACEH,EAACI,EAAI,CAACC,KAAK,UAAY,CAAA,EAAC,aAAW,IACnCL,EAAA,MAAA,CACE0U,MAAO,CACL8K,SAAU,GACVC,QAAS,GACTC,cAAe,WACjB,EAAEvf,SACH,MAAA,CAEI,CAAC,CAAA,CACJ,CAAA,CACE,EACRgB,EAAA,OAAA,CAAAhB,UACEH,EAAA,IAAA,CAAAG,SAAG,gDAAA,CAAsD,EACzDH,EAAA,MAAA,CAAKe,MAAM,sBAAqBZ,SAC7B,CACC,CACEzC,MAAO,eACP2V,MAAO,kBACPsM,OAAQrD,EAAAA,EAEV,CACE5e,MAAO,eACP2V,MAAO,eACPsM,OAAQnD,EAAAA,EAEV,CACE9e,MAAO,eACP2V,MAAO,eACPsM,OAAQC,EAAAA,CACT,EACDte,IAAI,CAAC,CAAE5D,MAAAA,EAAO2V,MAAAA,EAAOsM,OAAAA,CAAAA,IAAa,CAC5B/W,MAAAA,EACJnI,EAAWua,SAAS6E,oBAAsBniB,GACzCA,IAAU,gBACT,CAAC+C,EAAWua,SAAS6E,kBACzB,OACE1e,EAAA,QAAA,CAAmBJ,MAAO6H,EAAU,UAAY,GAAGzI,UACjDH,EAAA,QAAA,CACEC,KAAK,QACLmQ,KAAK,sBACL1S,MAAAA,EACAkL,QAAAA,EACAkX,SAAiBpgB,GAAA,CACRsb,EAAAA,SAAS6E,kBAAoBngB,EAAE0J,OAAO1L,KAC/C,CAAA,CACD,EAAE,IACHsC,EAAA,MAAA,CAAKwO,IAAKmR,EAAQpf,IAAI,GAAG0O,MAAM,KAAKC,OAAO,IAAA,CAAM,EAAE,IACnDlP,EAAA,OAAA,CAAAG,SAAOkT,CAAAA,CAAY,CAAC,GAXV3V,CAYL,CAAA,CAEV,CACE,CAAA,EACJwhB,EAAUthB,OAAS,EAClBuD,EAAAC,EAAA,CAAAjB,UACEH,EAAA,KAAA,CAAIe,MAAM,iBAAiBwB,IAAKgd,EAAoBpf,SACjD+e,EAAUtI,OAAOmJ,OAAO,EAAEze,IAAI,CAAC0e,EAAUvd,IAAM,CAE9C,MAAMoU,EAAMoJ,OAAOC,OAAOF,CAAQ,EAAEhB,KAAK,GAAG,EACtC,CAAE/e,KAAAA,CAAS+f,EAAAA,EACb,GAAA,CAACvB,GAAexe,CAAI,EAAU,OAAA,KAC9B,GAAA,CAAEI,KAAAA,EAAMmD,MAAAA,EAAOmb,SAAAA,EAAUG,gBAAAA,CAAAA,EAC3BL,GAAexe,CAAI,EACjB,OAAOuD,GAAU,aACXA,EAAAA,EAAMwc,EAAUvd,CAAC,GAEvB,OAAOkc,GAAa,aACXA,EAAAA,EAASqB,EAAUvd,CAAC,GAE7B,OAAOpC,GAAS,aACXA,EAAAA,EAAK2f,EAAUvd,CAAC,GAErB,OAAOqc,GAAoB,aACXA,EAAAA,EAAgBkB,EAAUvd,CAAC,GAE/C,MAAM0d,EAAmBrB,GAAAA,YAAAA,EAAiBhG,SACxCrY,EAAWua,SAAS6E,mBAEtB,OACE1e,EAAA,KAAA,CAAAhB,SAAA,CACEH,EAACI,EAAI,CAACC,KAAAA,CAAAA,CAAa,EACnBc,EAAA,OAAA,CAAMJ,MAAM,gBAAeZ,SAAA,CACzBH,EAACsd,GAAS,CAAAnd,SAAEqD,CAAAA,CAAiB,EAC5Bmb,GACCxd,EAAAC,EAAA,CAAAjB,SAAA,CACG,IACDH,EAAA,QAAA,CAAOe,MAAM,mBAAkBZ,SAAEwe,CAAAA,CAAgB,CAAC,CAAA,CAClD,EAEHwB,GACCngB,EAAA,OAAA,CAAMe,MAAM,MAAKZ,SAAC,oCAAA,CAEZ,CACP,CAAA,CACG,EACNgB,EAAA,OAAA,CAAMJ,MAAM,mBAAkBZ,UAC5BH,EAAA,SAAA,CACEC,KAAK,SACLc,MAAM,cACN4C,SAAUlB,IAAM,EAChBvC,QAASA,IAAM,CACb,MAAMkgB,EAAezG,MAAM0G,KAAKpjB,EAAOiiB,SAAS,EAChD,GAAIzc,EAAI,EAAG,CACT,MAAM6d,EAAOrjB,EAAOiiB,UAAUzc,EAAI,CAAC,EACtBA,EAAAA,EAAI,CAAC,EAAIud,EACtBI,EAAa3d,CAAC,EAAI6d,EAClBrjB,EAAOiiB,UAAYkB,CACrB,CACF,EAAEjgB,SAEFH,EAACI,EAAI,CAACC,KAAK,WAAWE,IAAI,SAAA,CAAW,CAAA,CAC/B,EACRP,EAAA,SAAA,CACEC,KAAK,SACLc,MAAM,cACN4C,SAAUlB,IAAMyc,EAAUthB,OAAS,EACnCsC,QAASA,IAAM,CACb,MAAMkgB,EAAezG,MAAM0G,KAAKpjB,EAAOiiB,SAAS,EAChD,GAAIzc,EAAIxF,EAAOiiB,UAAUthB,OAAS,EAAG,CACnC,MAAM0iB,EAAOrjB,EAAOiiB,UAAUzc,EAAI,CAAC,EACtBA,EAAAA,EAAI,CAAC,EAAIud,EACtBI,EAAa3d,CAAC,EAAI6d,EAClBrjB,EAAOiiB,UAAYkB,CACrB,CACF,EAAEjgB,SAEFH,EAACI,EAAI,CAACC,KAAK,aAAaE,IAAI,WAAA,CAAa,CAAA,CACnC,EACRP,EAAA,SAAA,CACEC,KAAK,SACLc,MAAM,cACNb,QAASA,IAAM,CACDkf,EAAA,CACVY,SAAAA,EACAO,cAAe9d,CAAAA,CAChB,CACH,EAAEtC,SAEFH,EAACI,EAAI,CAACC,KAAK,SAASE,IAAI,MAAA,CAAQ,CAAA,CAC1B,CAAC,CAAA,CAUL,CAAC,GAtEAsW,CAuEL,CAAA,CAEP,CAAA,CACC,EACHqI,EAAUthB,SAAW,GACpB6C,EAAWua,SAAS6E,oBAAsB,gBACxC1e,EAAA,MAAA,CAAKJ,MAAM,yBAAwBZ,SAAA,CACjCH,EAACI,EAAI,CAACC,KAAK,MAAA,CAAQ,EAAE,IACrBL,EAAA,QAAA,CAAAG,SAAO,sDAAA,CAEA,CAAC,CAAA,CACL,CACN,CAAA,CACH,EAEFgB,EAAA,MAAA,CAAKJ,MAAM,yBAAwBZ,UACjCH,EAAA,IAAA,CAAAG,SAAG,mDAAA,CAAoD,EACvDgB,EAAA,IAAA,CAAAhB,SAAA,CAAG,wBAEDH,EAAA,KAAA,EAAK,EACK,aAAC,IACXA,EAAA,IAAA,CACEiE,KAAK,IACL/D,QAAgBR,GAAA,CACdA,EAAEuJ,eAAe,EACjBhM,EAAOiiB,UAAY,CACjB,CACEjf,KAAM,WAAA,EAER,CACEA,KAAM,eAAA,CACP,CAEL,EAAEE,SACH,oCAAA,CAEE,EAAE,IAAI,QAEX,CAAA,CAAG,CAAC,CAAA,CACD,EAEPH,EAAA,IAAA,CAAGe,MAAM,gBAAeZ,SACrB+e,EAAUthB,QAAU8f,IAClB,OAAMA,EAAgB,YAAA,CACxB,EACHvc,EAAA,IAAA,CACEuT,MAAO,CACL8L,QAAS,OACTC,eAAgB,gBAChBC,WAAY,QACd,EAAEvgB,UAEFH,EAAA,SAAA,CACEC,KAAK,SACLc,MAAM,QACNb,QAASA,IAAMof,EAAoB,EAAI,EAAEnf,SAC1C,eAAA,CAEO,EACRgB,EAAA,SAAA,CACElB,KAAK,SACL0D,SAAUub,EAAUthB,QAAU8f,GAC9Bxd,QAASA,IAAMkf,EAAY,EAAI,EAAEjf,SAAA,CAEjCH,EAACI,EAAI,CAACC,KAAK,MAAA,CAAQ,EAAE,IACrBL,EAAA,OAAA,CAAAG,SACGM,EAAWua,SAAS6E,oBAAsB,eACvC,cACA,eAAA,CACA,CAAC,CAAA,CACD,CAAC,CAAA,CACR,CAAC,CAAA,CACA,EACLV,GACCnf,EAACc,GAAK,CACJC,MAAM,QACNb,QAAgBR,GAAA,CACVA,EAAE0J,SAAW1J,EAAEihB,eACjBvB,EAAY,EAAK,CAErB,EAAEjf,SAEFH,EAAC4gB,GAAY,CACXZ,SAAUb,EAASa,SACnBO,cAAepB,EAASoB,cACxBvX,SAAUA,CAAC,CAAEoM,OAAAA,EAAQyL,KAAAA,CAAAA,IAAW,CACtBliB,WACR1B,YAAqBkiB,EAAA,aAAA,EAAA/J,EAEdnY,EAAA,UAAA,KAAAmY,CAAA,CAEP,EACF,QAAA,IAAAgK,EAAA,EAAA,CAAA,CACAze,CAAgC,CAAA,EACjC0e,GAAArf,EAAAc,GAAA,CACI,MAGPd,QACEe,QAAMrB,GAAA,YACUA,EAAA,eACVA,EAA8B,EAAA,CAElC,EACF,SAAAM,EAAA8gB,GAAA,CAAE3gB,UAAAA,EAGA+e,QAAAA,IAAAA,EAAAA,EAAAA,CAAAA,CACAve,CAAwC,CAAA,CAAE,CAC3C,CAAA,CAEJ,CAGP,MAAAogB,GAAA,IAAA,GAEMA,MAAuB,IAAA,CACvBC,KAAAA,CAEI,MAAAlkB,CAAEA,EAAAA,EAAAA,EAAM,OAAQA,EAAA,GAAA,MAAA,KAAA,CACtB,EAAOA,CAET,OAAAikB,EAAA,CAAA,EAGFE,GAAA,CAEA,OAAmB,qFACjBjL,QAAS,mDAAA,EAEX,SAAA4K,GAAA,CAEA,SAAA5X,EACEA,SAAAA,EACArF,SAAAA,EACAqc,cAAAA,EACAO,QAAAA,CAAAA,EACA5f,SACC,MAAA4H,EAAA,CAAA,CAAAyX,EACOrhB,CAAAA,GAAwB,EAAA/B,GAAAojB,GAAA,YAAAA,EAAA,OAAA,IAAA,EAC1BzX,CACN,MAAAzL,CACM,EAAAuB,EAAA,EAAEvB,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAc,CAAAuX,EAAAC,CAAA,EAAA1X,EAAA,CAAA,CAAA,EAEhB,CAACyL,EAAmB6Y,CAAsB,EAAAtkB,EAAA,CAAA,CAAA,EAChDd,EAAcwY,IAAAA,EACd,SAAyB4M,CACzBplB,GAAAA,IAAgB,OAEZ,GAAIqlB,CAAwB7Y,EAAA,SAAA,EACxB,MAAAsM,EAAA,MAAAoM,KACF1Y,EAAAA,KAAoB,CAAAgH,EAAAN,IAAAM,EAAA,MAAA,cAAAN,EAAA,KAAA,CAAA,EACdqF,EAAAA,CAAQ,EACdA,EAAW,SAAIrF,CACfsF,MAAc,CACdhM,EAAW,OAAS,EAEpBlM,MACAkM,SAAAA,CACF,GAAA6Y,IAAA,UAGW,GAAA,CACX,MAAoBtE,EAAA,MAAAH,KAAWwE,EAAArE,CAAA,CAC/B,MAAI,CAAA,CACF,IACAqE,EAAAA,CAAAA,CAAAA,CAAAA,EAAwB,QACdrlB,IACVO,OAAAA,EAAAA,KACF,GAAAmM,GAAA4Y,GAAAhD,GAAAgD,CAAA,EAAA,CACC,MAAAC,EAAAC,EAAA,QACDF,GAAYA,CAAA,EAAA,QAAA,CAAA,CAEVE,KAAAA,EACNvlB,KAAAA,CACE,IAAgBqlB,CAEd,QAAqBplB,EAAAA,cAAAA,UAAAA,CAAAA,IAAAA,EACTolB,GAAAA,EAAarU,CAAAA,IAAWsD,IAAAA,WAAMnQ,EAAAA,QAAAA,EAAAA,CAAAA,IAAAA,KACxCqhB,EAAcF,MAAAA,EAAoBhR,CAAA,EAG9BkR,CAAAA,CAAiD,CAEjDA,EAAM5jB,CAAAA,EAAAA,IACRyD,EAAA,MAAA,CACF,GAAA,yBAAA,MACD,QACH,SAAA,CAAA,CAAA,CAAAR,GAAAX,EAAA,SAAA,CACEuI,KAAU4Y,SAEd,oBACU,QAAAxgB,EAA+B,SAAAX,EAAAI,EAAA,MACpC,GACC,CAAa,CAAA,CAAA,EAAeJ,EAAA,SAAA,CAAcE,SAASS,EAAAA,KAAAA,CAAQR,YACpD,OAAA,MAAA,WAAA,CAAA,CAAA,CAAM,CAAA,EAAKH,EAAA,OAAA,CAGpBA,SAAA,KAAAG,SACEgB,EAAA,OAAA,CAAAhB,MAA4C,SAAAT,GAAA,CAE9CM,EAAAA,eAAA,EAAe,MAAA8G,EAAA,IAAA,SAAApH,EAAA,MAAA,EACbyB,EAAA,CAAA,EACOkgB,EAAAA,QAAAA,CAAAA,EAAAA,IAAAA,GACYxK,CAAA,EAAAnZ,GAAA,YAAAA,EAAA,OAEEmZ,IAAA,aACjBzB,EAAayB,CAAA,EAAanX,EAAAA,CAAE0J,EAAM,QAAA,eAAA,EAAA,EAAA,QAAA,OAAA,EAAA,EAClCgM,KAAgBA,EAAAyB,CAAA,EAAA,QAAA,YAAA,EAAA,EAEdzB,CAAOyB,EACPzB,SAMEA,EAAAA,CACF,OAAAA,EACD,KAAA7M,EAAA,OAAA,KACDnM,CAAQuC,EACRe,EAAA,OAAYO,QAAMshB,EAAA,IAAA,EACT5gB,GAAA,MAAAA,IACPyU,EACAyL,SAAMtY,OAAW,CACnB,SAACpH,EAAA,QAAA,CAECiI,SAAa,CAAApJ,EAAA,OAAA,CACfuhB,SAAAA,UACA5gB,CAAU,EAAAQ,EAAA,SAAA,CACZ,SAAA,GAAEhB,SAAAA,EAEFA,YACE,CAAAA,EACET,EAAA,OAAA,KAAA,CAAM,EACNyB,aAAAoH,EAAAyX,EAAA,KAAA,OACEwB,KAAQ,OACR7d,SAAAA,CAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,SAAAA,SAEiBjE,SAAAA,IAAShC,CAC1B,CAAA,CAAA,CAAA,CAAA,CACA+jB,CAAAA,CAAyCnc,CAAAA,CAC9BnF,CAAAA,GAAAA,GAAAA,EAAAA,GAAAghB,CAEX,IAFWhhB,YAAAA,EAEX,MAFWA,YAAAA,EAAAA,KAAAA,EAEK,CACfwd,CACC,KAAAvJ,EAAoBjU,KAAAA,EAAiB,KAAAF,EACrC,YAAAme,EACK,QAAAE,EAGZH,YAAAA,CACE,IAAQ/N,IAAAA,OAAMnQ,EAAAA,IAAAA,CAAMme,SAAAA,EAAAA,QAAAA,CAAaE,SAAAA,CAAAA,EAAAA,OAAAA,CAASD,SAAAA,MAAAA,CAAkB,EAAAre,EAAA,SAAA,WAEzD,SACE,CAAAqe,EAAAle,YACEkI,IAAA,UAAAlI,aACEoI,EAAAyX,EAAA,GAAA,OAAA7f,SAAMkU,EAAA,IAAA/W,GAAA0C,EAAA,SAAA,CACNA,MAAA1C,EAAA,GACO,SAAAA,EAAA,KAAA,GACM+gB,CACX1a,CAAAA,CAAkC,CAClC8d,CAAuCnc,CAAAA,EAGjB7H,OAAU+F,SAC/BrC,EAAA,QAAA,CAAA,SACM,CAAAnB,EAAA,OAAA,CACJ,SAAAoU,CAAA,CACN,EAAA,IAAApU,EAAA,QAAA,CAEP,KAAAC,EAEA,OACEA,IAAA,YAAA,OAAAE,KAAAA,EACEA,YAAAA,EACEA,SAAOiU,IAAAA,QAAAA,CAAAA,EAAW,SAAAzQ,EAEhB1D,KAAAA,IAAAA,UAAAA,6BAAAA,KACAyhB,kBACAtR,eAAAA,MACAgO,WAAAA,GACAoD,QAAAA,CAA8BnD,CAC9B1a,EAAAA,IAAAA,WAAAA,EAAAA,OAAAA,GAAAA,EAAAA,WAAAA,CACArG,GAAAA,6BAKAqkB,SAAYC,EAAA,IAAAC,GAAA7hB,EAAA,SAAA,CACG,MAAA6hB,EAAA,IAAA,CACH,CAAA,CAAA,CACZvD,CAAAA,CAAAA,CAAiB,CAIf,CAAA,GAAa,CAAA,CAAA2C,GACVW,CAAAA,GAAAA,EAAsBC,IAAAA,CACrB,MAAA,0BAAmBzR,SACpB,CAAApQ,EAAAI,EAAA,CAAA,KAEJ,MAAA,CAAA,EACE6gB,GAAAE,CAAA,CAAA,CAAA,CAAA,EACNhgB,EAAA,SAAA,aAIgB,SAAA,CACd,KAAA,SAAyBhB,MAAAA,QAC1BE,SAAKsD,GAAA0E,IAAA,UAAQ,SACP8Y,EAAAA,OAAY,KAAA,CAG5BhgB,EAAAA,GAAAnB,EAAA,SAAA,CAAAG,KAAAA,SAEIF,MAAK,eACLc,QAAM,IAAA,CACN4C,EAAAA,iBAAkC4c,EAAA,CAAA,EAAUpgB,GAAAA,MAAAA,GAGtC,EAGJF,SAAK,QAAA,CAAA,CACLc,CAAM,CAAA,CAAA,CAEJ9D,CAAOiiB,CACPve,CAAU,CAAA,CAAA,CACZ,CAAA,CACD,SAAAmgB,GAGF,CAAA,UAAA5B,EACM,QAAAve,CACL,EAAA,OACD,MACJmhB,EAAA3W,GAAA,IAET,CAAA+T,GAEwBA,CAAAA,EAAAA,OAAAA,OAAAA,EAAAA,OAAWve,GAAWohB,GAAAA,8BAAA,KAAA,UAAA7C,EAAA,OAAA,OAAA,CAAA,CAAA,EACtC4C,CAAAA,CAAAA,CAAAA,EACA,CAAC5C,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB,CAAA8C,EAAAC,CAAA,EAAArlB,EAAA,SAAA,EACnBslB,EAA2BtkB,GAAAA,IAAAA,CAAe,GAAA,CAAAukB,EAC9C,OAAAF,aAGE/C,KAEJ,GAAM,CACAgD,MAAAA,EAAAA,KAAAA,MAAAA,GAAAA,kCAAwCC,CAAA,CAAA,EAC5C,GAAwB,CAAA,MAAA,QAAAC,CAAA,EACtBH,MAAAA,IAAAA,MAA0B,cAAA,EACnB,OAAAA,EAAA,SAAA,EACTG,CACI,MAAA,CACF,GAAA,CAII,MAAOxI,EAAAA,KAAc,MAAAuI,CAAA,EAAS,GAAA,CAAA,cAAwBC,CAAA,EAC1DH,MAAAA,IAAAA,MAA0B,cAAA,EACnBG,OAAAA,EAAAA,SAAAA,EACKA,CAGR,MAAA,CACIA,OAAAA,EAAcC,OAAAA,EACTzI,IAAuB,CAClCqI,CACA,EAAOG,CAAAA,CAAAA,CAAAA,IACKnlB,EAAA,UAAA,OAAA,EACZglB,OAAAA,EAAAA,MAAAA,CACO,GAAA,0BACT,MAAA,QACF,SAAA,CAAA,CAAA,CAAAthB,GAAAX,EAAA,SAAA,CACEmiB,KAAAA,SACEG,MAAAA,cAEN,QACE3hB,EAAQ,SAAAX,EAAAI,EAAA,CAAgC,KAAA,GAAA,EAEpC,CAAA,EAAaJ,EAAA,SAAA,CAASe,SAAMI,EAAA,KAAA,CAAuBR,SAAAA,CAAAA,iBAAAA,EAAAA,QAAAA,CAAQR,yBAC9C,SAAA,WAAA,CAAK,CAAA,CAAA,CAGpBH,CAAA,CAAAG,EAAAA,EAAAA,OACE,CAAA,SAAA,KACgB,SAAa,CAAAgB,EAAA,UAAA,CAAA,SAAmB,CAAAA,EAAA,KAAA,CAAiB,SAAA,CAAAnB,EAAAI,EAAA,CAC7D,KAAA,oBAENe,KAAA,IAAe,MAAA,eAAA,CAAIhB,EAAAA,IACjBgB,EAAA,OAAA,CAAAhB,SACEgB,QAAA,CAAAhB,CAAAA,CACO,CAAA,EAACE,EAAK,IAAA,CAAA,SAAyBL,EAAA,QAAA,CAAIe,KAAM,OAAiB,KAC/Df,SAAAG,YAAM,uBAAa,MAAA,QAErBH,QAAAN,GAAA,CAAAS,EACET,EAAA,OAAA,KAAA,CACO,CAAA,CAAA,CACA,CAAA,EACL0e,CAAY,CAAA8D,GAAA,MAAA,QAAAA,CAAA,GAAA/gB,EAAAC,EAAA,CAAA,SACN,CAAAD,EAAA,IAAA,CACNohB,SAAgB,CAAAviB,EAAA,IAAA,CACON,SAAAA,EAAc,MAAA,CACrC,EAAA,YAAAwiB,EAAA,OAAA,EAAA,IAAA,GAAA,IAAA/gB,EAAA,QAAA,CACD,MAAA,gBAEA+gB,SAAAA,CAAAA,IAAAA,EACaA,OAAAA,cAAAA,CACZ,CAAA/hB,CAAAA,CACE,CAAAA,EAAAA,EAAAA,KACEH,CAAA,6BAAkC,SAAKkiB,EACdtkB,IAAAA,qBAAmB,KAAI,CACzCmD,SAAM,CAAAf,EAAA,OAAA,QAEL,QAAAkf,EAAA,KAAAjD,GAEA,OAAA,KAAAA,CAAA,EAAA,MAAApF,GAAAoF,EAAApF,CAAA,IAAAmJ,EAAAnJ,CAAA,CAAA,CACPqL,EAAAA,EAAAA,CACC/hB,EAEIuU,SAAO,GAAA,CACL+K,EAAAA,EAAAA,QAAyBxD,SAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,OAAAA,QAAAA,MAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IAAAA,IAAAA,YAAAA,EAAAA,MAAAA,YAAAA,EAAAA,KAAAA,EAAAA,CAAAA,CAEvBgE,KAAAA,EAEA,KAAA7P,EAIJ,KAAAnQ,CACD,IAAA+f,EAAA5P,CAAA,EAAAjP,EAAAC,EAAA,CAGDD,SAAA,CAAAA,EAAA,OAAA,OACGyc,8BAGIxJ,SAAAA,CAAAA,EAAAA,IAAAA,IAAAA,IAAAA,WAAAA,EAAAA,CAAAA,IAAAA,KAAAA,IAAAA,IAAAA,EAAAA,CAAAA,CAAAA,CAAMhE,CAAAA,EAAAA,GAAAA,CAAAA,CAAMnQ,EAAAA,KAAAA,CAAAA,CAAAA,CAAK,CAEhB,CAAAE,EAAAA,CACE,CAAA,EAAAgB,EAAMJ,IAAM,CAAA,SAA6B,CAAAf,EAAA,QACjC,CAKY,SACT,+BAAA,CAAA,EAAAA,EAEX,KACP,CAAA,CAAA,EAAAA,EAAA,QAAA,CAAA,SACI,wDAAA,CACL,CACL,CAAA,CACC,CACJmB,CAAAhB,CAAAA,EAAAA,IACE,SAAAH,EAAA,IAAA,CAAA,MAAO,QAA6B,SAC/BA,EAAA,SACL,SAAO,4BAAA,CAAA,CAEC,CAAA,EACNmB,EAAA,IAAA,CACJ,SAEa,CAAAmhB,KACjBlhB,EAAA,CAAS,SAAA,CAAApB,EAAA6D,GAAA,CAAO1D,aACd,+BAAO,WAAAH,EAAA,MAAA,CAAiC,MAAA,SAG5CmB,SAAA,wEAAA,CACGmhB,EACCniB,QACEH,IAAY,CACG,MAAAwiB,EAAAN,EAAA,OAAAlC,GAAA,CAAA/iB,EAAA,UAAA,KAAAgf,GAEA,OAAA,KAAAA,CAAA,EAAA,MAAApF,GAAAoF,EAAApF,CAAA,IAAAmJ,EAAAnJ,CAAA,CAAA,CAAS,CAAA,EAGf,GAAA,CAAA2L,EAAA,OAAA,IAEQ,4BAAA,EAMb,MAE4BvG,CAEtBgE,IAAAA,EAAewC,CAAAA,GACZ5L,EAAQoF,UAAK,GAAepF,CAC/B,EAAA,MAEN6L,EAAAC,EAAA,OAAAjF,GACIgF,IACF3P,EAAsC4P,EAAA,MAAA,EAAAjF,EAAA,GAExCzgB,EAAA,UAAA0lB,EACA5P,KACYmM,oCACWxB,EAAA,kCAAA,oBAAA,EAEjBgF,GAAAA,MAAAA,GACN,EAEiBC,SAAAA,EAAAA,SAAAA,CACjB,KAAA,SACA1lB,MAAOiiB,SACPnM,SACE2P,CACKR,EAGG,SAAA,kBAAA,CACZ,CAAE/hB,CAAAA,EAAAA,GAAAA,CAEF,CAAA,EAAAH,EACO6D,GAAA,CAAA,aACCye,EAAA,8BAAA,oBAAA,kBACKJ,EAAAA,SAAAA,OAAAA,QACZ,IAAA,CAEDjlB,EAAQ,UAAAilB,KACQ,oBAAA,EAGtBliB,GAAAA,MAAAA,GACE+D,EAKAC,SAAAA,EAAAA,wBAEE/G,MAAOiiB,SACPnM,SAAU,CAAoBmP,EACpB,SAAAI,EAAA,eAAA,SAAA,CACZ,CAAA,CAAEniB,CAAAA,CAEF,CAAA,CAAA,CACO,CAAA,EAAAgB,EACC,UAAA,CAAA,YACK+gB,KAAAA,CAAwB/hB,SAAAA,CAAAA,KAEa,KAC1C,kBACI,KAAA,IACZ,MAAA,eAAA,CAENgB,EAAAA,IAAAnB,EAAA,OAAA,CAAAG,SACEgB,QAAA,CAAAhB,CAAAA,CACO,CAAA,EAACE,EAAK,IAAA,CAAA,SAAuBL,EAAA,QAAA,CAAIe,MAAM,CAAmB,MAC/Df,MAAM,EAAa,KAAA,OAErBA,MAAA8hB,EAAA3hB,YAEIuU,QAAOhV,GAAA,CAAEuP,GAAOvP,EAAA,OAAA,MACX,CAAAA,EAAA,OAAA,SACEoiB,GAAAA,CACC,UAAA,UAAA,UAAApiB,EAAA,OAAA,KAAA,KACQ,kBAAA,CACV,MAAUhC,CAAOqV,GAAA,0BAAA,CACrBrT,EAEI,CACFqF,CAAAA,CACAgO,CAAAA,EAAAA,EAAAA,IAAAA,CAA4B,YAClB,SAAA,CACV3W,KAAAA,SACA2W,MAAAA,SACF,SAAA,CAAA+O,EACF,QAAA,IAAA,CACD,GAAA,CAEH3gB,UAAA,UAAA,UAAA2gB,CAAA,EAAA3hB,GACEgB,0BAAA,CACO,MAAA,CACC4R,GAAA,kCAAA,IAGA,SAAA,CAAA/S,EAAAI,EAAA,CACQ4S,KAAAA,WACVD,CAAAA,EAAAA,IAAAA,EAAU,OAA0B,CACtC,SAAY,MACV3W,CAAAA,CAAAA,CACA2W,CAAAA,EAAAA,KAAAA,iCAA4C,UAAAlU,EAAA,iCAAA,WAAA,YAAAA,EAAA,eAAA,CAC9C,KAAAijB,CAAA,KACF3gB,EAAA,SAAA,CAAEhB,KAAAA,SAEG,MAAM,SAAW,SAAIH,CAAAA,EAAA,QAAM,IAAA,CAAW,GAAA,CACnC,UACEiT,MAAAA,CAEF6O,KAAAA,CAAAA,CAEN3gB,CACO,MAAA,CACC,MAAA,+BAAA,IAGA,SAAA,CAAAnB,EAAAI,EAAA,CACF2E,KAAAA,OAAgB,CAAA,EAAA,IACR+c,EAAAA,OAAAA,CAAAA,SACP,OAAA,CAAA,CACH,CACE1lB,CAAAA,EAAAA,IAAAA,EAAe,OAAA,GAAA+E,EAAA,QAAA,CACfoI,MAAAA,gBACF,SAAA,CAAAuY,EAAA,OAAA,aAAA,CAAA,CACF,CAAA,CAAE3hB,CAAAA,EAAAA,CAAAA,CAAAA,GAEGgB,EAAA,UAAA,CAAA,SAAM,CAAAnB,EAAA,UAAA,CAAO,MAAIA,gBAAA,SAAMA,EAAA,QAAA,CAAY,SAAA,oBAAA,CAEzC,CAEH,CAAA,EAAaA,EAAA,WAAA,CAAeG,MACzB2hB,CAEJ,MAAA,MAED,EACA3hB,KAAAA,GACWY,SAAM,GAAeZ,SAC5BH,KAAA,UAAAkf,EAAA,OAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAO,CAAA,CAAA,CAAyB,CAAC,CAAA,CAEnC,CAAA,CAAA,CAAiB,CAAA,CAAS,CCz9BxCxgB,GAAUzB,EAAqB2lB,GAAA,CAC7B,SAAW,CAAC3hB,EAAQ8S,EAAMrW,EAAOmlB,CAAS,IAAKD,EAEzC,SAAS1f,KAAK6Q,CAAI,GAAK,CAACrW,GAChByJ,IAGhB,CAAC,EAED,SAAwB2b,IAAS,qBACzBriB,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B8lB,EAAWC,KACXhb,EAAWC,KAEjB,OACE9G,EAAAC,EAAA,CAAAjB,SAAA,CACG,CAAC,CAACM,EAAWZ,aACZG,EAACc,GAAK,CAAAX,SACJH,EAACijB,GAAO,CACN1L,cACE,OAAO9W,EAAWZ,aAAgB,UAC9BY,EAAWZ,YAAY0X,gBACvBvS,EAAAA,OAAOke,cAAPle,YAAAA,EAAoBuS,gBAAiB,KAE3C4L,aACElmB,EAAAA,EAAO4C,cAAP5C,YAAAA,EAAoBkmB,eACpBne,EAAAA,OAAOke,cAAPle,YAAAA,EAAoBme,aACpB,KAEF/L,cACEna,EAAAA,EAAO4C,cAAP5C,YAAAA,EAAoBma,gBACpBpS,EAAAA,OAAOke,cAAPle,YAAAA,EAAoBoS,cACpB,KAEFzW,QAAsB2M,GAAA,CACd,KAAA,CAAE8V,UAAAA,EAAWrmB,SAAAA,EAAUkD,KAAAA,CAAAA,EAASqN,GAAW,CAAA,EACjDrQ,EAAO4C,YAAc,GACrBmF,OAAOke,YAAc,KACjBE,IACKC,EAAAA,mBACGtQ,GAAA,CACRqB,KAAM,CACJkP,KAAM,gCACNC,MAAO,8BACPC,KAAM,6BAAA,EACNvjB,GAAQ,MAAM,EAChBwjB,MAAO,IACPrQ,SAAU,IACVlT,QAAoBwjB,GAAA,CAClBA,EAAMC,UAAU,EAChB1mB,EAAO2mB,aAAe5b,EAEpBjL,EAAAA,EACK,IAAGA,CAAS,MAAKqmB,EAAU3lB,EAAG,GAC9B,MAAK2lB,EAAU3lB,EAAG,EACzB,CACF,CAAA,CACD,EAEL,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAACgD,EAAWojB,cACZ7jB,EAACc,GAAK,CACJH,QAASA,IAAM,CACb1D,EAAO4mB,aAAe,EACxB,EAAE1jB,SAEFH,EAAC8jB,GAAQ,CACPnjB,QAASA,IAAM,CACb1D,EAAO4mB,aAAe,EACxB,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAACpjB,EAAWsjB,cACZ/jB,EAACc,GAAK,CACJH,QAASA,IAAM,CACb1D,EAAO8mB,aAAe,EACxB,EAAE5jB,SAEFH,EAACuB,GAAQ,CACPZ,QAASA,IAAM,CACb1D,EAAO8mB,aAAe,EACxB,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAACtjB,EAAWujB,aACZhkB,EAACc,GAAK,CACJC,MAAM,QACNJ,QAASA,IAAM,CACb1D,EAAO+mB,YAAc,EACvB,EAAE7jB,SAEFH,EAAC0V,GAAY,CACXlT,UAAS/B,EAAAA,EAAWujB,cAAXvjB,YAAAA,EAAwB+B,UAAW/B,EAAWujB,YACvDjnB,UAAU0D,EAAAA,EAAWujB,cAAXvjB,YAAAA,EAAwB1D,SAClC4D,QAASA,CAAC,CAAEsjB,YAAAA,CAAY,EAAI,KAAO,CACjChnB,EAAO+mB,YAAc,EAKvB,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAACvjB,EAAWyjB,YACZlkB,EAACc,GAAK,CACJH,QAASA,IAAM,CACb1D,EAAOinB,WAAa,EACtB,EAAE/jB,SAEFH,EAACqW,GAAM,CAAC1V,QAASA,IAAO1D,EAAOinB,WAAa,EAAA,CAAS,CAChD,CAAA,EAER,CAAC,CAACzjB,EAAW0jB,gBACZnkB,EAACc,GAAK,CACJZ,QAAgBR,GAAA,EAEZA,EAAE0J,SAAW1J,EAAEihB,eACfjhB,EAAE0J,OAAOgb,UAAUC,SAAS,OAAO,KAEnCpnB,EAAOknB,eAAiB,GAE5B,EAAEhkB,SAEFH,EAACskB,GAAU,CACT3M,iBAAkBlX,EAAW0jB,eAAexM,iBAC5C5a,SAAU0D,EAAW0jB,eAAepnB,SACpC2hB,MAAOje,EAAW0jB,eAAezF,MACjC6F,SAAU9jB,EAAW0jB,eAAeI,SACpC5jB,QAASA,IAAM,CACb1D,EAAOknB,eAAiB,EAC1B,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAAC1jB,EAAW+jB,uBACZxkB,EAACc,GAAK,CACJC,MAAM,QACNJ,QAASA,IAAM,CACb1D,EAAOunB,sBAAwB,EACjC,EAAErkB,SAEFH,EAACif,GAAiB,CAChBte,QAASA,IAAO1D,EAAOunB,sBAAwB,EAAA,CAChD,CACI,CAAA,EAER,CAAC,CAAC/jB,EAAW2Y,qBACZpZ,EAACc,GAAK,CACJC,MAAM,QACNJ,QAASA,IAAM,CACb1D,EAAOmc,oBAAsB,EAC/B,EAAEjZ,SAEFH,EAAC+Y,GAAe,CACdhc,SAAU0D,EAAW2Y,oBAAoBrc,SACzCyT,yBACE/P,EAAW2Y,oBAAoB5I,yBAEjC7P,QAASA,IAAO1D,EAAOmc,oBAAsB,EAAA,CAC9C,CACI,CAAA,EAER,CAAC,CAAC3Y,EAAWgkB,cACZzkB,EAACc,GAAK,CACJC,MAAM,QACNJ,QAAgBjB,GAAA,CACdzC,EAAOwnB,aAAe,EACxB,EAAEtkB,SAEFH,EAACya,GAAa,CACZla,IAAKE,EAAWgkB,aAAalkB,KAAOE,EAAWgkB,aAC/C/J,MAAMja,EAAAA,EAAWgkB,eAAXhkB,YAAAA,EAAyBia,KAC/B/Z,QAASA,IAAM,CACb1D,EAAOwnB,aAAe,EACxB,CAAA,CACD,CACI,CAAA,EAER,CAAC,CAAChkB,EAAWikB,gBACZ1kB,EAACc,GAAK,CACJH,QAASA,IAAM,CACb1D,EAAOynB,eAAiB,EAC1B,EAAEvkB,SAEFH,EAACsY,GAAU,CACTC,KAAM9X,EAAWikB,eAAenM,KAChC1V,IAAKpC,EAAWikB,eAAe7hB,IAC/BoM,MAAOxO,EAAWikB,eAAezV,MACjCC,OAAQzO,EAAWikB,eAAexV,OAClCvO,QAASA,IAAM,CACb1D,EAAOynB,eAAiB,EAC1B,CAAA,CACD,CAAA,CACI,CACR,CAAA,CACD,CAEN,CCvNA,SAASC,GAAqB,CAAExa,UAAAA,EAAW2V,SAAAA,CAAS,EAAG,CAC/C,KAAA,CAAEhjB,MAAAA,GAAUuB,EAAI,EAChB,CAACgK,EAASC,CAAU,EAAI1L,EAAS,SAAS,EAC1C,CAACgoB,EAAcC,CAAe,EAAIjoB,EAAS,IAAI,EAC/C,CAACoU,EAAcqB,CAAe,EAAIzV,EAAS,IAAI,EAE/CkoB,EAAkB9T,IAAiB,KAEzC,OACE7P,EAAA,IAAA,CAAGJ,MAAM,yBAAwBZ,UAC/BH,EAAA,SAAA,CACEC,KAAK,SACL0D,SAAU0E,IAAY,WAAayc,EACnC5kB,QAASA,IAAM,CACboI,EAAW,SAAS,EACpBuc,EAAgB,QAAQ,GACvB,SAAY,CACP,GAAA,CACIrM,MAAAA,EAAM,MAAM1b,EAAMM,GAAG2nB,eACxB/hB,QAAQmH,CAAS,EACjB6a,YACC,GAAA,EAACxM,GAAAA,MAAAA,EAAKnH,YACF,MAAA,IAAI4T,MAAM,6BAA6B,EAE/C5S,EAAgBmG,CAAG,EACVsH,GAAA,MACC,CAAA,CACV1jB,WAAe,CAAA,IAEjBkM,EAAoB,SACnB,QAAA,CACL,EAAA,IAAAtI,EAAA,SAAA,CAAEG,KACH,SAEO,SACRH,IAAA,WAAA8kB,EACE7kB,MAAK,eACL0D,QAAAA,KACM2E,EAAA,SAAA,IACS,QAAA,GACbA,SAAoB,CACpBuc,GAAAA,CACa,MAAArM,EAAA,MAAA1b,EAAA,GAAA,eAAA,QAAAqN,CAAA,EAAA,SACP,GAAAqO,GAAA,MAAAA,EAAA,WACIA,MAAAA,IAAM,MAAM1b,6BACPqN,EAGHkI,GAAuC,EAC/CyN,GACAzN,MAAAA,CACS/J,EAAA,SAAA,EAETlM,IACAkM,EACF,SAAA,QAAA,CAAA,EACFtI,EAAG,OAAA,CACL,MAAA,wBAAEG,SACH2kB,GAAAF,EAAAA,IAAA,SAAA5kB,EAAAI,EAAA,CAGDJ,KAAA,eAAY,IAAA,kCAGD,CAAA,EAAMA,EAAAI,EAAA,CAAeG,KAAI,WAAWQ,IAAM,WAE/Cf,MAAAA,iBAAK,CAAA,EAAMA,EAAAuT,GAAA,CAAWhT,OAAI8H,IAAA,SAAA,CAAA,CAAiB,CAAiB,CAAA,CAGvD,CAAA,CAAqB,CC5DtC,MAAM6c,GAAqB,CACzBC,QAAS,UACT1a,OAAQ,eACR4P,OAAQ,SACR+K,OAAQ,SACRC,eAAgB,aAChB/K,UAAW,QACX7C,KAAM,OACN9S,OAAQ,SACR,eAAgB,eAChB,eAAgB,iBAClB,EAiBM2gB,GAAc,CAClBH,QAAS,+BACT1a,OAAQ,oBACR4P,OAAQ,qBACR,iBAA8BkL,GAAA,WAAUA,CAAM,kBAC9CC,aAAc,sBACdJ,OAAQ,gBACRC,eAAgB,2BAChB/K,UAAW,mBACX,oBAAiCiL,GAAA,SAAQA,CAAM,kBAC/CE,gBAAiB,oBACjBhO,KAAM,iDACN,YAAa,qCACb,aAAc,sCACd9S,OAAQ,8CACR,mBAAoB,6BACpB,2BACG4gB,GAAA,mBAAkBA,CAAM,kBAC3B,yBAA0B,8BAC1B,gBAAiB,aACjB,eAAmCpkB,GAAAA,EAAAC,EAAA,CAAAjB,SAAA,CAAE,YAAUulB,CAAa,CAAA,CAAG,CACjE,EAEMC,GAAgB,GAEtB,SAASC,GAAa,CACpBnnB,aAAAA,EACA1B,SAAAA,EACA8oB,SAAAA,EACAC,mBAAAA,CACF,EAAG,aACK,KAAA,CAAEroB,GAAAA,EAAIgN,OAAAA,EAAQjI,QAAAA,EAASujB,OAAAA,EAAQC,UAAAA,EAAWC,UAAAA,CAAcxnB,EAAAA,EAC1D,GAAA,CAAEwB,KAAAA,CAASxB,EAAAA,EAGTynB,MAAAA,GAAezb,GAAAA,YAAAA,EAAQ4P,SAAU5P,EACjC0b,EAAiBD,GAAAA,YAAAA,EAAczoB,GAE/BmE,EAAiBH,GAAMI,QAAQC,IAAI,gBAAgB,EACnD4K,EAAS9K,KAAmBY,GAAAA,YAAAA,EAAS/E,IACrC2oB,GAAU3b,EAAAA,GAAAA,YAAAA,EAAQgN,OAARhN,YAAAA,EAAc4b,MACxBC,EACJ,CAAC,EAAC7b,GAAAA,MAAAA,EAAQ8b,sBACV9b,GAAAA,YAAAA,EAAQ8b,sBAAuB3kB,KAC/B6I,EAAAA,GAAAA,YAAAA,EAAQjI,UAARiI,YAAAA,EAAiBhN,MAAOmE,EAE1B,IAAI4kB,EAAY,EACZC,EAAe,EACnB,GAAIxmB,IAAS,mBAAoB,CAC/B,UAAWuC,KAAWwjB,GAChBxjB,EAAAA,EAAQwX,SAARxX,MAAAA,EAAgBsW,SAAS,cAC3B0N,KAEEhkB,EAAAA,EAAQwX,SAARxX,MAAAA,EAAgBsW,SAAS,WAC3B2N,IAGA,CAACA,GAAgBD,IAAkBvmB,EAAA,aACnC,CAACumB,GAAaC,IAAqBxmB,EAAA,SACzC,CAEImU,IAAAA,EAuBA,GAtBAnU,IAAS,OACXmU,EAAOkR,GAAY5Y,EAAS,YAAc0Z,EAAU,aAAe,MAAM,EAEzEnmB,IAAS,UACTA,IAAS,aACTA,IAAS,oBAELgmB,GAAAA,YAAAA,EAAWroB,QAAS,EACf0nB,EAAAA,GAAa,GAAErlB,CAAK,UAAS,EAC3BqmB,EACFhB,EAAAA,GAAa,GAAErlB,CAAK,QAAO,EAElCmU,EAAOkR,GAAYrlB,CAAI,EAEhBqlB,GAAYrlB,CAAI,EACzBmU,EAAOkR,GAAYrlB,CAAI,EAIvBmU,EAAQ,+BAA8BnU,CAAK,IAGzC,OAAOmU,GAAS,WAAY,CACxBmR,MAAAA,GAAQU,GAAAA,YAAAA,EAAWroB,UAAUooB,GAAAA,YAAAA,EAAWpoB,QAC9C,GAAI2nB,EACFnR,EAAOA,EAAKmR,CAAK,UACRtlB,IAAS,eAAgB,CAClC,MAAMylB,EAAgBK,GAAAA,YAAAA,EAAQL,cAC1BA,IACKtR,EAAAA,EAAKpU,EAACiD,GAAQ,CAACT,QAASkjB,EAAegB,WAAU,EAAE,CAAA,CAAC,EAE/D,CACF,CAEIzmB,GAAAA,IAAS,WAAa,CAACwK,EAElB,OAAA,KAGHkc,MAAAA,EACJloB,EAAaiN,WAAa,IAAIpM,KAAKb,EAAaiN,SAAS,EAAEkb,iBAEvDC,EACJ,CACE,mBAAoB,oBACpBvM,UAAW,YACXD,OAAQ,cACR+K,OAAQ,cAAA,EACRnlB,CAAI,GAAK,WACP6mB,EAA4BA,IAAM,CACtC7pB,EAAOmc,oBAAsB,CAC3B9I,QAASuW,EACTrlB,SAAUwkB,EACV1M,cAAerZ,IAAS,mBACxBuQ,yBAA0BvQ,IAAS,SAAW,CAAC,YAAY,EAAI,CAAA,CAAA,CACjE,EAGM8mB,OAAAA,EAAAA,MAA6BtoB,CAErC,mCACEwB,CAAA,GACEc,yBACA,SAAsBtD,IACtB6E,SAAS,CAAAtC,EAAA,MAAA,CAAGG,MAAAA,kCAEZF,CAAA,GACEc,MAAQ4lB,EACRnjB,SAAOmjB,IAAAA,mBAAAA,EAAAA,EAAAA,CAEN1mB,SAAAA,CAAAA,EAAAA,EACCkB,CAAAhB,KAAAA,SACQE,KAAK,KAASC,IAAKL,EAAKM,MAAKN,aAAAA,CAAAA,EAAYD,EAAAI,EAAA,CAC/CJ,KAAAA,QAAMK,KAAK,KAAQC,IAAKL,EAAKM,MAAKN,gBAAAA,CAAAA,CAAMc,CAAM,CAAA,EAAmBf,EAAAI,EAAA,CAGnEJ,KAAAA,GAAKC,CAAA,GAAA,eACHI,KAAM6kB,KACN5kB,IAAKL,CAAA,CAAA,CACAA,CAAAA,EACNkB,EAAA,MAAA,CAGLA,MAAAA,uBAAKJ,SAAM,CAAAd,IAAA,WAAAkB,EAAAC,EAAA,UACC,CAAAD,EAAA,IAAA,CACRhB,SACEgB,CAAAA,CAAAA,eAAA,KAAAlB,CAAA,GAAAD,EAAAoB,EAAA,CAAAjB,UACI6lB,GAAA,YAAAA,EAAA,QAAoB/lB,EAAIkB,IACxB,CACG6kB,SAAAA,CAAAA,EAAAA,IAAoB,CACnB7lB,SACEgB,IAAGmB,QAASwkB,EAAI5mB,SAAS4mB,CAAAA,EAAAA,OAAAA,CAA0B3mB,MAAAA,EACjD,OAAMqD,SAAiB5F,GAAAA,EAAAA,MAAAA,CAAAA,CAAOuC,EAAAA,IAAAA,QACb6lB,CAAiB,CAAA,EAC1B,GAAA,CAEV,CAAA,IAAQ5kB,EAAA,CAGVD,SAAA,CAAAnB,EAAAiD,GAAA,CAAA9C,QAAAA,EACYqC,WAAAA,EAAAA,CAAAA,EAA4B,GAAA,CAAA,CAAA,CAAO,CAAA,EAC7C4R,EAAAnU,IAAA,WAAAkB,EAAA,OAAA,CAIPiT,MAAAA,gBAEOrT,SAAM,CAAA,IAAA,IAAA,IAAAf,EAAAgnB,GAAA,UACTvoB,EACC,UAEAwoB,cAAuBvb,CAAAA,CACvBwb,CAAO,CAAA,CAAO,CACd,CAAA,EAELjnB,IAAA,kBAAAD,EAAA2kB,GAAA,CACA,UACOniB,EAAA,EACa,CAAA,CAAC2H,CAAmB1M,CAAAA,GAC1CuoB,GAAA,YAAAA,EAAA,QAAA,GAAA7kB,EAAA,IAAA,CAGJ6kB,MAAAA,gBACIjlB,SAAM,CAAAilB,EAAA,MAAA,EAAAL,EAAA,EAAA,IAAA/Y,GAAAzL,EAAAgmB,EAAA,CAAehnB,SACrB6lB,CAAAA,EAAAA,IAAgB,CACN7lB,KAAAA,EACP,IAEE8D,0BACAuU,MAAI,uBACJzX,QAAMrB,GAAA,kBACU,EACdA,EAAiB,YAAAkN,CACjB3P,EACF,SAAA,CAAA+C,EAAA4C,GAAA,CAAEzC,IAAAA,EAEDyC,aACCC,KAAaC,EAAAA,QAAAA,GAAAA,MAAAA,EAAAA,OAAAA,GAAAA,KAAAA,EAAAA,OAAAA,GAAAA,IAAAA,EAAAA,OAAAA,GAAAA,IAAAA,IACbxC,OACY1C,EAAAA,WACN,KAAAgP,SAUNrM,SAAQiC,GAAAA,YAAAA,EAAoB,GAAiB,IACnCA,EAASiJ,EAAAA,IAAAA,oBAAAA,EAAAA,MAAAA,OAFNhO,oBAKRsD,SAAM6L,EAAA,OAAA,IAAAwa,GAAApnB,EAAAI,EAAA,UACYH,EAEjBI,KAAM6kB,IACN5kB,MAAK,GAAA8mB,CAAA,OAAA,CACLrmB,CAAAA,CAAe,CAAA,CAAO,CAEzB,EACE6L,EACN,EAAA,EAAA,GAAA,CAAA,EApCIpK,EAAAA,EAAQ/E,CAqCZ,EAAA0D,EAAK,SAAA,MAvCa1D,SA2CvBwC,MAAK,cACLc,QAAM+lB,EACN5mB,SAAS4mB,CAAAA,EAAAA,OAAAA,IAAAA,IAAAA,EAAAA,OAAAA,EAAAA,GAAAA,EAAAA,EAAAA,CAA0B3mB,KAAAA,cAI9B,CAAA,CAACE,CAAK,CAAA,CAAc,CAAG,CAAA,GACrB4lB,GAAA,YAAAA,EAAA,QAAA,GAAAjmB,EAAA,KAAA,CAGZimB,MAAAA,8BACKllB,SAAMklB,EAAA,IAAAoB,GAAArnB,EAAA,KAAA,UACGsB,EAAAA,GAAKmJ,CACdtK,MAAAA,2BACgBF,CAAA,GACZc,GAAAA,eAAuC,EAAA,GAAA,MAAAsmB,EAAA,EAAA,GACvCljB,SACcnE,EAAAsnB,GAAY,CACzBnnB,OAEDH,EACEyK,KAAQA,IACRnK,YAAK,GACLinB,iBAAW,EAAA,CAAA,CACK,CAAA,CACjB,EACYF,EAAA,EAAA,CAAA,CAAA,CAAC,EAAA5c,IACd,EACLwb,GAAA,MAAAA,EAAA,UAAAA,GAAA,YAAAA,EAAA,SAAA,IAAAjmB,EAAAwnB,GAAA,CAGJ/c,MAAAA,4BAA4C7M,GAEzCmD,GAAAA,cAAuC,GAAA,MAAAolB,CAAA,GACvChiB,cAEUpH,EAiBF,OAjB+B2C,GAAA,CAGvC+nB,MAAAA,EACE/nB,EAAComB,OAAAA,cACU,SAAA,EACL,GAAAxC,EAAa5jB,CACb,GAAUA,EAAA,QAER,OAAeA,EAAA,eAAA,EACfA,EAAiB,cAAA,IAAA,WAAA,cAAA,CACZgoB,QAAAA,EAAAA,QAEDC,QAASjoB,EAAEioB,OAAAA,CAAAA,CACXC,CAAWA,CAGjB,EACF,SACAtiB,EAAAA,EAAAA,GAAAA,CACLnF,OAEA0lB,EAEGpb,KAAQyb,IACR5lB,YAAK,GACLinB,iBAAW,EAAA,CAAA,EACKvnB,EAAAsnB,GAAA,CAGlBtnB,SAAOmmB,EACL5B,KAAU4B,IACV7lB,YAAK,GACLinB,iBAAW,EAAA,CAAA,CACK,CAAA,CAAA,CACjB,CAAA,CACF,CAEJ,CAAA,CACG,CAGZ,SAAAC,GAAAK,EAAA,CAEA,MAAAtlB,OACE,SAAYulB,EAAa,CACzB,GAAAD,EAAY,iBAAKA,cAAO,IAAAtlB,CAAe,CAAcA,CAAAA,CACvD,MAAA/F,GAAAA,GAAAopB,EAAA,ECnVM,kBAAmB7gB,WACrB3I,wBAAsC,iBAAA,UAAA2rB,GAAA,CAC5B7iB,KAAAA,CACAvG,KAAAA,EACF,GAAAlB,EAAEwC,YAAAA,CAAAA,GAAMxC,GAAAA,YAAAA,EAAAA,OAAAA,GAAIuqB,IAAAA,iBAAY/qB,EAAW6J,kBAAS,CAC9C7G,GAAAA,EACFhD,YAAAA,CAA2B,EAEzB+qB,CACF,EAEH,MAAAC,GACHzrB,GAAA,UAAA,CACF,GAAA,EAAA,kBAAA,WAEeA,OAAAA,KACb,MAAMiE,EAAmBsE,GAAAA,CAAAA,EAAmB,CAEtCtE,kBAAAA,CACA,EAAAA,EAAEynB,CAAsBznB,GAAAA,EAEtB9B,YAAAA,CAER,EAAMupB,GAAA,CAAA,EAAEzqB,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAIuqB,GAAAA,IAAAA,CAAY,UACxB,OAEAG,KAAAA,CACM,SAAQH,CAAa,EAAA3pB,EAAA,EACnB,CAAEtB,MAAAA,YACF,EAAAsB,EAAA,CAAEvB,YAAAA,CAAAA,CAAOC,EAAiBqrB,EAAAnd,IAAAlO,EAC9BirB,EAAAA,EAAAA,GAAAA,CAAAA,EAAAA,GAAAA,GACD,SAAA,CACD5rB,MAAQuC,EAAW,MAAA7B,EAAA,GAAA,cAAA,QAAAW,CAAA,EAAA,QAAEuqB,GAAAA,GAAAA,EAAAA,CAAa/c,MAAAA,EAAAA,EAAAA,YAAiBlO,CAAU,KAAAkD,EACvDmoB,OAAAA,EACA5lB,QAAUwlB,CAGH,EAAAvpB,EACLA,EAAAA,CAAAA,CAAe,SAAYrB,oCAAmC,QACvC,UAAA,CAAA,EAAAirB,GAAA,MAAAA,EAAA,IAC3BjsB,EAAgC,CAAA,EAAAisB,GAAA,MAAAA,EAAA,IAAE5qB,EAAAA,CAAAA,EAAAA,GAAAA,MAAAA,EAAAA,IAAIgB,GAAAA,EAAc+D,EAAAA,YAAAA,CAAS,QAAA6lB,EAC7D,UACA,EAAQpoB,GAAAA,CAAAA,GAAAA,GAAAA,EAAMwK,EAAAA,CAAiB4d,GAAAA,EAAwB5pB,QAAAA,EACvD,aAAAA,EACA,aAAA2pB,CACA,CAAME,IAIJrrB,SAAqB,KAAA,IAAAgO,CAAA,MAAAR,EAAA,EAAA,GACV4d,EACTtrB,SAAU+S,KAAAA,IAAAA,CAAAA,MAAAA,EAAAA,EAAAA,GAEHjP,SAAAA,KAAAA,gBAMPpD,CACA+E,IACA/D,EACA2pB,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,GACD,IAAA,CACH,2BAAO,eACL,UAAe,cAAA,CAEsC,EAAA,CAAA,CAAA,EAGnDpgB,GAASugB,GAA2B,CAA4B7rB,IAC3D,2BAAA,gBAELsL,UAAAA,cAAgB,CAClB,CACF,EAAA,MACKrH,EAAA,IAAA,CACG6nB,MACVvrB,EAAA,kBAAA,KACC,wBAAA,KAAA,SAAA,IAAA,IACDQ,SAAIuqB,KAAY,iBAuBlB,EACEjjB,GAAAA,EAAwB,CAC1B,KAAA,IACG0jB,EACLhtB,QAAAA,EACMiB,aAAAA,EACFN,aAAAA,CACA2I,EAAAA,EACF,OAAA/E,EAAAc,GAAA,CACD,MAAA,QAED,WAAsB,CACpB4nB,EAAAA,SAAAA,EAAAA,eACAzrB,GAIE+K,EACF,SAAA7G,EAAA,MAAA,CACF,MAAA,QAE2B,SAAA,KACnB,SAAA,CAAAnB,EAAA,SAAA,CAAEvC,KAAAA,SAAI+E,MAAAA,cAAS/D,QAAAA,EAAc2pB,SAAAA,EAAAA,EAAAA,CAAiBO,KAAAA,GACpD,CACE3oB,CAAM,CACE,EAAAA,EAAA,SAAA,UACUA,EAAA,IAAA,CACVN,SAAaA,cACfiB,CAAQ,CAAA,CACV,EAAAQ,EAAA,OAAA,CACF,SAAA,CAAA,CAAAinB,GAAApoB,EAAA,IAAA,CAAEG,SAEF,+CAAA,CAAW,EAAAH,EAAA,MAAA,CAAiB,MAAA,oBAAIG,QAC9BH,GAAA,CAAa,KAAA,CAAe,OAAAoJ,CAAuBzI,EAAAA,GAAQR,EACzDH,OAAK,UAAA,UAAAN,EAAA,OAAA,UAAA,MAAMiB,GAEbX,EAAAG,WACEylB,GAAA,CAAG,SAAApjB,EAAA,YAAe,aAAA/D,EAEpB0C,SAAA,EAAA,CACG,CACC,CAAA,EAAGnB,EAAA,MAAA,CAELA,MAAA,CACQ,UAAA,OAKE,SAAAmB,EAAA+C,EAAA,CAAEkF,GAAAA,iBAAO,MAAI1J,eAEnB,QAAakpB,EACH,SAAA,CAAA5oB,EAAA,OAAA,CACV,SAAA,wBAAA,CACF,EAAA,IAAAA,EAAAI,EAAA,CAAED,KAEFH,aAAa,GACO6oB,CAClBpqB,CAAAA,CAAAA,CAAAA,CACQ,CAAA,CAAA,CACT,CAAC,CAEJ,CAAA,CACS,CAEP,OAAA,IAAA,CAAE0B,ECjLV2oB,GAAaC,GAAW,CAAClB,EAAOtlB,IAAQ,CACtC,KAAA,CAAExF,SAAAA,GAAasB,EAAI,EACnB,CAAC2qB,EAAcC,CAAe,EAAIC,GAAgB,EAClD,CAACC,EAAgBC,CAAiB,EAAIxsB,EAAS,EAAK,EACpD,CAACgiB,EAAOyK,CAAQ,EAAIzsB,EAASosB,EAAalnB,IAAI,GAAG,GAAK,EAAE,EACxD7B,EAAO+oB,EAAalnB,IAAI,MAAM,EAC9Buf,EAAUxlB,EAAO,IAAI,EAErBytB,EAAiBztB,EAAO,IAAI,EAClC0tB,OAAAA,GAAoBhnB,EAAK,KAAO,CAC9BinB,SAAqB9rB,GAAA,CACnB2rB,EAAS3rB,CAAK,CAChB,EACAiK,MAAOA,IAAM,CACX2hB,EAAevtB,QAAQ4L,OACzB,EACA8hB,OAAQA,IAAM,CACZH,EAAevtB,QAAQ0tB,QACzB,EACAC,KAAMA,IAAM,CACVJ,EAAevtB,QAAQ2tB,MACzB,CACA,EAAA,EAGAvoB,EAAA,OAAA,CACEoB,IAAK8e,EACLtgB,MAAM,2BACNiI,SAAiBtJ,GAAA,OAIf,GAHAA,EAAEuJ,eAAe,EAEI,WAAW/F,KAAK8E,SAASugB,IAAI,EAEhD,GAAI3J,EAAO,CACT,MAAM+K,EAAS,CACb5X,EAAG6M,CAAAA,EAED3e,IAAM0pB,EAAO1pB,KAAOA,GACxBgpB,EAAgBU,CAAM,CAAA,MAEtBV,EAAgB,CAAE,CAAA,OAGhBrK,EACO2J,SAAAA,KAAQ,aAAY1J,mBAAmBD,CAAK,CAAE,GACrD3e,EAAQ,SAAQA,CAAK,GAAI,EAC1B,GAED+H,SAASugB,KAAQ,WAIrBV,EAAAA,GAAAA,YAAAA,EAAO7e,WAAP6e,MAAAA,EAAAA,KAAAA,EAAkBnoB,EACpB,EAAES,UAEFH,EAAA,QAAA,CACEuC,IAAK+mB,EACL5rB,MAAOkhB,EACPxO,KAAK,IACLnQ,KAAK,SAELme,YAAY,SACZxL,IAAI,OACJgX,aAAa,MACbjI,YAAY,MACZkI,eAAe,MACfC,WAAW,QACXC,SAAiBrqB,GAAA,CACVA,EAAE0J,OAAO1L,OACZurB,EAAgB,CAAE,CAAA,CAEtB,EACA1G,QAAgB7iB,GAAA,CACLA,EAAAA,EAAE0J,OAAO1L,KAAK,EACvB0rB,EAAkB,EAAI,CACxB,EACAY,QAASA,IAAM,SACbZ,EAAkB,EAAI,GACtB/H,GAAAA,EAAAA,EAAQtlB,UAARslB,YAAAA,EACIthB,cAAc,0BADlBshB,MAAAA,EAEI+C,UAAU1V,IAAI,QACpB,EACAub,OAAQA,IAAM,SACZ1rB,WAAW,IAAM,CACf6qB,EAAkB,EAAK,GACtB,GAAG,GACN/H,GAAAA,EAAAA,EAAQtlB,UAARslB,YAAAA,EACIthB,cAAc,gCADlBshB,MAAAA,EAEI+C,UAAUvf,OAAO,QACvB,EACAqlB,UAAkBxqB,GAAA,OACV,KAAA,CAAEmX,IAAAA,CAAQnX,EAAAA,EAChB,OAAQmX,EAAG,CACT,IAAK,SACHuS,EAAkB,EAAK,EACvB,MACF,IAAK,OACL,IAAK,YAEH,GADA1pB,EAAEuJ,eAAe,EACbkgB,EAAgB,CAClB,MAAMgB,EAAY9I,EAAQtlB,QAAQgE,cAChC,4BACF,EACA,GAAIoqB,EAAW,CACb,IAAIC,EAAWD,EAAUE,mBAClBD,KAAAA,GAAYA,EAASnuB,QAC1BmuB,EAAWA,EAASC,mBAElBD,IACOhG,EAAAA,UAAU1V,IAAI,OAAO,EACbiL,MAAM0G,KACrB+J,EAASE,cAAcnqB,QACzB,EAAEyW,OAAe2T,GAAAA,IAAOH,CAAQ,EACvBtd,QAAgByd,GAAA,CACpBnG,EAAAA,UAAUvf,OAAO,OAAO,CAAA,CAC5B,EACH,KACK,CACL,MAAM2lB,EAAYnJ,EAAQtlB,QAAQgE,cAChC,sBACF,EACIyqB,GACQpG,EAAAA,UAAU1V,IAAI,OAAO,CAEnC,CACF,CACA,MACF,IAAK,KACL,IAAK,UAEH,GADAhP,EAAEuJ,eAAe,EACbkgB,EAAgB,CACZgB,MAAAA,EAAYjuB,SAAS6D,cACzB,4BACF,EACA,GAAIoqB,EAAW,CACb,IAAIM,EAAWN,EAAUO,uBAClBD,KAAAA,GAAYA,EAASxuB,QAC1BwuB,EAAWA,EAASC,uBAElBD,IACOrG,EAAAA,UAAU1V,IAAI,OAAO,EACbiL,MAAM0G,KACrBoK,EAASH,cAAcnqB,QACzB,EAAEyW,OAAe2T,GAAAA,IAAOE,CAAQ,EACvB3d,QAAgByd,GAAA,CACpBnG,EAAAA,UAAUvf,OAAO,OAAO,CAAA,CAC5B,EACH,KACK,CACC8lB,MAAAA,EAAWzuB,SAAS6D,cACxB,iCACF,EACI4qB,GACOvG,EAAAA,UAAU1V,IAAI,OAAO,CAElC,CACF,CACA,MACF,IAAK,QACH,GAAIya,EAAgB,CACZgB,MAAAA,EAAYjuB,SAAS6D,cACzB,4BACF,EACIoqB,IACFzqB,EAAEuJ,eAAe,EACjBkhB,EAAUS,MAAM,GAElBxB,EAAkB,EAAK,GACvBvB,EAAAA,GAAAA,YAAAA,EAAO7e,WAAP6e,MAAAA,EAAAA,KAAAA,EAAkBnoB,EACpB,CACA,KACJ,CACF,CAAA,CACD,EACDM,EAAA,MAAA,CAAKe,MAAM,iBAAiB9E,OAAQ,CAACktB,GAAkB,CAACvK,EAAMze,SAa3D,CAAC,CAACye,GACD,CACE,CACEvL,MACElS,EAAAC,EAAA,CAAAjB,SACGye,CAAAA,EAAO,IACR5e,EAAA,QAAA,CAAOe,MAAM,gBAAeZ,SAAC,8BAAA,CAEtB,CAAC,CAAA,CACR,EAEJgE,GAAK,aAAY0a,mBAAmBD,CAAK,CAAE,GAC3CiM,IAAK,CAAC5qB,GAAQ,CAAC,KAAKiD,KAAK0b,CAAK,EAC9B3iB,OAAQ,CAAC,CAACgE,CAAAA,EAEZ,CACEoT,MACElS,EAAAC,EAAA,CAAAjB,SAAA,CAAE,cACWH,EAAA,IAAA,CAAAG,SAAIye,CAAAA,CAAS,CAAC,CAAA,CACzB,EAEJza,GAAK,aAAY0a,mBAAmBD,CAAK,CAAE,iBAC3C3iB,OAAQ,WAAWiH,KAAK0b,CAAK,EAC7BiM,IAAK,KAAK3nB,KAAK0b,CAAK,EACpBve,KAAM,UAAA,EAER,CACEgT,MACElS,EAAAC,EAAA,CAAAjB,SAAA,CAAE,qBACkBgB,EAAA,OAAA,CAAAhB,SAAA,CAAM,IAAEye,EAAMhZ,QAAQ,KAAM,EAAE,CAAC,CAAA,CAAO,CAAC,CAAA,CACzD,EAEJzB,GAAK,IAAGpH,CAAS,MAAK6hB,EAAMhZ,QAAQ,KAAM,EAAE,CAAE,GAC9C3J,OACE,KAAKiH,KAAK0b,CAAK,GAAK,WAAW1b,KAAK0b,CAAK,GAAK,KAAK1b,KAAK0b,CAAK,EAC/DiM,IAAK,KAAK3nB,KAAK0b,CAAK,EACpB3e,KAAM,OACNI,KAAM,SAAA,EAER,CACEgT,MACElS,EAAAC,EAAA,CAAAjB,SAAA,CAAE,WACQH,EAAA,OAAA,CAAAG,SAAOye,CAAAA,CAAY,CAAC,CAAA,CAC5B,EAEJza,GAAK,IAAGya,CAAM,GACd3iB,OAAQ,CAAC,WAAWiH,KAAK0b,CAAK,EAC9BiM,IAAK,WAAW3nB,KAAK0b,CAAK,EAC1B3e,KAAM,MAAA,EAER,CACEoT,MACElS,EAAAC,EAAA,CAAAjB,SAAA,CAAE,iBACcH,EAAA,IAAA,CAAAG,SAAIye,CAAAA,CAAS,CAAC,CAAA,CAC5B,EAEJza,GAAK,aAAY0a,mBAAmBD,CAAK,CAAE,iBAC3Cve,KAAM,OACP,CAAA,EAEA2U,KAAK,CAAC1F,EAAGN,IACJM,EAAEub,KAAO,CAAC7b,EAAE6b,IAAY,GACxB,CAACvb,EAAEub,KAAO7b,EAAE6b,IAAY,EACrB,CACR,EACAjU,OAAO,CAAC,CAAE3a,OAAAA,CAAAA,IAAa,CAACA,CAAM,EAC9BqF,IAAI,CAAC,CAAE+R,MAAAA,EAAOlP,GAAAA,EAAI9D,KAAAA,EAAMJ,KAAAA,CAAAA,EAAQwC,IAC/BtB,EAAC+C,EAAI,CACHC,GAAAA,EACApD,MAAQ,uBAAsB0B,IAAM,EAAI,QAAU,EAAG,GAErDvC,QAAgBR,GAAA,QACdmoB,EAAAA,GAAAA,YAAAA,EAAO7e,WAAP6e,MAAAA,EAAAA,KAAAA,EAAkBnoB,EACpB,EAAES,SAAA,CAEFH,EAACI,EAAI,CACHC,KAAMA,IAASJ,IAAS,OAAS,cAAgB,UACjDc,MAAM,oBAAA,CACP,EACDf,EAAA,OAAA,CAAAG,SAAOkT,CAAY,CAAA,EAAE,GAAG,CAAA,CACpB,CACP,CAAA,CACF,CAAC,CAAA,CACF,CAEV,CAAC,ECjRDyX,GAAetuB,GAAK,SAAuB,CAAEmE,QAAAA,EAAUA,IAAM,CAAC,CAAE,EAAG,CACjE,KAAM,CAACoqB,EAAYC,CAAa,EAAIpuB,EAAS,EAAK,EAC5CquB,EAAgBpvB,EAAO,IAAI,EAEjCuD,GACE,CAAC,QAAS,GAAG,EACNM,GAAA,CACLsrB,EAAc,EAAI,EAClBzsB,WAAW,IAAM,cACf0sB,GAAAA,EAAAA,EAAclvB,UAAdkvB,YAAAA,EAAuBtjB,QAAvBsjB,MAAAA,EAAAA,KAAAA,IACAA,GAAAA,EAAAA,EAAclvB,UAAdkvB,YAAAA,EAAuBxB,SAAvBwB,MAAAA,EAAAA,KAAAA,IACC,CAAC,CAAA,EAEN,CACEhiB,eAAgB,GAChBnJ,gBAAwBJ,GAAA,CACtB,MAAMwrB,EAAe,WAAWhoB,KAAK8E,SAASugB,IAAI,EAC5C1nB,EAAW,CAAC,CAAC3E,SAAS6D,cAAc,sBAAsB,EAChE,OAAOmrB,GAAgBrqB,CACzB,CAAA,CAEJ,EAEA,MAAMsqB,EAAcA,IAAM,CACxBH,EAAc,EAAK,EACXrqB,GAAA,EAGVvB,OAAAA,GACE,MACOM,GAAA,UACLurB,GAAAA,EAAAA,EAAclvB,UAAdkvB,YAAAA,EAAuBvB,OAAvBuB,MAAAA,EAAAA,KAAAA,GACYE,GAAA,EAEd,CACEC,QAASL,EACTM,iBAAkB,GAClBpiB,eAAgB,EAAA,CAEpB,EAGEjJ,EAAA,MAAA,CACEvC,GAAG,2BACHxB,OAAQ,CAAC8uB,EACT7qB,QAAgBR,GAAA,CACdtD,EAAAA,SAAasD,EAAA,eACTA,GAEJ,EACF,SAAAM,EAAA8oB,GAAA,CAAE3oB,IAAAA,EAGAoC,SAAK0oB,IAAAA,IAES,CAAA,CACd,CAAA,CAAA,CACD,CAAA,EC9CP,SAASK,IAAY,CACb,KAAA,CAAEvuB,SAAAA,GAAasB,EAAI,EACnBoC,EAAaC,GAAYzD,CAAM,EAC/B,CAAEiiB,UAAAA,EAAWlE,SAAAA,CAAava,EAAAA,EAKhC,GAHI,CAACye,EAAUthB,QAIbod,EAAS6E,oBAAsB,gBAC9B,CAAC7E,EAAS6E,mBAAqB7E,EAASuQ,qBAElC,OAAA,KAGT,MAAMC,EAAU3vB,IAEV4vB,EAAqBtgB,GACzB,IACE+T,EACG5d,IAAI,CAACoqB,EAAKjpB,IAAM,CACT,KAAA,CAAExC,KAAAA,EAAM,GAAG6G,CAAS4kB,EAAAA,EACtB,GAAA,CAACjN,GAAexe,CAAI,EAAU,OAAA,KAC9B,GAAA,CAAExC,GAAAA,EAAIsW,KAAAA,EAAMvQ,MAAAA,EAAOmb,SAAAA,EAAUte,KAAAA,CAAAA,EAASoe,GAAexe,CAAI,EAEzD,OAAA,OAAOxC,GAAO,aACXA,EAAAA,EAAGqJ,EAAMrE,CAAC,GAEb,OAAOsR,GAAS,aAClBA,EAAOA,EACL,CACE,GAAGjN,EACH/J,SAAU+J,EAAK/J,UAAYA,GAE7B0F,CACF,GAEE,OAAOe,GAAU,aACXA,EAAAA,EAAMsD,EAAMrE,CAAC,GAEnB,OAAOkc,GAAa,aACXA,EAAAA,EAAS7X,EAAMrE,CAAC,GAEzB,OAAOpC,GAAS,aACXA,EAAAA,EAAKyG,EAAMrE,CAAC,GAGd,CACLhF,GAAAA,EACAsW,KAAAA,EACAvQ,MAAAA,EACAmb,SAAAA,EACAte,KAAAA,CAAAA,CAEH,CAAA,EACAuW,OAAOmJ,OAAO,EACnB,CAACb,CAAS,CACZ,EAEM6D,EAAWC,KACjB5jB,OAAAA,GAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAAG,CAACM,EAAGisB,IAAY,SACxE,MAAMjN,EAAQkN,SAASD,EAAQzqB,KAAK,CAAC,EAAG,EAAE,EAAI,EAC1Cwd,GAAAA,EAAQ+M,EAAmB7tB,OAAQ,CAC/B,KAAA,CAAEmW,KAAAA,CAAAA,EAAS0X,EAAmB/M,CAAK,EACrC3K,IACFgP,EAAShP,CAAI,GACbyX,GAAAA,EAAAA,EAAQzvB,UAARyvB,YAAAA,EAAiBK,YAAjBL,MAAAA,EAAAA,KAAAA,GAEJ,CAAA,CACD,EAGCxrB,EAAA,MAAA,CAAKvC,GAAG,YAAW0C,SAChBM,EAAWua,SAAS6E,oBAAsB,eACzC7f,EAAA,MAAA,CACEe,MAAM,UACN0mB,cAAsB/nB,GAAA,CACpBA,EAAEuJ,eAAe,EACjBhM,EAAOunB,sBAAwB,EACjC,EAAErkB,SAEFH,EAAA,KAAA,CAAAG,SACGsrB,EAAmBnqB,IAClB,CAAC,CAAE7D,GAAAA,EAAIsW,KAAAA,EAAMvQ,MAAAA,EAAOmb,SAAAA,EAAUte,KAAAA,GAAQoC,IAElCzC,EAAA,KAAA,CAAAG,SACEgB,EAAC+C,EAAI,CACHnD,MAAO4d,EAAW,eAAiB,GACnCxa,GAAI4P,EACJ7T,QAAgBR,GAAA,CACd,GAAIA,EAAE0J,OAAOgb,UAAUC,SAAS,WAAW,EAAG,CAC5C3kB,EAAEuJ,eAAe,EACjB,MAAMnB,EAAO5L,SAASoL,eAAgB,GAAE7J,CAAG,OAAM,EACzCkB,GAAAA,EAAAA,CACRmJ,EAAU,UAAA,EACRA,MAAiBgkB,EAAAhkB,EAAA,cAAA,iBAAA,EACXgkB,GAENA,EAAmB,MAAA,CAEnB,CACF,CACF,EACF,SAAA,CAAA9rB,EAAAI,EAAA,CAAED,KAAAA,EAEIE,KAAAA,KAAYC,IAAKkD,CAAA,CAAA,EAAUA,EAAAA,OAAAA,CACjCrC,SAAA,CAAAnB,EAAAsd,GAAA,CAAAnd,SACEH,CAAU,CAAA,EAAEwD,GAAAA,EAAAA,EAAAA,CAAiB,SAE3BrC,CAAAA,EAAAA,KAAA,CAAA,CAAA,EAAAnB,EAAA,QAAA,CAAAG,SACOwe,CACL,CAAA,CAAAxe,CAAQwe,CAAAA,CAAQ,CAAS,CAAA,CAAA,CAE5B,CAAA,CACI,EACH,GAAAlc,CAAA,IAAAhF,CAAA,IAAA+F,CAAA,IAAAmb,CAAA,IAAA5K,CAAA,EAAA,CAAC,CACL,CAAA,CAGV,CAAA,EACE/T,EAAAqD,GAAA,CAGNrD,YAAMwrB,EACJO,SAAaP,OACbQ,WAAS,QACTC,cAAW,4BACXC,IAAc,EACdC,SAAK,SACLC,WAASpsB,EAAA,SAAA,CACTuD,KAAAA,SAEItD,GAAK,mBACLxC,MAAG,QACHsD,cAAMrB,GAAA,kBACgB,EACpBA,EAAiB,sBAAA,EACjBzC,EACF,kBAAAyC,GAAA,aAGM,KAAA,CACI,OAAA0J,CAAEA,EAAAA,EAAW1J,iBAAAA,CAAAA,EAAAA,gBAAAA,UACnB0a,GAAAvb,EAAA2sB,EAAqBpiB,UAArB,YAAAvK,EAAqBuK,YAArB,MAAAgR,EAAA,KAAAvb,GAEA,MAAA,EACW,EACf,SAAAmB,EAAAI,EAAA,CAAED,KAAAA,WAEIE,KAAK,KAAWC,IAAK,WAAA,CAAA,CAAS,CAAA,EAAc,SAC5CmrB,EAAA,IAAA,CAAA,CACTtrB,GAAAA,EAE0B1C,KAAAA,EAAIsW,MAAAA,EAAMvQ,SAAAA,EAAOmb,KAAAA,CAAUte,EAAAA,IAAcc,EAAAkrB,GAAA,CAClE,GAAAtY,EAEI5P,MAAI4P,kBAEJhT,SAAM,CAAAf,EAAAI,EAAA,CAAiBD,KAAAA,EAEjBE,KAAAA,GAAAA,CAAAA,EAAiB,IAAAc,EAAA,OAAA,CAAK,MAC5BA,YAAMJ,SAAM,CAAAf,EAAA,OAAA,CAAWG,SACrBH,EAAAsd,GAAA,CAAAnd,UACY,CAAA,CAAEqD,CAAAA,EAAiBmb,GAAAxd,EAAAC,EAAA,CACzB,SAEJD,CAAAA,IAAAA,EAAA,QAAA,CAAA,MAAA,qBAESJ,SAAM4d,CAAA,CAAA,CAAoBxe,CAAEwe,CAAAA,CAAQ,CAAS,CAAA,EAEvD3e,EAAA,OAAA,CAEHA,MAAA,yCAAMe,SAAM0B,EAAA,CAAA,CAAA,CAAwCtC,CAC7C,EACD,GAACsC,CAAA,IAAAhF,CAAA,IAAA+F,CAAA,IAAAmb,CAAA,IAAA5K,CAAA,EAAA,CAAA,CACC,CAAA,CAEb,CAAA,CACI,CAIf,MAAAvX,GAAAA,GAAA8uB,EAAA,EClMO,SAASgB,GAAYpM,EAAQ,OAClC,IAAIqM,EAAY,CAAA,EACZC,EAAa,CAAA,EACbC,EAAe,EACnB,QAAShqB,EAAI,EAAGA,EAAIyd,EAAOtiB,OAAQ6E,IAAK,CAChCiqB,MAAAA,EAAOxM,EAAOzd,CAAC,EACjBiqB,EAAKrS,QAAU,GAACqS,EAAAA,EAAKlqB,UAALkqB,MAAAA,EAAc5gB,QAChC0gB,EAAWjoB,KAAKmoB,CAAI,EACpBD,MAEAF,EAAUhoB,KAAKmoB,CAAI,EACfD,EAAe,IACFA,EAAA,GAGrB,CAIEvM,GAAAA,EAAOtiB,OAAS,KACf4uB,EAAW5uB,OAASsiB,EAAOtiB,OAAS,GAAK6uB,GAAgB,GAC1D,CAEA,MAAME,EAAeH,EAAWlrB,IAAKmJ,GAAWA,EAAOhN,EAAE,EACzD,GAAI+uB,EAAW5uB,OAAUsiB,EAAOtiB,OAAS,EAAK,EAEhC2uB,EAAA,CACV,GAAGA,EACH,CAAE9uB,GAAIkvB,EAAcC,MAAOJ,EAAYvsB,KAAM,QAAA,CAAU,MAEpD,CAEL,MAAM4sB,EAAO3Y,KAAK4Y,MAAMP,EAAU3uB,OAAS,CAAC,EAC5C2uB,EAAY,CACV,GAAGA,EAAUQ,MAAM,EAAGF,CAAI,EAC1B,CACEpvB,GAAIkvB,EACJC,MAAOJ,EACPvsB,KAAM,QAER,EAAA,GAAGssB,EAAUQ,MAAMF,CAAI,CAAC,CAE5B,CACON,OAAAA,CAAAA,KAEArM,QAAAA,CAEX,CAEgB8M,SAAAA,GAAaJ,EAAO7vB,EAAU,CAC5C,MAAMkwB,EAAmBxrB,GAAMe,QAAQV,IAAI,kBAAkB,GAAK,GAC5DorB,EAAgBN,EAAMhW,OAAiB8V,GAAA,CAC3C,GAAI,CAACA,EAAKrS,OAAe,MAAA,GACzB,MAAM8S,EAAa,GAAEpwB,CAAS,IAAG2vB,EAAKrS,OAAO5c,EAAG,GAC1C2vB,EAAYH,EAAiBE,CAAS,EACxCC,OAAAA,GAAaA,IAAcV,EAAKjvB,GAC1B+qB,IAMHyE,EAAAI,CAAA,EAAAX,EAAA,GAEP,GACA,CAAO,EACRxrB,EAAA,OAAA,KAAA+rB,CAAA,EAEK/rB,OAAAA,EAAAA,OAAcA,IAChBA,EAAAA,UAAkB,OAAA,EAAA,EAAA,QAAA2V,GAAA,CACpB3V,UAA8B,CAC5B,CAAA,EAEJO,GAAA,QAAA,IAAA,mBAAAwrB,CAAA,EACMzqB,CACN,CACF,SAAA8qB,GAAAV,EAAA7vB,EAAA,CAEgBuwB,MAAAA,EAAAA,CAAAA,EACd,IAAAC,EAAmB,EACnBX,EAAmB,QAAAF,GAAA,CACnBE,UAAwB,EAAAnqB,EAAA+qB,EAAA,OAAA/qB,IAAA,CACtB,GAAA+qB,EAAa/qB,CAAGA,EAAI+qB,KAAAA,UAAsBd,EAAA,EAAA,EACpCc,OAA2C,GAAAA,EAAA/qB,CAAA,EAAA,KAAAgrB,GAAAA,EAAA,KAAAf,EAAA,WAAA,GAAAc,EAAA/qB,CAAA,EAAA,KAAAgrB,GAAAA,EAAA,cAAAf,EAAA,EAAA,EAAA,CAC/Cc,KACY,MAAcC,EAGfhrB,MACT,CACF,CACF,MAAAirB,EAAAd,EAAA,KAAAnqB,GAAAA,EAAA,KAAAiqB,EAAA,WAAA,EACAgB,IACAF,EAAiBD,GAAA,EAAA,CAAAb,EAAAgB,CAAA,EAC8B,CAC/C,EACF,QAACjrB,EAAA,EAAAA,EAAA+qB,EAAA,OAAA/qB,IAID,QAAasX,EAAAtX,EAAO+qB,EAAAA,EAAAA,SAAsBzT,IAChByT,EAAAA,CAAAA,EAAS5vB,QAAa4vB,EAAAzT,CAAA,EAAA,SAAA0T,CAAA,CAAA,IAE5CD,EAAgB/qB,CAAA,EAAA,CAAA,GAAA+qB,EAAA/qB,CAAA,EAAA,GAAA+qB,EAAAzT,CAAA,CAAA,EACLtX,EAAAA,CAAC,EAAI+qB,EAAIA,CAAAA,EAAAA,OAAa,CAAGA,EAASzT,EAAE4T,IAAAA,EAAA,UAAAF,GAAAA,EAAA,KAAAf,EAAA,EAAA,IAAAhO,CAAA,EAE7C8O,EAAS/qB,OAAK+qB,EAAAA,CAAAA,EAIL5pB,KAIf4pB,EAAA,QAAAI,GAAA,CAGAJ,UAA8Bxe,IACpBgG,CAAAA,EAAAA,aAAe,CAAAhG,EAAA,YACC,IAAA,KAAAM,EAAA,SAAgB,EAAA,IAAA,KAAAN,EAAA,SAAA,EAEtCM,EAAA,cAAAN,EAAA,KACmCA,EAAA,cAAAM,EAAA,IACA,CAAAA,EAAA,YAC5Bue,GAAoB7e,EAAA,YACA,IAAA,KAAAM,EAAA,SAAA,EAAA,IAAA,KAAAN,EAAA,SAAA,EAApB6e,CACA,CAA4C,CAAA,EAEvDL,EAAC,QAAAI,GAAA,CAGDJ,MAAAA,EAA8BI,EAAA,CAAA,EAAA,QAAA,GAC5BA,EAA2BA,QAAAA,GAAAA,CAC3BA,UAA0B,KAAAE,IACpBpB,EAAAA,iBAAwC,GAClB,CAC1B,CAAA,CAAA,EAEHc,EAAA,OAE4B7uB,MAAAA,KAEvBovB,EAAa,CAAA,EACnB,OAAAnB,EAAMoB,YACNpB,GAAM9f,SAAkB,CACtBihB,EAAiB,KAAArB,CAAA,EACfqB,MACA,CACF,QAAAtrB,EAAA,EAAAA,EAAA+qB,EAAA,OAAA/qB,IACA,GAAA+qB,EAAa/qB,CAAGA,EAAI+qB,KAAAA,UAAsBd,EAAA,EAAA,EAAA,CACpCc,GAAAA,EAAwBC,SAASf,CAAKjvB,EACpCuwB,OAAmC,MAAAC,EAAAT,EAAA/qB,CAAA,EACjCwrB,EAAAA,KAAAA,CAAAA,OACOjZ,MAAAA,EAAAA,IAAM1F,KAASA,EAAA,SAAA,EACpB4e,EAAQ,IAAI5uB,KAAKgQ,EAAE5D,SAAS,EAClC,OAAcwiB,EAAAC,CACd,CAAA,EACF,MAACL,EAAAG,EAAA,CAAA,EAAA,QAAA,GACDF,EAA2BE,KAAAA,CAC3BF,GAAAA,EAAc,IAAAK,GAAAA,EAAA,EAAA,EACZ3wB,MAAiB6D,EACjBsrB,KAAOqB,EAAAA,MAAAA,GAAAA,EAAAA,QAAAA,KAAAA,CAAAA,EAAAA,SAAAA,cAAAA,CACPhuB,EAGF+tB,EAAC,KAAAvrB,CAAA,EACDurB,MACA,CAEJ,GAAAtB,EAAA,aAAAA,EAAA,qBAAAA,EAAA,QAAA,GAAA,CAEA,QAAwBA,GAAAA,EAA4BA,GAAAA,CAAAA,EAClDzvB,EAAakwB,YAAe1vB,CAAAA,GAC5B,eAAwB4wB,SAAO,CAE7BC,GAAAA,CACM,KAAA,CACI,MAAAxxB,CAAEA,EAAAA,EAAAA,WAAc,CAAEC,EAAUwa,EAAA,MAAAgX,GAAA7B,EAAA,YAAA5vB,CAAA,EAIlC0xB,GAAsBjX,EAAAxa,EAAkB2vB,CACxC8B,iBACEC,cAAe,EAAA,CAAA,EAEjBxxB,EAAC,YAAAoxB,CAAA,EAAA,CACMK,GAAAA,KACLjxB,SAAAA,CAAkBA,CAClBV,MACF,CAAA,CAAA,CAAA,CAIF,CAAAgxB,EACD,KAAArB,CAAA,CAAA,CACH,EACFqB,CAEAA,CAAkB,MACnBQ,GAAAvkB,GAAA,CAAAua,EAAAznB,IAEMixB,EAAAA,GAAAA,SAAAA,QAAAA,CAAAA,EAAAA,OACT,EAEoB/jB,eAAAA,GAA0B4iB,EAAA7vB,EAAA,CAC5C,MAAA6f,EAAgBvS,MAAiBka,KAClC,GAAA,CAAA3H,EAAA,OAEqB+R,OACd/R,KAAAA,CACN,mBAAAgS,CAA0B,EAAA3xB,EACpB4xB,EAAA,CAAA,EAuBAR,GAvBEO,EAAAA,QAAAA,GAAAA,OAAuB3xB,GAAAA,EAAAA,OACvB0B,OACR,MACAiuB,GAAAA,EACE,QAAAxP,EAAiB,KAAAP,EAAA,CAAA,CACX,EAAA6P,EAAEjvB,EAAAA,GAAAA,EAAAA,CAAAA,EAAI2f,IAAAA,EAAAA,EAAAA,CAAAA,IAAAA,MAAAA,EAAAA,OAASP,OAAU,MAAI6P,EAAAA,GAAAA,CAAAA,EAC7B2B,GAAAA,CAAAA,EAAiB5wB,QAAY,CAAAof,EAAA,OAC/B+R,OAAkC,MAAAE,EAAAlS,EAAA,OAAA,CAAA/D,EAAAgJ,MAChCkN,EAAAA,sBAA6C,IAAAlN,EAAA,KAAA,aAAA,GAAAhF,EAAA,KAAA4Q,GAAAA,EAAA,KAAA,YAAA,IAAA5L,EAAA,KAAA,YAAA,CAAA,IAC/ChJ,EAACkW,KAAAA,EAAAA,IAAwB,EACJnS,GAErBmS,CAAAA,CAAAA,EAGIxqB,EAAa,QACnBsqB,EAAA,KAAA,CACOhW,KAAAA,SAELiW,cAEFD,CAAAA,CACEnC,CACA2B,EAAAA,EACcS,OAAAA,CAAAA,MACfttB,EAAAqtB,EAAA,IAAA5S,GAAAA,EAAA,KAAA,OAAA,EACHhK,EAAA,MAAAD,GAAAxQ,CAAA,EACD,GAAA,CAAAyQ,EAEG4c,OACFA,EAAwCvtB,QAAAA,GAAAA,CAClC2Q,KAAAA,CACF,KAAAya,EAAgB,KAAA2B,EAEpBQ,aAAAA,CACQ,EAAA5S,EAAEyQ,EAAAA,EAAAA,EAAAA,QAAAA,EAAAA,EAAM2B,GAAAA,CAAAA,EAAAA,YAAMzR,EAAAA,CAAAA,EAAAA,EACpB,CAAA,CACIhO,CACFggB,CACF,SAAAI,IAAA,CAAA/xB,EACD,mBAAA,EAAA,CChQU,SAASgyB,GAAU,CAChCC,cAAAA,EACAC,kBAAAA,EAAoB,EACpBC,gBAAAA,EAAkB,EAClBC,qBAAAA,EAAuB,GACvBC,mBAAAA,EAAqB,GACrBC,UAAAA,EAAY,WACZC,oBAAqBC,EACrBC,kBAAmBC,CACrB,EAAI,GAAI,CACN,KAAM,CAACC,EAAiBC,CAAkB,EAAIjzB,EAAS,IAAI,EACrD,CAACkzB,EAAYC,CAAa,EAAInzB,EAAS,EAAK,EAC5C,CAACozB,EAAUC,CAAW,EAAIrzB,EAAS,EAAK,EACxC,CAACszB,EAAgBC,CAAiB,EAAIvzB,EAAS,EAAK,EACpD,CAACwzB,EAAcC,CAAe,EAAIzzB,EAAS,EAAK,EAChD0zB,EAAaf,IAAc,WAEjCpH,OAAAA,GAAgB,IAAM,CACpB,MAAMoI,EAAoBrB,EAAcnzB,QACxC,GAAI,CAACw0B,EAAmB,MAAO,GAC/B,IAAIC,EAAsBF,EACtBC,EAAkBE,UAClBF,EAAkBG,WAEtB,SAASC,GAAW,CAClB,KAAM,CACJF,UAAAA,EACAC,WAAAA,EACAE,aAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAC,YAAAA,CACD,EAAGR,EACES,EAAcV,EAAaG,EAAYC,EACvCO,EAAkBX,EAAaM,EAAeC,EAC9CK,EAAkBZ,EAAaQ,EAAeC,EAC9CI,EAAiBjd,KAAKkd,IAAIJ,EAAcR,CAAmB,EAC3DhB,EACJC,GACAvb,KAAKwH,IACHwV,EAAkB/B,EAClB8B,EACAD,CACF,EACItB,EACJC,GACAzb,KAAKwH,IACHwV,EAAkB9B,EAClB6B,EACAA,EAAkBD,EAAcE,CAClC,EAGAC,IACCX,EAAsBQ,EACnB1B,EACAD,KAEJQ,EAAmBW,EAAsBQ,EAAc,MAAQ,OAAO,EACtER,EAAsBQ,GAGxBjB,EAAciB,GAAe,CAAC,EAC9Bf,EAAYe,EAAcE,GAAmBD,CAAe,EAC5Dd,EAAkBa,GAAexB,CAAmB,EACpDa,EACEW,EAAcE,GAAmBD,EAAkBvB,CACrD,CACF,CAEAa,OAAAA,EAAkBc,iBAAiB,SAAUV,EAAU,CAAEW,QAAS,EAAK,CAAC,EAEjE,IAAMf,EAAkBgB,oBAAoB,SAAUZ,CAAQ,CACtE,EAAE,CACDxB,EACAC,EACAC,EACAC,CAAkB,CACnB,EAEM,CACLM,gBAAAA,EACAE,WAAAA,EACAE,SAAAA,EACAE,eAAAA,EACAE,aAAAA,EACAoB,KAAMA,IAAM,CACNtC,EAAcnzB,SAChBmzB,EAAcnzB,QAAQ2rB,cAAc,IAAI+J,MAAM,QAAQ,CAAC,CAE3D,EAEJ,CC3Fe,SAASC,GACtB,CACExC,cAAAA,EACAC,kBAAAA,EAAoB,EACpBC,gBAAAA,EAAkB,EAClBC,qBAAAA,EAAuB,GACvBC,mBAAAA,EAAqB,GACrBC,UAAAA,EAAY,WACZC,oBAAqBC,EACrBC,kBAAmBC,EACnB6B,KAAAA,CACF,EAAI,CAAE,EACNG,EACAh2B,EACA,CACA,GAAI,CAACg2B,EAAU,OACf,KAAM,CAAC/B,EAAiBC,CAAkB,EAAIjzB,EAAS,IAAI,EACrD,CAACkzB,EAAYC,CAAa,EAAInzB,EAAS,EAAK,EAC5C,CAACozB,EAAUC,CAAW,EAAIrzB,EAAS,EAAK,EACxC,CAACszB,EAAgBC,CAAiB,EAAIvzB,EAAS,EAAK,EACpD,CAACwzB,EAAcC,CAAe,EAAIzzB,EAAS,EAAK,EAChD0zB,EAAaf,IAAc,WAC3BiB,EAAsB30B,EAAO,IAAI,EAEjC80B,EAAWiB,GAAqB,IAAM,CAC1C,MAAMrB,EAAoBrB,EAAcnzB,QAClC,CACJ00B,UAAAA,EACAC,WAAAA,EACAE,aAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAC,YAAAA,CACD,EAAGR,EACES,EAAcV,EAAaG,EAAYC,EACvCO,EAAkBX,EAAaM,EAAeC,EAC9CK,EAAkBZ,EAAaQ,EAAeC,EAC9CI,GAAiBjd,KAAKkd,IAAIJ,EAAcR,EAAoBz0B,OAAO,EACnEyzB,GACJC,GACAvb,KAAKwH,IACHwV,EAAkB/B,EAClB8B,EACAD,CACF,EACItB,GACJC,GACAzb,KAAKwH,IACHwV,EAAkB9B,EAClB6B,EACAA,EAAkBD,EAAcE,CAClC,EAGAC,KACCX,EAAoBz0B,QAAUi1B,EAC3B1B,EACAD,KAEJQ,EACEW,EAAoBz0B,QAAUi1B,EAAc,MAAQ,OACtD,EACAR,EAAoBz0B,QAAUi1B,GAGhCjB,EAAciB,GAAe,CAAC,EAC9Bf,EAAYe,EAAcE,GAAmBD,CAAe,EAC5Dd,EAAkBa,GAAexB,EAAmB,EACpDa,EACEW,EAAcE,GAAmBD,EAAkBvB,EACrD,CACD,EAAE,GAAG,EAENvH,GAAgB,IAAM,CACpB,MAAMoI,EAAoBrB,EAAcnzB,QACxC,OAAKw0B,GACLC,EAAoBz0B,QAClBw0B,EAAkBD,EAAa,YAAc,YAAY,EAE3DC,EAAkBc,iBAAiB,SAAUV,EAAU,CAAEW,QAAS,EAAK,CAAC,EAEjE,IAAMf,EAAkBgB,oBAAoB,SAAUZ,CAAQ,GANtC,EAOhC,EAAE,CACDxB,EACAC,EACAC,EACAC,CAAkB,CACnB,EAEDxzB,EAAU,IAAM,CACd61B,EAAS,CACP/B,gBAAAA,EACAE,WAAAA,EACAE,SAAAA,EACAE,eAAAA,EACAE,aAAAA,CACF,CAAC,CACH,EAAG,CACDR,EACAE,EACAE,EACAE,EACAE,EACA,GAAGz0B,CAAI,CACR,EAEDG,EAAU,IAAM,CACV01B,GAAQtC,EAAcnzB,SACxBuyB,eAAe,IAAM,CACnBY,EAAcnzB,QAAQ2rB,cAAc,IAAI+J,MAAM,QAAQ,CAAC,CACzD,CAAC,CAEL,EAAG,CAACD,CAAI,CAAC,CAcX,CCpHA,SAASK,GAAU,CACjB9wB,MAAOM,EACPkjB,SAAAA,EACA9Z,OAAAA,EACA1N,SAAAA,EACA+0B,OAAAA,EAEAC,aAAAA,CACF,EAAG,CACG1D,IAAAA,EAAOlB,GAAU5I,EAAUxnB,CAAQ,EACjC0D,MAAAA,EAAaC,GAAYzD,CAAM,EAKrC,GAJKwN,IACHA,EAAShK,EAAW4J,SAASgkB,CAAI,GAAK5tB,EAAW4J,SAASka,CAAQ,EAC3D4I,EAAAA,GAAU1iB,GAAAA,YAAAA,EAAQhN,GAAIV,CAAQ,GAEnC,CAAC0N,EACI,OAAA,KAGH,KAAA,CACJjI,QAAS,CACP+I,KAAAA,EACAC,OAAAA,EACA1I,aAAAA,EACArF,GAAIu0B,EACJnvB,IAAKqT,EACLvK,YAAAA,EACAQ,SAAAA,EACAP,OAAQqmB,EACRxmB,IAAAA,EACAK,MAAAA,CACF,EACArO,GAAAA,EACAy0B,aAAAA,EACAC,UAAAA,EACA1L,aAAAA,EACA2L,WAAAA,EACAC,gBAAAA,EACAC,WAAAA,EACA7a,KAAAA,EACA8a,MAAAA,EACAC,UAAAA,EACA9a,YAAAA,EACA+a,WAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,KAAAA,EACAnnB,UAAAA,GACAmiB,YAAAA,GACAtH,mBAAAA,GACAnJ,QAAAA,EACAc,SAAAA,EACAvG,iBAAAA,EACA0C,OAAAA,GACAyY,IAAAA,GACAjwB,IAAAA,GACA+I,OAAAA,GAEAmnB,SAAAA,GACAC,QAAAA,EAEEvoB,EAAAA,EAEA,GAAA,EAACkN,GAAAA,MAAAA,EAAkB/Z,QACd,OAAA,KAGT,MAAMq1B,EAAoBvzB,IAAA,CACpBA,GAAEC,QACJvD,EACEwF,EAAG6I,GAAAA,IACJhJ,GAAA,QAAA,IAAA,gBAAA,EACH,CAAA,CAAA,EACFiL,EAAAvB,GAAA,IAEMvJ,OAA+BowB,EAC5BvwB,CAAAA,EAAMI,CAA4B,CAAA,EACtCqxB,GAAAC,GAAAC,EAAA,EACC1mB,OAAuB2mB,GAAAT,EAAAM,EAAA,EAC3B,IAAAI,IAAA,YAAAA,aAAyB1xB,OACxB,OAAYA,KAGf,MAAM0xB,EAAad,EAQbe,GANqBpoB,GAAQ,KAC1B1J,GAAA,QAAA,IAAA,aAAA,GAAA,IACT,sBAAA,GAAA,UAEArF,CAAAA,CAAAA,IAEmBo2B,WACbgB,GAAAA,GAAAA,MAEJ,OAAA7b,EAAoBnV,IAAAA,CAAAA,GAAYC,IAAA,CACzBgxB,MAAAA,eAAiC,GACrCC,EAAAJ,IAAA,YAAAA,GAAA,UACL,aAEA,qBAAyBjF,EAEzB,aAAwB/sB,EACtB,oBAAyBoW,IAAY8a,EAAA,kBAAA,QACrC,qBAAmCmB,GAAAA,WAAAA,EAAAA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,OACnC;;YAGkBV,GAAAA,WAAAA,EAAAA;AAAAA,YAEdM,EAAA,cACkBf,EAAAA;AAAAA,YAElBoB,gBAEiBF,EAAAA;AAAAA,UAGT,SAAA1zB,EAAA6zB,GAAA,CAEJP,MAAAA,EACAC,MAAAA,GACAK,KAAAA,EAAqC,GAAA,IAAA72B,CAAA,MAAAU,CAAA,eAAAgF,EAAA,CAAA,GACvCtC,UAEIT,GAAAqyB,EAAAryB,EAAA+C,EAAAuV,GAAAvN,CAAA,EAAA,MAAA,CAAA,CAEJuN,EAAAA,CAAAA,CAAAA,CAAAA,CACM0a,CACuC,MAC7CxyB,GAAAA,OC/HV,SAAS4zB,GAAQjM,EAAO,eAChBpnB,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAEH,MAAAA,EAAOC,SAAAA,EAAUgO,cAAAA,GAAkB1M,EAAI,EAEzC,CAACuD,EAAgBmyB,CAAiB,EAAIn3B,EAAS,EAC/C,CAACmF,EAAoBiyB,CAAqB,EAAIp3B,EAAS,EAAK,EAElEd,EAAU,IAAM,CACd,MAAM0F,EAAWC,GAAMC,MAAMC,QAAQ,UAAU,GAAK,GAC9CkX,EAAMrX,EAASsY,KACNtX,GAAAA,EAAQvD,KAAKxB,KAAOgE,GAAMI,QAAQC,IAAI,gBAAgB,CACrE,EACI+W,GAAKkb,EAAkBlb,CAAG,EACRrX,EAAAA,EAAS5D,OAAS,CAAC,CAC3C,EAAG,CAAE,CAAA,EAMCq2B,MAAAA,GACHxzB,EAAWua,SAAS6E,oBAAsB,gBACxC,CAACpf,EAAWua,SAAS6E,mBACpBpf,EAAWua,SAASuQ,uBACxB,CAAC9qB,EAAWye,UAAUpF,KAAc4R,GAAAA,EAAIzrB,OAAS,WAAW,EAExDi0B,EAAgBC,GACpB,IAAM,CACJl3B,EAAO8mB,aAAe,EAAA,EAExB,CACEqQ,UAAW,IACXC,OAAQ,QACRC,iBAAkB,EAAA,CAEtB,EAEMC,EAAY14B,IACZ,CAAC24B,EAAWC,CAAY,EAAI73B,EAAS0I,MAAS,EAE9CovB,EAAqBC,GAAuB,CAChD,EACA,EACAl0B,EAAWua,SAAS6E,oBAAsB,eAAiB,GAAK,EAChE,CAAC,CACF,EAEK+U,EAAgB/4B,IACtB,eAAeg5B,EAAWznB,EAAW,CAC/BA,OAAAA,GAAa,CAACwnB,EAAc74B,WAC9B64B,EAAc74B,QAAUe,EAAMM,GAAG03B,MAAMx3B,KAAK,CAC1CC,MAAO,EAAA,CACR,GAEa,MAAMq3B,EAAc74B,QAAQ4B,KAAK,CAEnD,CAEA,MAAMo3B,EAAiBl5B,IACvB,eAAem5B,EAAY5nB,EAAW,CAChCA,OAAAA,GAAa,CAAC2nB,EAAeh5B,WAC/Bg5B,EAAeh5B,QAAUe,EAAMM,GAAG63B,OAAO33B,KAAK,CAC5CC,MAAO,EAAA,CACR,GAEa,MAAMw3B,EAAeh5B,QAAQ4B,KAAK,CAEpD,CAEA,OACEwD,EAAAC,EAAA,CAAAjB,UACEgB,EAAA,SAAA,CACEoB,IAAKgyB,EACLt0B,KAAK,SACLc,MAAQ,gCACNgB,EAAqB,cAAgB,EACtC,IAAGmzB,KAAO,SAAW,EAAG,GACzBxgB,MAAO,CAAE0X,SAAU,UAAW,EAC9BlsB,QAASA,IAAM,CACbu0B,EAAyBU,GAACA,EAAiB7vB,OAAT,MAAmB,CACvD,EACAmiB,cAAsB/nB,GAAA,CACpBA,EAAEuJ,eAAe,EACjBhM,EAAO8mB,aAAe,EACxB,EAAE,GACEmQ,EAAc,EAAC/zB,SAElB4B,CAAAA,GACC/B,EAAC4C,GAAM,CACLC,MACEjB,EAAAA,GAAAA,YAAAA,EAAgB3C,OAAhB2C,YAAAA,EAAsB4J,WAAU5J,EAAAA,GAAAA,YAAAA,EAAgB3C,OAAhB2C,YAAAA,EAAsBkB,cAExDxC,KAAK,IACL80B,UAAUxzB,EAAAA,GAAAA,YAAAA,EAAgB3C,OAAhB2C,YAAAA,EAAsB6J,GAAAA,CACjC,EAEHzL,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAMyB,EAAqB,IAAM,GAAA,CAAM,CAAC,CAAA,CACpD,EACRZ,EAACk0B,GAAc,CACbnJ,cAAc,WACdiJ,MAAOX,EACPc,UAAWf,EACX5zB,QAASA,IAAM,CACb8zB,EAAanvB,MAAS,CACxB,EACAiwB,eAAgB,CACd7gB,MAAO,CACL8gB,OAAQ,EACV,EACAt1B,QAASA,IAAM,CACbu0B,EAAanvB,MAAS,CACxB,CACF,EACAmwB,OAAQ,CACNrsB,OAAQlN,SAASw5B,IACnB,EAAE,GACE7N,EACJmE,SAAS,OACTC,WAAW,QACXG,SAAS,SACT9oB,MAAM,SACNoxB,mBAAAA,EACAiB,eAAc,GAAAx1B,UAEb,CAAC,GAACM,EAAAA,EAAWm1B,aAAXn1B,MAAAA,EAAuBo1B,aACJp1B,EAAWm1B,WAAWC,aAA1CC,WACE30B,EAAA,MAAA,CAAKJ,MAAM,WAAUZ,SAAA,CACnBgB,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACDsT,QAAQ,4BAA4B,IAE7C,SAAY,CACP,GAAA,CACFxL,SAAS/F,OAAO,OACN,CAAC,CAAA,IAGnB,EAAE9B,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,WAAWU,MAAM,eAAeT,KAAK,GAAA,CAAK,EAAE,IACvDN,EAAA,OAAA,CAAAG,SAAM,uBAAA,CAA2B,CAAC,CAC1B,CAAA,EACVH,EAAC0D,KAAa,CAAC,CAAA,CACZ,EAETvC,EAAA,UAAA,CAAAhB,SAAA,CACEgB,EAACkrB,GAAQ,CAACloB,GAAG,IAAGhE,SAAA,CACdH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,MAAA,CAAU,CAAC,CAAA,CACvC,EACT4K,GACC5J,EAAAC,EAAA,CAAAjB,SACG8zB,CAAAA,GACC9yB,EAACkrB,GAAQ,CAACloB,GAAG,aAAYhE,SAAA,CACvBH,EAACI,EAAI,CAACC,KAAK,YAAYC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,CAAC,CAAA,CACjD,EAEZgB,EAACkrB,GAAQ,CAACloB,GAAG,YAAWhE,SAAA,CACtBH,EAACI,EAAI,CAACC,KAAK,KAAKC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,UAAA,CAAc,CAAC,CAAA,CACzC,EACVgB,EAACkrB,GAAQ,CAACloB,GAAG,iBAAgBhE,SAAA,CAC3BH,EAACI,EAAI,CAACC,KAAK,eAAeC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,eAAmB,CAAA,EAC9DM,EAAW5C,sBACVsD,EAAA,MAAA,CAAKqC,MAAM,MAAMkR,MAAO,CAAE+K,QAAS,EAAI,EAAEtf,SAAA,CACtC,IAAI,GAEP,CAAA,CAAK,CACN,CAAA,CACO,EACVH,EAAC0D,IAAa,CAAA,EACdvC,EAACkrB,GAAQ,CAACloB,GAAG,KAAIhE,SAAA,CACfH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,OAAA,CAAW,CAAC,CAAA,CACxC,EACVgB,EAACkrB,GAAQ,CAACloB,GAAG,MAAKhE,SAAA,CAChBH,EAACI,EAAI,CAACC,KAAK,UAAUC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,mBAAA,CAAuB,CAAC,CAAA,CACvD,EACVgB,EAACkrB,GAAQ,CAACloB,GAAG,KAAIhE,SAAA,CACfH,EAACI,EAAI,CAACC,KAAK,WAAWC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,CAAC,CAAA,CAChD,EACVgB,EAACkrB,GAAQ,CAACloB,GAAG,KAAIhE,SAAA,CACfH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,OAAA,CAAW,CAAC,CAAA,CACzC,CAAC,CAAA,CACX,EAEJH,EAAC0D,IAAa,CAAA,EACdvC,EAACkrB,GAAQ,CAACloB,GAAK,UAAShE,SAAA,CACtBH,EAACI,EAAI,CAACC,KAAK,SAASC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,QAAA,CAAY,CAAC,CAAA,CAC3C,EACVgB,EAACkrB,GAAQ,CAACloB,GAAK,IAAGpH,CAAS,OAAMoD,SAAA,CAC/BH,EAACI,EAAI,CAACC,KAAK,WAAWC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,OAAA,CAAW,CAAC,CAAA,CAC5C,EACVgB,EAACkrB,GAAQ,CAACloB,GAAK,IAAGpH,CAAS,KAAIoD,SAAA,CAC7BH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAe,CAAC,CAAA,CAC7C,EACVgB,EAACkrB,GAAQ,CAACloB,GAAK,IAAGpH,CAAS,YAAWoD,SAAA,CACpCH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,UAAA,CAAc,CAAC,CAAA,CAC5C,CAAC,CAAA,CACJ,EACTH,EAAA,UAAA,CAAAG,SACG4K,EACC5J,EAAAC,EAAA,CAAAjB,SACEH,CAAAA,EAAC0D,IAAa,CAAA,IACb9B,EAAAA,GAAAA,YAAAA,EAAgB3C,OAAhB2C,YAAAA,EAAsBnE,KACrB0D,EAACkrB,GAAQ,CAACloB,GAAK,IAAGpH,CAAS,MAAK6E,EAAe3C,KAAKxB,EAAG,GAAE0C,SAAA,CACvDH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,SAAA,CAAa,CAAC,CAAA,CAC1C,EAEZgB,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAO8mB,aAAe,EACxB,EAAE5jB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAsB,CAAC,CAAA,CACpD,EACVgB,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAOmc,oBAAsB,CAC3B3b,GAAI,OACJ6S,QAAS,cACTC,cAAeskB,EACfrkB,yBAA0B,CAAC,QAAQ,CAAA,CAEvC,EAAErQ,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAK,CAAA,EAC9B,eAAA,CAAA,CAAU,EACVa,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAOmc,oBAAsB,CAC3B3b,GAAI,QACJ6S,QAAS,gBACTC,cAAeykB,EACfxkB,yBAA0B,CAAC,UAAU,CAAA,CAEzC,EAAErQ,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,QAAQC,KAAK,GAAK,CAAA,EAE/B,gBAAA,CAAA,CAAU,EACVN,EAAC0D,GAAW,CAACrC,UAAU,cAAA,CAAgB,EACvCF,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAO2D,0BAA4B,EACrC,EAAET,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,WAAWC,KAAK,GAAA,CAAK,EAAE,IAClCN,EAAA,OAAA,CAAAG,SAAM,oBAAA,CAAwB,CAAC,CAAA,CACvB,EACVgB,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAOunB,sBAAwB,EACjC,EAAErkB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,WAAWC,KAAK,GAAA,CAAK,EAAE,IAClCN,EAAA,OAAA,CAAAG,SAAM,sBAAA,CAAiC,CAAC,CAAA,CAChC,EACVgB,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAO4mB,aAAe,EACxB,EAAE1jB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAsB,CAAC,CAAA,CACnD,CAAC,CAAA,CACX,EAEFgB,EAAAC,EAAA,CAAAjB,SAAA,CACEH,EAAC0D,KAAa,EACdvC,EAACkrB,GAAQ,CAACloB,GAAG,SAAQhE,SAAA,CACnBH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,QAAA,CAAY,CAAC,CAAA,CACzC,EACVgB,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACbjD,EAAO4mB,aAAe,EACxB,EAAE1jB,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,EAAE,IAAAN,EAAA,OAAA,CAAAG,SAAM,WAAA,CAAsB,CAAC,CAAA,CACnD,CAAC,CAAA,CACX,CAAA,CAEG,CAAC,CAAA,CACI,CAAC,CAAA,CACjB,CAEN,CCpRA,MAAM41B,GAAwB,CAC5BC,MAAO,UACPC,OAAQ,SACRC,SAAU,QACZ,EAEA,SAASC,GAAS,CAChB3yB,MAAAA,EACA4yB,eAAAA,EACA34B,GAAAA,EACAV,SAAAA,EACAs5B,UAAAA,EACAC,UAAAA,EACAC,UAAAA,EACAC,eAAAA,EACAC,WAAAA,EAAaA,IAAM,CAAC,EACpB33B,gBAAAA,EAAkBA,IAAM,CAAC,EACzB43B,wBAAAA,EAA0B,KAC1BC,YAAAA,EACAC,UAAAA,EACAC,cAAAA,EAEAC,QAAAA,EACAC,KAAAA,EACA7D,cAAAA,EACA8D,iBAAAA,EACAC,gBAAAA,CACF,EAAG,CACKx2B,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAC2vB,EAAOsK,CAAQ,EAAIt6B,EAAS,CAAE,CAAA,EAC/B,CAACyL,EAASC,CAAU,EAAI1L,EAAS,SAAS,EAC1C,CAACsc,EAAUC,CAAW,EAAIvc,EAAS,EAAK,EACxC,CAACu6B,EAASC,CAAU,EAAIx6B,EAAS,EAAK,EACtC,CAACF,EAASC,CAAU,EAAIC,EAAS,EAAI,EACrCsyB,EAAgBrzB,IAEdkrB,EAAyBtpB,IAAAA,QAE3B45B,KAAyBjqB,GAAA,CACzBkqB,EAAAA,EAAYC,EAEdH,IAAgB,YACW9uB,EAAA,SAAA,GAC3BA,SAAoB,CACP,GAAA,CACP,GAAA,CACE,KAAAoR,EAAEA,MAAAA,CAAAA,EAAMhc,MAAAA,EAAAA,CAAAA,EAAM,GAAI,MAAM+4B,QAAAA,CAAoB,EAAA,CAC5C9c,KAAAA,CAAAA,GAAcjc,EAAQ,EAAAA,EAAA,OAAA,CAAAmb,EAAA6T,MAElBA,WAEF7T,KAASma,KAAStG,EAAA,EAEX7T,EAAA,CAAA,EAAA,KAAA6T,EAAA,EAEP7T,GACOA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EACTnb,EACK85B,GAECA,IACWhB,IACjB94B,EAAoB4uB,GAAA5uB,CAAA,GAEpBA,EAAA4vB,GAAA5vB,EAAAX,CAAA,GAEF06B,GAAA,SACA/5B,KAAwB,OAAAA,CAAA,GAGxBtB,EADAgR,IAGgBsqB,GAAA,CAAA,GAAAA,EAAA,GAAAh6B,CAAA,CAFC,EAIfw5B,EAAUtK,SACZlT,EAAA,IACAP,EAAWvb,CAAAA,CAAAA,CAAQ8b,MACnBP,EAAY,EAAK,EAEjBA,EAAAA,SAAiB,CACnB,MAAA,CACA7Q,EAAW,OAAS,CAAA,QACV,CACVlM,SAAe,CACfkM,CAAkB,KAElBgvB,EAAAA,KAAAA,CACF,QAAA,GACF,SAAG,EAAA,GAIMK,EAAA,qCACCC,GAAAx4B,GAAA,aAAA,CAAA4C,EAAA2pB,IAAA,CAEd,MAAAkM,EAAA,SAAA,cAAA,QAAAF,CAAA,EAEsBG,GAAAD,GAAA,YAAAA,EAAA,wBAETz4B,GAAAA,MAAyB,KAAA8vB,EAAgB,QAAA,iBAAAyI,CAAA,CAAA,EAEpD,GAAAE,GAAmB37B,GAAuB67B,IAAAA,EAAqB,QAAA,cAAAD,GAAA,OAAA,EAAA,CACzDA,MAAAA,KAA6BE,QAAsBH,CAAA,EACzD,IAAMI,GAAWte,GAAM0G,EACC7Y,CAAAA,EAGtBqwB,EAAAA,QAIMK,GAAAA,GAAAA,KAA2BC,CAAAA,GAAAA,KAAkBzZ,GAAAwZ,GAAA,CAAAxL,GAAA,UAAA,SAAA,mBAAA,CAAA,GAE/Cf,KAEFvB,GAAAA,MAAoBtQ,EAKtBsQ,GAAA,eAAA2L,EAAA,EAEE3L,KAAAA,CACAA,MAAAA,KAA6C,KAAAsC,IAAA,CAC/C,MAAA0L,GAAA1L,GAAA,wBACK,OAAA0L,GAAA,KAAA,IAAAA,GAAA,MAAA,CAEL,CAAMC,EACED,IACNC,EAAgBxN,MAAAA,EACjBwN,EAAA,eAAAtC,EAAA,EAECsC,CACAA,CAAAA,EACFC,GAAAl5B,GAAA,aAAA,CAAA4C,EAAA2pB,IAAA,CACF,MAAAkM,EAAA,SAAA,cAAA,QAAAF,CAAA,EACDG,GAAAD,GAAA,YAAAA,EAAA,wBAEYz4B,GAAAA,MAAyB,KAAA8vB,EAAgB,QAAA,iBAAAyI,CAAA,CAAA,EAEpD,GAAAE,GAAmB37B,GAAuB67B,IAAAA,EAAqB,QAAA,cAAAD,GAAA,OAAA,EAAA,CACzDA,MAAAA,KAA6BE,QAAsBH,CAAA,EACzD,IAAMI,GAAWte,GAAM0G,EACC7Y,CAAAA,EAGtBqwB,EAAAA,QAIMK,GAAAA,GAAAA,SAA2BC,CAAAA,GAAAA,KAAkBzZ,GAAAwZ,GAAA,CAAAxL,GAAA,UAAA,SAAA,mBAAA,CAAA,GAE/Cf,KAEFlB,GAAAA,MAAoB8N,EAKtB9N,GAAA,eAAAsL,EAAA,EAEEtL,KAAAA,CACAA,MAAAA,KAA6C,KAAAiC,IAAA,CAC/C,MAAA0L,GAAA1L,GAAA,wBACK,OAAA0L,GAAA,KAAA,IAAAA,GAAA,MAAA,CAEL,CAAMC,EACED,IACNC,EAAgBxN,MAAAA,EACjBwN,EAAA,eAAAtC,EAAA,EAECsC,CACAA,CAAAA,EACFG,GAAAp5B,GAAA,CAAA,QAAA,GAAA,EAAA,IAAA,CACF,MAAAy4B,EAAA,SAAA,cAAA,QAAAF,CAAA,EACDE,GAEDA,EAAwB,MAAA,CAGtB,CAAA,EACEA,EAAiBjL,EAAA,OAAA,GAAAvkB,IAAA,WAAA8uB,EACnBsB,EAAAC,GAAA,IAAA,OACDpB,EAAA,EAAA,GAEDz4B,EAAAqwB,EACEtC,UADF,MAAA/tB,EACE+tB,SAAAA,CACI6L,IAAAA,EACJnB,SAAc,QACdpI,EAAgC,EAAA,CAC9BrE,CAAK,CAAA,EACK8N,EAAAv5B,GAAA,IAAA,IAAA,CACXw5B,GACCtB,GAEF,CAAA,EACqBuB,GAAAh9B,IACrB,CAAAq0B,GAAAC,EAAA,EAAAvzB,EAAA,EAAA,EACF80B,GAAC,CAaD,cAAAxC,EAEA,gBAAOgB,EAEL,qBAAA,EAAA,EACEhB,CAAAA,CACAE,gBAAAA,EACAC,eAAsByJ,iBAGtBlJ,WAAAA,GACAM,SAAAA,EAAAA,IACAE,CACAN,GAAAA,GAAAA,QAAAA,CACAE,MAAAA,EAAAA,IAAAA,OAAAA,CAAAA,EACI6I,GAAA,QAAA,OAAAE,CAEJ,CACQA,GAAAA,CAA+B,EACrCF,IACFvB,EAAA,EAAA,CAEA,EAAA,CAAA,CAAA,EACEA,EAAAA,IAAc,QAChBz4B,EAAAqwB,EAAA,UAAA,MAAArwB,EAAA,SAAA,KAMJ,CAEA/C,GACEozB,EAAAA,EAAcnzB,CAAkB,EAAA,CAAO,CAAA,EAAAD,EAAG,IAAA,CAC1Cw7B,EAAU,EAAI,CAAA,EACb,EAAE,CAAA,EACLx7B,MAAAA,GAAgBD,EAAAk7B,CAAA,EACdO,EAAAA,IAAc,CACZR,GAAQ,UAAAC,IAcNiC,GAAAA,UACNl9B,EAAgB,CAAA,CAAA,EAEZk9B,EAAAA,CAAAA,CAAAA,CAAAA,EACA9B,MAAAA,GAAWwB,GAAA,MAAA,CACb,iBAAAO,EAAA,EACF,EAAIlC,KAAK,CAEHmC,MAAAA,EAAAA,UACG,iBAAAhK,EAAA,OAAA,EAAA,gBAAA,OAAA,GAAqBzuB,EAAA,SAAA,aAAAyuB,EAAA,QAAA,UAAA,KAAA+J,GAAA,OAAA,WAAA,CAAAE,GAAA,GAAA,CAAAC,EAAU9B,EAAO,EAAA,aAMzC7G,KAEa4I,EAAAA,CACbF,IAA2Br6B,EAAA2B,EAAA,SAAA,WAAA,CAAA,EAC3B24B,GAAAA,IAAAA,OAAAA,GACDl6B,GAAA,CACD,GACEuB,EAAWua,CAMX5e,MAAAA,EAAY,KAAA,IAAA,EAAkBqB,GAAeud,SAC7Csc,CAAAA,GAAc,SAAAgC,EAAA,IAAA,IACTJ,GAAA,CACL98B,iBAAY,EACZ,CAAMm9B,CAEJn9B,MACAg7B,GAAe,QAAA,KAAA,MAEnBz6B,EAAAuC,CAAA,CAAA,EAEF,CAACzB,KAA2Cud,EAAAA,oBAC9C,CAAA,EAEAwe,MAA8B98B,GAAA,CAAAy6B,EAAAT,GAAAxG,GAAA,EAAA,GAAA,IAAA,EAC9Bz0B,EAAAA,GACe,SAAA,CACX,MAAay3B,EACX,SAAiB5zB,EAAAA,MAAAA,CACjB,GAAI,GAACm6B,CAAAA,QAEgB,MAAA,iBAAA,IACCC,GAAA,CACpBxK,EAAC,QAAAwK,EACH9B,GAAA,QAAA8B,EACKpB,GAAA,QAAAoB,EACU39B,GAAAA,QAAAA,CACjB,EACAY,SAAkB,KAEnBmC,SAAAA,EAAAA,OAKDo6B,MAAAA,qBASAl5B,qBAAuB,CAAQkzB,IAAAA,GAAc/yB,QAC3CT,GAAA,OACYA,EAAA,OAAA,QAAA,WAAA,IACJb,EAAAqwB,EAAA,UAAA,MAAArwB,EAAA,SAAA,CACS,IAAA,EACbqwB,SAAwBwK,QACxB9B,EAEAY,EACF,WAAA94B,GAAA,CACSA,EAAA,OAAA,QAAA,WAAA,GAAIS,EAEb,EAAA,CAA+BA,EAE3BoC,MAAKs2B,IAAAA,UAAAA,UAAAA,GAEL34B,SAAgB,CAAAiB,EAAA,MAAA,CACd,MAAOiI,cACL8lB,SAAAA,CAAAA,SAAgC,MACzB,cAAA,SACK,CAAAlvB,EAAA8zB,GAAA,CAAA,CAAA,EAAA6C,GAAA32B,EAAAkE,EAAA,CACX,GAAA,IACH,MAAA,2BACF,SAAAlE,EAAAI,EAAA,MACmB,OACZV,KAASq4B,GACZT,CAAAA,CAAc,CAChB,CAAA,CACF,CAAA,EAAA9zB,IAAA4yB,GAAAp2B,EAAA,KAAA,CACAe,SAAmByC,CAAwB,CAAGrD,GAAAA,EAE9CgB,MAAA,CAAW,MAAA,cAAahB,SACtBgB,CAAAA,CAAAA,GAAAy1B,CAAA,CAAA,CAAK71B,CAAM,CAAA,EAAaZ,GACZgB,EACTw1B,SAAAA,CAGM,MAAI,4BAAA,KAAU,SAA0Bx2B,QAAAA,EACtC,SAAM,CAAAH,EAAAI,EAAA,CAAA,KAAY,UAAA,CAAA,EAAG,YAAE,CAAA,CAAA,CAAA,CAE/B,CAAA,EAAA,CACE,CACJoD,GAA2B4yB,EAAAA,MAAAA,CAAiB,MAAK5yB,kBAAAA,IAAAA,UAAAA,UAAAA,EAAAA,GAAK,SACvDxD,CAAA,CAAA,EAAKe,EAAM,OAAAI,EAAAC,EAAA,CAAajB,SAAAA,CAAAA,EAENy2B,KAAAA,CAAS,MACrB,YAAAG,EAAA,YAAAA,CAAA,GAAA,EAAA,GACH,SAEH51B,CAAAA,EAAAA,IAAAA,GAAAnB,EAAA25B,GAAA,CACQ,OAAAlvB,EACD,SAAA1N,EACI07B,UAAAA,EAAmBt4B,cAAAA,EAEtBE,KAAAA,qBAET,gBAAA42B,CAAA,EAEAJ,EAAAA,IAAAA,GAAAA,YAAAA,WACDE,CAAA,CAAA,EAAA7d,GAAA7Q,IAAA,YAAA0uB,IAAA,QAAA,KAAA51B,EAAAC,EAAA,CACU,SAAA,CAAApB,EAAA,KAA6B,CAEpC62B,MAAAA,CAGIj5B,OAAAA,MACPuC,WACyB42B,EAAAA,GAAmBA,UACvCnK,EACc,CACXniB,CAAAA,CACA1N,EAAAA,EAAAA,KAAAA,CACAw5B,MAAAA,CAEArD,OAAAA,MAEA6D,EACAC,SAAAA,EAAAA,GAAAA,CACAC,SAAAA,EAAAA,CAHKxsB,CASL,CAAAtK,CAAAA,CACE,CAAA,EAAA,CACS,CAAA,EAAAkI,IACG,YAAA6Q,EAAAlZ,EAAAwa,GAAA,CACV,KAAA0U,EAAA,QAAE/uB,WAAAA,WAEK,OAAA,OAAA,GAAA,SAAA,SAASy5B,GAAA,CAAEA,GAEpB55B,GACS,EAEP,SAAAA,EAAA,SAAA,CAAEG,KAAAA,SAEK,MAAS,cAAA,QAAE,IAAAm3B,EAAA,EAAC,MAChB,CAEP,eAAA,KAELjvB,WAGyBtM,YAAAA,CACP,CAA8B,CAAA,QACrB,CACpB,MAAY,yBACA,SAAA,UACZ,CAAA,EAAA,CACF,CAAA,EAAAsM,IAAA,UAAArI,EAAA,KAAA,CAAEG,MAAAA,WAEF,SACO,MAAA,KAAA,CAAA,OACC,CAAA,CACND,EAAAA,IAAAA,CAAAA,EAAAA,QAAyB,QAAAF,EAAA,MAAA,CAAA,MAClB,CAAA,OAAkB,MAAM,CAAA,CAAA,EAChCA,EAAA,KAAA,CAED,SAAQA,EAAAsnB,GAAA,CAGVtnB,SAAA,EAAA,CAAS,CAAA,EAAyByC,CAAA,CAAA,CAAA,CAAA,EAClC4F,IAAA,SAAArI,EAAA,IAAA,CACJ,MACY,WACVe,SAAMs1B,CAAUl2B,CAAAA,EAAAA,aACNgB,EAAA,IAAA,CAAA,MAAU,WAAE,UAAWsB,EACjCs0B,EACE/2B,KAAAA,CAAAA,CAAAA,EAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,SAAA,CACE0U,KAAO,SAAA,QACG,IAAA4iB,EAAA,CAAA1K,EAAA,MAAA,EACV,SAAA,WAAA,CACD,CAED5sB,CAAA,CAAAG,CAAAA,CACS,CAAA,CAAS,CAAA,CAAE,CAAC,CAGzB,CAGqB,SAAAw5B,GAAS,CAAA,OAAAlvB,EAAY4rB,SAAAA,EAG5C,UAAAE,EAIE,cAAArD,EAAa,KAAA6D,EAA+C,iBAAAC,EAAG,gBAAAC,CAEtD,EAAA,CAEZ,KACE,CAAC,GACH1S,EACiB,OAAAlK,EAE5B,MAAAuS,EAEA,KAAA3sB,EACEwK,QAAAA,CACA1N,EAAAA,EACAw5B,IAAAA,EAAAA,IAEArD,MAAAA,GAAAA,GAAAA,YAAAA,EAAAA,KAAAA,EACA6D,EAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,GAAAA,MAAAA,CAAAA,GACAC,IAAAA,EAAAA,GACAC,IAAAA,SACCzzB,EAAA,GAAAopB,EAAA,MAAA,UACK3sB,IAAA,WAAExC,EAAI8mB,gBAAkBqI,MAAAA,EAAAA,IAAAA,UAAAA,IAAAA,SAAO3sB,GAAAA,EAAAA,CAAM+yB,MAAAA,EAAAA,GAAAA,EAAAA,CAAAA,EAAYvoB,GAAAA,EACnDuoB,OAAAA,EAAAA,KAAAA,CAAAA,EAAAA,IAAAA,CAAqB,MAAA6G,EAAAxG,GAAA/jB,EAAA,SAAA4jB,CAAA,EACnB/M,KAA+B5B,EAAAA,SAAAA,CAAAA,EAC/B1hB,OAAAA,GACD,CAAG9F,EAEI,EAED,CAAA88B,GAAeC,KAG1B,CACA,CAAMC,EACK/5B,EAAA,KAAA,CACHg6B,MAAAA,yBACFD,SAAY/5B,EAAAi6B,GAAA,CAEPjlB,MAAAA,EAOL,MAAkBqe,GAAAA,CAAAA,YAClB,SAAkBA,EAAAA,IAAAA,GAAaT,CAC3BiH,KAAAA,CACK,GAAAK,EACT,OAAAC,WAES,EAAAzN,EACT0N,GAAAD,GAAA,YAAAA,EAAA,KAAAD,EACOG,EAAAt9B,EAAA,IAAAA,CAAA,MAAAq9B,CAAA,GAAA,MAAAA,CAAA,GACR,OAAAE,MAEC,IAAuCt6B,EAAA,KAAA,CAAwBG,SAC9CH,EAAAkE,EAAA,CAACV,MAAAA,yCAAczC,GAAUd,EAAgBE,SAC9CmB,EAActB,EAAAsnB,GAAA,CACd,SAAA4S,EAAM3V,SAAAA,EAAUlK,KAAAA,IAAQ2Y,kBAAAA,GAAYtG,kBAAAA,EAE1C,CAAM7pB,EAAAA,MAGFmwB,OAAAA,EAAqB,SAAAj2B,EACzB,KACE,IAAAoD,kBACO,GAAO,kBAAA,EAA6C0C,CAAI1C,CAElD,CAAA,CAELpD,EAAAA,CAAAA,CAAAA,CAAAA,CACK,CAAA,CACY,EAAA,YACAwnB,CAAA,EAAA,EACjB,MAAAgW,EAGFv6B,EAAO,OAAA,EAAA,OAAAg6B,EACLvvB,IAAQiiB,CAAAA,EAAAA,IAAAA,CACR3vB,KAAAA,CAAAA,GAAAA,EACK,iBAAAy9B,CACY,EAAA9N,EACA2N,EAAAt9B,EAAA,IAAAA,CAAA,MAAAm9B,CAAA,GAAA,MAAAA,CAAA,GAAAO,EAElBh4B,EAAA,GAAAA,EAAAu3B,EAAA,OAAA,EAAAU,EAEChO,EAAA,WAAA,CAAA,CAAAA,EAAA,YAACiO,EACL,CAAAH,GAAAE,GAAAj4B,EAAA,GAAA83B,GAAAE,IAAAx6B,IAAA,UAAAA,IAAA,gBAAA,CAAAu6B,GAAA,CAAAR,EAAAv3B,EAAA,CAAA,EAAA,kBAAA,CAAAu3B,EAAAv3B,EAAA,CAAA,EAAA,kBAEPm4B,EAAAn4B,IAAA,EACao4B,EAAAp4B,IAAAu3B,EAAA,OAAA,EAAC,OAnCEzV,EAAAA,KAAAA,CAsCzB,MAAA,wDAAAtkB,CAAA,4BAAA26B,EAAA,QAAAC,EAAA,MAAA,QAAA,IAAAL,EAAA,4BAAA,EAAA,GACMD,SAAAA,IAAmB38B,CACzB,MAAc0D,4BACN,GAAA+4B,EAAM9V,SAAAA,EAAAA,EAAAA,GAAAA,CAAUiW,OAAAA,EAAqB9N,SAAAA,CAC3C,CAAM7pB,EAAAA,IAAqB9F,GAAAA,CACrB09B,SAAWh4B,EACXi4B,SAAAA,EACAC,kBACFH,EAQEI,iBAAAA,CAEN,CAAA,IACEtT,GAAA,CAEU,OAAAoF,EAEkDvsB,SAAAA,EAE9C,kBAAA06B,EAAgCh4B,iBAAAA,CAElB,CAAA,CAAS6pB,CAAM3vB,CAAAA,EAAAA,YAErCiD,CAAAA,EAACsnB,CAAM,CAAA,CAELvqB,CAAAA,MAAAA,EACmB89B,YAAAA,EAAAA,CAAAA,GACnB7D,OAAAA,IAAAA,QAAAA,EAAAA,EAAAA,GAAAA,CACA,MAGFh3B,gBAAO,OACG0sB,KACR3vB,SAAAA,EAAAA,SAAAA,CAEAi6B,EAAAA,CAAAA,EAAAA,EAAAA,GAAAA,CAAAA,MAED,gBAAA,OAEC,KAAC,OAAAvsB,EAGZ,SAAA1N,CAGG+9B,EAAAA,CAAAA,EAGGvE,EAAAA,KAAAA,CACK,SACFv2B,EAAAkE,EAAA,CACN4tB,MAAO,4BAEPvN,GAAAA,EACAxnB,SAAAA,EAAAA,EAAAA,GAAAA,CAAAA,SAAAA,EAFK+9B,SAAAA,EAOC,kBAAA,GACC,iBAAA9D,EAEPvsB,gBAAAA,CACA1N,CAAAA,EAAAA,EAAAA,GAAAA,CAED,OAAA0N,EAEL,SAAA1N,EAEA,kBACE,GAAAoD,iBAAAA,EACc,gBAAA82B,CAAgCp0B,CAAI1C,CAErC,CACLokB,CACAxnB,EAAAA,CAAAA,CAAAA,CACiB,SACjBi6B,GAAAA,CACAC,MAAAA,EAAAA,MAAAA,EACA,SAAA92B,CAGK,EACLsK,CACA1N,MAAAA,EAAAA,IACAg+B,EAAiBl/B,IACjBm7B,EAAAA,IACAC,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,IAAAA,CAAAA,WAED,IAAA,CAEC+D,EAAA,EAAA,CArBCF,EAsBL,CAAA,CAER,EAAA,CAAA,CAAA,EAESb,EAAe,MAAA,CAAEz2B,MAAAA,mBAAAA,CAAAA,GAAcnC,SAAAA,CAAAA,EAAAA,SAAAA,CAAWlB,SAAAA,CAAAA,EAAAA,KAAAA,CAAY,SAAAqD,CAC7D,CAAA,WAA2B,CAKrBy3B,qBAAwB,OAkBvBC,KAAAA,SACPp/B,MAAgB,eACdyC,QAAiB,IAAA,UACfy8B,EAAAA,EAAc,UAAdA,MAAAA,EAAc,SAAA,CACZ,KAAA,CAAA,KAAA,IAAA,KAAAn8B,EAAAs8B,EAAA,UAAA,YAAAt8B,EAAA,WAAA,EACD,SAAA,QAEL,EACe,EAA8BsB,SACzCgB,EAAAf,EAAA,CAAAD,KACEH,cAAA,CAAKwD,CAAAA,CACLrC,EAAAA,IAAAnB,EAAA,SAAA,CAAAG,IAAAA,EAEIoC,KAAK04B,SACLh7B,MAAK,eACLc,QAAM,IAAA,cAES,kBAAA,SAAA,CACbo6B,KAAAA,cAA8Bt8B,EAAAs8B,EAAA,UAAA,YAAAt8B,EAAA,WAAA,EAC5Bu8B,SAAOlnB,QAA8C,EAC3C,EAEd,SAAAlU,EAAAI,EAAA,CAAED,KAAAA,eAEG,CAAA,CAAM,CAAA,CAAc,CAAE,CAAA,CAAC,CAE9B,CAAA,EAAAgB,EACOk6B,KAAAA,CAAAA,IACAF,EAAA,SACC,CAAAn7B,EAAAwa,GAAA,CAAA,+BAGJ2gB,SAAAA,IACEC,EAAe,UAAqCH,EAC1C,QAAA,SAAArB,EAAA,CACX,CACH,EAAAz5B,EAAA,CAAA,EAAA+6B,GAAA/6B,EAAA,MAAA,CAAA,EAAAH,EAAAwa,GAAA,CAAEra,MAAAA,yBAEG,SAAMy5B,GAAA,CAAiByB,EAAA,UACrBA,EAAA,QAAA,SAAAzB,EACJ,CAAA,CAETz4B,CAAAA,CAAA,CAAA,CAAIoB,CAAK44B,CAAYh7B,CACZ,CACC,YACgB,CACpB,OAAAsK,EACEwwB,SAAAA,CAAkCrB,EACtC,CAAE,MAEHz5B,EAAUO,GACAP,CAAAA,EAETY,CAAM,GAAAtD,EAEJ,WAAAg1B,EAA0B4I,SAAAA,CAC5B,EAAA5wB,EACA6wB,EAAAC,GAAA9wB,CAAA,EACC4jB,EAAAlB,GAAA1vB,EAAAV,CAAA,EAAA,OACFoE,EAAA,UAAA,CAET,MAAA,yBAAAsxB,IAAA,SAAA,oBAAA,EAAA,GAEA,SAA+B,KAAEhoB,SAAAA,CAAAA,EAAAA,mBAAAA,CAAAA,EAAAA,EAAAA,MAAAA,CAAQ1N,MAAAA,sBAAY,SAAA,CAAAiD,EAAAI,EAAA,CAC7CK,KAAAA,SACA,KAAA,GAAEhD,CAAAA,EAAAA,EAAAA,mBAAAA,CAAAA,EAAAA,IAAAA,EAAAA,mBAAAA,CAAAA,CAAAA,KAAAA,EAAAA,CAAAA,CAAIg1B,EAAAA,EAAAA,MAAAA,CAAYC,MAAAA,sBAAajoB,SAAAA,EAAAA,EAAAA,CAC/B6wB,KAAAA,SACAjN,KAAAA,GACN,CAAA,CACE,CACU,EAAAltB,EAAA,MAAA,CAGC,MAAA,kBAAIhB,MAAAA,EAGNY,KAAM2xB,EAAqBvyB,IAAAA,OACzB,SAAM,CAAAm7B,EAAA7wB,EAAA,WAAAA,EAAA,aAAAtJ,EAAAC,EAAA,CAASd,SAAK,CAAA,IAAAN,EAAA,OAAA,CACxBS,MAAW+6B,gBAKdx7B,SAAAA,EAAAI,EAAA,CAAW,KAAA,YAAqBD,QACzB,CAAM,CAAA,CAAc,CAAA,CAAA,CAAK,CAAA,CAAA,CAC3B,CAEPgB,CAAA,CAAA,CACQ,CACCm6B,SACD5I,IAAAA,CAAAA,MACF,CAAA,CAAA,SAAA,cAAA,sCAAA,CAAA,CC1xBZ,MAAMhpB,GAAQ,GACR+xB,GAAW,KACXC,GAAkB,GAAED,EAAS,MAE7BE,IAAsB,IAAM,CAC5B,GAAA,CACIra,MAAAA,EAAQplB,SAAS2S,cAAc,OAAO,EACtC+sB,OAAAA,EAAAA,aAAa,OAAQ,OAAO,EAC3Bta,EAAMrhB,OAAS,aACZ,CACH,MAAA,EACT,CACF,KAEA,eAAe47B,GAAiB9+B,EAAU,OAClC,KAAA,CAAED,MAAAA,GAAUuB,EAAI,CAAEtB,SAAAA,CAAAA,CAAU,EAC5BuQ,EAAU,MAAMxQ,EAAMiZ,GAAGC,OAAOhY,MAAM,CAC1C+T,EAAG,UACH9R,KAAM,WACN1C,MAAO,CAAA,CACR,EACM,MAAA,CAAC,GAAC+P,EAAAA,GAAAA,YAAAA,EAASjD,WAATiD,MAAAA,EAAmB1P,OAC9B,CACA,MAAMk+B,GAAkB9xB,GAAK6xB,EAAgB,EAE7C,SAASE,IAAkB,CACnBt7B,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAEQ,GAAAA,EAAI,GAAGksB,GAAWqS,GAAU,EAC9B,CAAChT,EAAcC,CAAe,EAAIC,GAAgB,EAClD+S,EAAQjT,EAAalnB,IAAI,OAAO,EAChCo6B,EAAiB,CAAClT,EAAalnB,IAAI,SAAS,EAC5Cq6B,EAAgB,CAAC,CAACnT,EAAalnB,IAAI,QAAQ,EAC3Cs6B,EAASpT,EAAalnB,IAAI,QAAQ,EAClCkW,EAAQ,CAAC,CAACgR,EAAalnB,IAAI,OAAO,EAClC,CAAEhF,MAAAA,EAAOC,SAAAA,EAAUgO,cAAAA,GAAkB1M,EAAI,CAAEtB,SAAU4sB,EAAO5sB,QAAAA,CAAU,EACtE,CAAED,MAAOkO,EAAcjO,SAAUkO,GAAoB5M,EAAI,EACzDg+B,EAA0BxgC,IAE1BygC,EAAkB,CAACL,EAAOC,EAAgBC,EAAeC,EAAQpkB,CAAK,EACtE,CAACxV,EAAS+5B,CAAU,EAAI3/B,EAAS,EACjC4/B,EAAkB3gC,EAAO,CAAC,EAChCC,EAAU,IAAM,CACd0gC,EAAgBzgC,QAAU,GACzBugC,CAAe,EAEZjxB,MAAAA,EAAsBF,GAC1B,IAAMpO,IAAakO,EACnB,CAAClO,EAAUkO,CAAe,CAC5B,EACM,CAACwxB,EAAeC,CAAgB,EAAI9/B,EAAS,EAAK,EACxDd,EAAU,IAAM,CAGTuP,GACA7I,GAAAA,MAAAA,EAAS+I,OACb,SAAY,CACL6f,MAAAA,EAAU,MAAM0Q,GAAgB/+B,CAAQ,EAC9CX,EAAYgvB,CAAA,CAAA,IAAEA,EAAAA,CAAQruB,EAACsO,EAAA7I,GAAA,YAAAA,EAAA,IAAA,CAAA,EACvBk6B,eAAAA,EAAwBtvB,EAAA,cAC1B,MAAGuvB,EAAA,iBAAA,KAAAV,CAAA,EACDl/B,IAA+ByF,IAAAA,GAAAA,GAAAA,YAAAA,EAAAA,QAAAA,YAAAA,GAAAA,KAAAA,EAAAA,OAAAA,YAAAA,GAAS+I,KAAKkwB,GAEjD,GAAAkB,MACQA,GAAAA,CAAAA,EACN,gBAEM,KAAU,EACZ,EACW,KACH,CAAAC,EAAAC,CAAA,EAAAZ,EAAA,MAAA,GAAA,EACRa,EAAA,SAAAD,EAAA,EAAA,EAAA,EACFE,GAAA,IAAA,KAAAH,EAAAE,EAAA,CAAA,EACME,GAAQH,GAAME,GAAId,YAAe,CAAA,KAAAc,GAAA,SAAA,EAAA,GAAA,SAAA,EAAA,SAAA,EAAA,GAAA,CAAA,IAAAA,GAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,GAAA,CAAA,GACjCD,EAAalR,IAAAA,KAAAA,EAAiBkR,EAAM,EAAA,CAAA,EAQpCC,GAAYz9B,GAAKs9B,EAAAA,kBAAoBK,EAAA,SAAA,EAAA,GAAA,SAAA,EAAA,SAAA,EAAA,GAAA,CAAA,IAAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,GAAA,CAAA,GACrCD,IAAAA,GAIN5vB,GACM8vB,GAAAA,GAAa,EAGnB9gC,EAAY,QAAA,IAEVwgC,GAAAA,GAAAA,EAAAA,QAAAA,EACAC,EAAAA,SAAAA,IAEAE,MAAAA,GAAAA,MAAAA,EAAAA,GAAAA,OAAAA,MAAAA,CACAE,EAAAA,QAAAA,EAAAA,IAAAA,UAAAA,EAAAA,WAAAA,EAAAA,GACAD,KAAAA,WACAE,MAAAA,GACD,OAAAV,EAAA,OAED,CAAIj/B,EACJ,IAAI6P,GAAAA,IAAAA,YAAAA,GAAW,WAAXA,MAAAA,GAAW,OAAA,CACb7P,MAAAA,GAAgB4/B,GAAA,SAAA,MAAA,EAAAzzB,EAAA,EAChB8yB,GAAAA,QAAgBzgC,GAAU,CACrByyB,GAAA9B,EAAA3vB,CAAA,CACLQ,CAAQmM,EACR8yB,MAAAA,EAAAA,GAA2B9yB,SAAAA,QAAAA,GAC7B,MAAA,CAEA,MAAsB0zB,QACT56B,CAAmD,CACxD,KAEN66B,QACD,MAAA,CAAA,EACGF,KAAAA,EACF,CAEE3O,CAAyB,MAC1BlhB,GAAA,CAAA,EACKoM,GAAAA,EAAAA,CACC,KAAA,CAAA,MAAEhc,CAAAA,EAAOgc,MAAAA,EAAAA,GAAAA,SAAAA,QAAAA,CAAAA,EAAAA,SAAAA,KAAAA,CAAK,OAAA,EAAA,CAChB,EAAA,KAAA,EACE,GAAA0jB,GAAA,MAAAA,EAAA,QAAA,CAAAhB,GAAA,CAAApkB,EAAA,CAAA,QAAWolB,EAAA,IAAA3yB,IAAEiP,GAAMjP,EAAA1N,CAAA,EAAK,CACjC,GAAA0N,EACF,QAAA,EAEA,EACe,EACP,GAAA6yB,EAAA,QAAA,EAAA,CAAE5/B,MAAAA,EAAAA,EAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAU4P,GAAYlQ,KAAAA,CAGlB,GAAAmgC,EAEJ,MAAAD,EACG1/B,KAAAA,QACT,CAAM0/B,CACJ9O,MACOlhB,GAAA,KAAA,GAAAgwB,CAAA,CACF7yB,CAEL,EACF2C,GAAC,CAAAivB,EAAA,WACGiB,UAA4BxgC,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,SAAA,KAAA,CAC9B,MAAAiM,GACA4D,gBAAa4uB,EAAA,gBACPqB,EAAAA,WACGD,EAAAA,OAAAA,CACD,CAAA,GAGA/4B,KAAAA,CACV,MAAA7G,GACF,KAAAgc,EACF,EAAA,MAAA2iB,EAAA,QAAA,OACIjvB,OAAAA,IAAAA,MAAAA,GAAAA,SACsBrR,GAAAA,KAAAA,GAAAA,EAAAA,EAEP2B,GACNgM,QAAAA,GAAAA,CACP8zB,GAAiBtB,EAAAA,CAAAA,CAAAA,CAAAA,GAGjBE,CACF,MAAC9uB,GACL,KAAAoM,EACA,CAAQhc,CAAOgc,KAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAAA,GAASlX,GAAA,MAAAA,EAA8BzG,KAAAA,GAAAA,GAAAA,MAAAA,EAAAA,YAAayG,EAAA,YAAA,IAAA,EAAA,IAAAA,EAAA,IAAA,GAAA05B,EAAAC,EAAA,cAAAC,EAAA,MAAAA,CAAA,IAAApkB,EAAA,WAAAikB,EAAA,KAAA,IAAA,KAAAA,CAAA,EAAA,eAAA,UAAA,CACnE,aACU13B,KAAAA,SAER7G,CAAAA,CAAAA,IAAAA,GAJiE,cAI3DoP,mBAAkB,mBAAA,EACtB0hB,MAAAA,EAAyB3yB,IAC1BgP,EAAA6tB,GAAA,IAAA,CACH,MAAA+E,EAAAC,EAAA,SAAA5gC,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,QACO,OAAAigC,EAAA,QAAAD,EACEnwB,CAAAA,EACPoM,CAAAA,EAAAA,CAAAA,CAAAA,EACF5d,EAAA,IAAA,EACF,SAAA,CAEA,GAAqB6hC,CACrBC,MACWryB,EAAAA,MAAAA,IAcUgxB,EAAA1jB,CAAA,CAAA,MACD,CAAA,CACL,GACH,CAMN6kB,cAAgC5gC,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,aAAA,OAChCoN,GAAiC,CACrC,MAAM4yB,CAAAA,CAENC,IACA,EAAOD,CAAAA,CAAAA,CAAAA,EACT,KAAQ3gC,CAERhB,YAAAA,EACE,KAAAyP,EACM,OAAAK,CACF,EAAMiN,GAAAA,CAAAA,EACNzc,EAAe+O,GAAA,IAAA,CACfoxB,MAAAA,EAAc97B,EAAA,SAAA,GAAAhD,CAAA,IAAAV,CAAA,EAAA,EAAA,SACJ6Y,GAAA,CACVxZ,SAAAA,EACF,QAAAyhC,GAAApgC,EACI,aAAAoN,EACIizB,cAAAA,EAGN1hC,WAAY,EAAA,CAAA,CAAE0hC,EAAAA,CAAAA,EAAc/gC,EAAAgO,EAAAF,CAAA,CAAA,EAC5B8yB,EAAAA,MACUxyB,GAAA,IAEZhK,EAAAC,EAAA,CACC,SAAA,CAAA28B,EAAA58B,EAAA,MAAA,CACC,MAAC,aAED,IAAA68B,EAAEryB,MAAAA,CAAaJ,SAAAA,UAAMK,WAAuB,EAL9BlM,GAACy8B,GAAAC,GAAApkB,GAAA,CAAA,CAAAikB,EAK6Bj8B,EAAAkE,EAAA,CAE5C65B,GAAAA,IAAAA,CAAkB5yB,OAAQ,GACxB0yB,mCACN,MACc,gBACV9gC,SAAAA,EAAAA,EAAAA,MAC0BU,IAC1BoN,KAAAA,GAAAA,CACAE,CAAAA,EACU,eAAA,EAAA/K,EAAAI,EAAA,CACX,KAAA,SAEGrD,MAAUgO,wBAGlB,CAAMkzB,EAAAA,EAAAA,EAAAA,CACErL,QACHsJ,MAAAA,CAAAA,GAAAA,eAA6ClkB,EAAAA,GAEhD,QACE,IAAA,CAAAkkB,GAGUnpB,GAAA,2BAAA,CAEC,EACLqZ,MAAU8P,EAAA,GAAA,YACZ,SAAA,WAAA,CAECtJ,EAAAA,EAAAA,EACC5yB,CACEmE,GAAK,IAAGpH,CAAS,MAAKU,CAAG,GAAA0+B,EAAA,GAAA,WAAA,GACzBp7B,QAAM,IAAA,CACAo7B,GAAeh8B,iCAGhB,CAAM,EAAY,MAAEg8B,EAAA,YAAA,GAFrB,SAAA,UAKD,CAAA,EAAMn8B,EAAAkE,EAAA,CAASnD,GAAM,IAAAhE,CAAA,MAAAU,CAAA,GAAAua,EAAA,GAAA,UAAA,GAAgB1X,QAAK,IAAA,CAEhD4D,GACM6O,GAAY,0BAAUmpB,CAEzB,EACEnpB,MAAAA,EAAqC,YAAA,GACvC,SAAA,OAAA,CACF,EAAA+qB,EAAA,IAAAjc,GAAA7hB,EAAAkE,EAAA,CACAnD,GAAAA,YAAwB,GAAKq7B,IAAAva,EAAA,KAAA,GAAA,WAAA,mBAAAA,EAAA,IAAA,CAAA,EAAA,GAAY1hB,QAC1C,IAAA,CAGDH,IAAK6hB,EAAA,MACE9O,GAAY,gCAA+B,IAAY,EAAA,CAE1D,EACEA,MAAAA,IAAwC8O,EAAA,KAAA,YAAA,GAC1C,SAAA1gB,EAAA,OAAA,CACF,SAAA,CAAAnB,EAAA,OAAA,CACAe,MAAQo7B,qBACT,SAAA,GAAA,CAGDn8B,EAAAA,EAAK,IAAA,CAAA,CACHmE,CAAmD,SACpCs4B,IAAAd,GAAAx6B,EAAA,QAAA,CACb,MAAK6W,gBAAOikB,EAAA,YAAA,EAAA,GACVlpB,SAAAA,CAAAA,EAAoC3S,EAAA,CACtC,KAAA,QACF,KAAA,GAAA,CACAW,EAAAA,UAA6B,CAC9B,KAAA,QAGA+8B,SAAAA,EAAAA,GAAAA,MAAAA,EAAkBjc,MAGV,MAAYoa,GAAA,UAMXG,IAAqB,IAAA,KAAA,EAAA,YAAA,EAAA,MAAA,EAAA,CAAA,EACZ,QAAA18B,GAAA,CACb,KAAA,CACF,MAAAhC,EACO0+B,SAAAA,EAAoC,EAAGj8B,EAE9CgB,cAAAhB,GAAAA,CAAAA,GACE,MAAY,OAAoBA,EAACzC,EAAA,CAChCmkB,MAAQnkB,CACL,EAAA,CAAA,CAAA,QAOT++B,GACEd,EAAAA,EAAAA,EAAAA,MAAAA,GAAAA,EACgBmB,GAAeb,SAAQiC,GAAA,EAAA,EAAiB,EAAEC,GAClD,IAAA,KAAAC,GAAAtB,EAAA,EAAM/pB,GAAA,oBAAAorB,GAAA,eAAA,UAAA,CAAa,MAAA,OACxBn+B,KAAA,SAAA,CACO,CAAA,EAAA,CACL2D,CAAoB4H,CAAAA,CACpB7N,CAAgB,CAAA,EAEwBsC,KACxB,CACR,MAAA,gBAAAi8B,EAAA,YAAA,EAAA,GAAEv+B,SAAAA,EAAAA,GAAAA,MAAAA,EAAAA,MAAO2gC,MAAAA,GAAAA,GAAAA,OACf,IAAcC,IAAAA,KAAAA,EAAAA,YAAAA,EAAAA,MAAAA,EAAAA,CAAAA,EAAO,QAAA5+B,GAAA,CACrBupB,KAAAA,CAGQgT,MAAAA,EACF,SAAAoC,EAGN,EAAA3+B,EACA2+B,GAAmBzS,OAGhB3C,EAAAvrB,EAAA,CACCu+B,MAAOv+B,CAAA,EACD,CAAA,CAAA,CACR,CACF,CACF,EAAE,CACF,CAAA,CAAA,CACG,CAAA,EAAA,CAAAD,EAGPuC,EAAY+K,EAAA+yB,EAAArB,EAAA,GAAAH,CAAA,CAAA,EAAAxgC,EACViF,IAAQ,OACR4C,MAAAA,GAAAA,EAAAA,EAAoB4H,UAApB5H,YAAAA,EAAoB4H,cAAAA,cAAAA,GACJyyB,EACXtC,QAAAA,SAAAA,CACL/f,SAAK,SAAmC,OAC9Bjc,YAAMs+B,EAAA,QAAA,YAAAO,EAAA,aAAA,CACd,CAAM,CAASF,EAAAA,CAAAA,EAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,MAAAA,GAAa3+B,GAAAA,IAC5B8C,GAAA,MAAAA,EAAI,IACJymB,IAAAA,IAAAA,EAEM,GAAA,EAAA,SAHe,KAKf,CAAAzmB,CAAA,CAAA,EAGRg8B,GACD,CAAA,CAAAh8B,GAAA,EADCzF,IAAA+S,IAEF,OAAA9P,EAAAm2B,GAAA,CAAA,MACA,GAAA3zB,GAAA,MAAAA,EAAA,KAAA,IAAAA,EAAA,KAAA,OAAA,GAAA,eACNrB,EAAA,KAAA,CAGJ1D,MACAV,qCAOFjB,SAAgB,CAAAkE,EAAA,IAAA,CAEd,SAAeg+B,EAAAA,GAAsBj+B,CACzB,KAAA4L,EACVvP,OAAAA,CACA4hC,CAAAA,CAA8B,CAAA,EAClBh+B,EAAA,MAAA,CACVo7B,SACSqD,EAAAA,OAAAA,CAEV,SAAA,CAAA,IAAAlzB,CAAA,CAAA,CACH,CAAA,CACEuyB,CAAAA,CAEJ,CAAMhuB,EACJ,GAAI,mBAAsB,SAAA/S,EAC1B,UAAe,2BACRmQ,UAAAA,uBACT,WAAYwxB,EACZ,aACA,KAAoB1mB,EAAA,QAAExV,OAEtB,eACW/B,EAAA,SAAA,eAEP+C,cAAUhB,EACV4zB,QAAAA,CAAAA,EACE+F,EAAAC,EAAApkB,EAAAikB,GAAAz5B,GAAA,YAAAA,EAAA,KAAA,EAAA,SAAA,EAAA,UACQrB,EAAAkC,GAAA,CAMNlD,OAAAA,GAEAA,SAAAA,OACY,WAAOwL,QAAaC,SAAAA,SAAAA,WAAiB5L,EAAA,SAAA,CAEjDA,KAAAA,SAAAG,MAAAA,QACEA,SAAAA,EAAMC,EAAM,CAAO,KAAA,OACf,KAAA,GAAA,CACJ,CAAA,CAEH,EACHrD,SAAAA,CAAAA,EAAAA,GAAAA,CACU,SAAA,CAAAyhC,GACA,QAAA,IAAA,EACEE,SAAAA,CACH,GAAA,MACep5B,CACxBkxB,OACeyH,EAAAA,EAAAA,CAEb/B,SAAAA,EAKS,CAET/6B,EACQ0X,EAAA,MAAA8lB,EAAA,GAAA,SAAA,OAAA,CAEG,KAAAn8B,EAAA,IAAA,CACE,EACF,CACTe,IACe,EAAAsV,EAAe,SAAA,KAAA,IAAA/I,EAAA,MAAA2Y,CAAA,EAAOtoB,MAC5B,CAAM,MAAA,8BAAA,CAAY,CAAA,IACjB,EACTA,SAEDgB,CAAAA,EAASf,EAAA,gBACIo+B,OACFt+B,EAAM,QAAA,CACb,MAAa,oBACP,SAAA,CAAA,iCAAAF,EAAA,IAAA,CACI,SAAA8P,EAAA,CAAA,EAAA,GAAEhT,CAAAA,CAAAA,CAAAA,CAAc,CAAA,EAAA,CAAAuO,GACVyE,EAAAA,GAAAA,CAAAA,QACX,IAAA,EACD,SAAY,CAA+B,GACzCvE,CACF,MAACsN,EAAA,MAAA7N,EAAA,GAAA,SAAA,OAAA,CACK,KAAAxI,EAAA,KAAA,IAAAzF,CAAA,CAAA,EAAS8b,CACf7Q,GAAAA,KAEA5L,cAAe,IAAA6O,CAAA,MAAAwd,CAAA,EACflf,MAAoC,CACtC,MAAA,8BAAA,CACC,CAAA,IACHpJ,EAEG,SAAM,CAAAH,EAAAI,EAAA,CAAY,KACvBe,UAAA,CAAA,EAAa,IAAAA,EAAA,QAAA,CAAmBhB,MAAA,oBACA,SAAI2P,CAAAA,0BAAAA,EAAAA,IAAAA,UACpC7E,CAAQ,CAAA,EAAA,GAAA,CAAA,CACA,CACT,CACU,CAAA,CACP/K,CACE,CAAA,CACM,EAAAzC,CAAA,CACF,CAAkD,SAChD8N,GAAAA,EAAcA,CAAaxO,KAAAA,CAEvB,MAAAsE,EAAA,SAAAsC,EAAElG,MAAAA,EACRuK,IAAAA,EAA4C,IAAA2T,EAE5Cvf,QAAAA,EAAAA,IAAAA,CACAmN,CACF,EAAAse,EAAA,CAAA+U,EACCC,CAAA,GAAAn/B,GAAA,YAAAA,EAAA,MAAA,OAAA,GACLkhC,EAAA/iC,IAAEsE,EAEFH,IAAK6+B,EAAM,CAAA5C,EAAAmC,IAAA,CAAA,KAAY,CAAAU,EACvB39B,CAAA,GAAAua,GAAA,YAAAA,EAAA,MAAA,OAAA,GAAO3a,CAAMg+B,EAAAC,CAAA,GAAArjB,GAAA,YAAAA,EAAA,MAAA,OAAA,SAAA,EAAAyiB,EAAmBU,GACYV,EAC5CW,GAEHX,IAAAU,GAAA7C,EAAAgD,GAGNb,IAAAW,GAAA9C,EAAA+C,EAKH,EAAM,OACG39B,EAAAA,MAAAA,CACPsC,MAAAA,EACAjG,SAAAA,CAAAA,EAAAA,EAAAA,CACAge,KAAAA,QACAC,KAAAA,GAAAA,KACU4G,SAAM,CAAC,IAAAqc,EACf/W,SAAAA,EACE,SAAc,GACpB,YACMqX,MAEAL,MAAAA,CACJ,oBACwBK,UAAe,MACnCd,GAAOU,CAAAA,EAAAA,EAAAA,CAAAA,EAAgB,MAAA,CAChBC,MAAAA,GAAgB,SAAA,CACvBX,QAA6C,CACjD,EAAiD7b,EAAA,CAC1C,MAAA0Z,EAAA,GAAAmC,CAAA,IAAAnC,CAAA,GAAA,GACT,SAAA,OAGE,EAAY56B,CAAAA,CAAUlB,CACT,EAAQG,SAAK,CAAAN,EAAA,SAAA,CACxBmB,MAAA,GACOy9B,SAAAA,OAAAA,CACLj7B,EAAAA,EAAAA,SAAAA,UACiB,YACD,OACd,CAAM,EAAA,MAAA,KAAA,CAAA,OAASs4B,EAAAA,KAAYtb,IAAAA,EAAAA,SAAAA,CACrByd,OAEG37B,EAAA,GAAA,SAAA,EAAA,SAAA,EAAA,GAAA,EACE,SACG,IAAA,KAAA,EAAAA,CAAA,EAAA,eAAA,UAAA,CAAA,MACD,MAAA,CACT,CAAA,EACFA,CAAA,CAAA,CAAA,CACF8f,CAAQ,EAAA,IAAAviB,EAAA,QAAA,CAAA,MAC8B,KAC1B,SAAA,SAAA2D,EAEV,MAAAi5B,GAAA,IAAA,KAAA,EAAA,YAAA,EAAA,KACDlhB,GAAA,YAAAA,EAAA,MAAA,EAAA,KAAA+f,GACH,KAAA9f,GAAA,YAAAA,EAAA,MAAA,EAAA,KAAA,IAAA,KAAA,EAAA,YAAA,EAAExb,WAEF,CAAQzC,KAAM,CAAG,MAAA0gC,EACjBp+B,SAAAA,CAAA,EAAgBN,EAAA,cAACu8B,EAAA2C,EAAA,QAAA,MAChBjlB,GAAAA,CAAAA,EAAW,OAAA,CAAAklB,EAAA5C,EAAAmC,CAAA,EAAU,MAAA,CAAU37B,MAC9BzC,GACEtC,SAAAA,CAAAA,MAAAA,GAEoC,EACnCyC,GAIC87B,MAAOmC,EAAA,GAAAA,CAAA,IAAAnC,CAAA,GAAA,GACR,SAAA,CAEH,MAAA,EAEJj8B,CAAA,CACOk/B,CACA,EACLv7B,MAAAA,CACOi5B,MAAAA,OACFlhB,CAAoB+f,CACzB9f,CAAAA,CAAgD,CAAA,CAE9C,CCzmBV,MAAMjS,GAAQ,GAEd,SAASy1B,IAAY,CACnBvB,GAAS,YAAa,IAAI,EACpB,KAAA,CAAE9gC,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAC1B+gC,EAAoBvjC,IAC1B,eAAewjC,EAAejyB,EAAW,CACnCA,OAAAA,GAAa,CAACgyB,EAAkBrjC,WAClCqjC,EAAkBrjC,QAAUe,EAAMM,GAAG0gB,UAAUxgB,KAAK,CAAEC,MAAOmM,EAAAA,CAAO,GAE/D,MAAM01B,EAAkBrjC,QAAQ4B,MACzC,CAEA,OACEqC,EAACm2B,GAAQ,CACP3yB,MAAM,YACN/F,GAAG,YACH44B,UAAU,2CACVC,UAAU,2BACVv5B,SAAAA,EACA05B,WAAY4I,CAAAA,CACb,CAEL,CCvBA,MAAM31B,GAAQ,GAEd,SAAS41B,IAAa,CACpB1B,GAAS,QAAS,IAAI,EAChB,KAAA,CAAE9gC,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAC1BkhC,EAAqB1jC,IAC3B,eAAe2jC,EAAgBpyB,EAAW,CACpCA,OAAAA,GAAa,CAACmyB,EAAmBxjC,WACnCwjC,EAAmBxjC,QAAUe,EAAMM,GAAG2gB,WAAWzgB,KAAK,CAAEC,MAAOmM,EAAAA,CAAO,GAEjE,MAAM61B,EAAmBxjC,QAAQ4B,MAC1C,CAEA,OACEqC,EAACm2B,GAAQ,CACP3yB,MAAM,QACN/F,GAAG,aACH44B,UAAU,mCACVC,UAAU,uBACVv5B,SAAAA,EACA05B,WAAY+I,CAAAA,CACb,CAEL,CCnBA,SAASC,IAAmB,CACpB,KAAA,CAAE3iC,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAChCu/B,GAAU,oBAAqB,KAAI,EACnC,KAAM,CAACv1B,EAASC,CAAU,EAAI1L,EAAS,SAAS,EAE1C,CAACglB,EAAkBV,CAAmB,EAAItkB,EAAS,CAAE,CAAA,EAC3Dd,OAAAA,EAAU,IAAM,CACdwM,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACIuU,MAAAA,EAAO,MAAMH,KACnBwE,EAAoBrE,CAAI,EACxBvU,EAAW,SAAS,OACV,CACVlM,SAAe,CACfkM,CAAkB,IACpB,EACC,CAAA,CAAA,EACAtI,EAAA,MAAA,CAEL,GAAA,yBACOvC,MAAG,iBAAyBsD,SAAM,KAAiBuB,SAASnB,EAAA,MAAA,CAAIhB,MAAAA,qBAC9DY,SAAM,CAAAf,EAAA,SAAA,CAAoBG,SAC7BH,EAAA,MAAA,CAAAG,MAAAA,cACOY,SAAM,CAAAI,EAAA,MAAA,CAAahB,MAAAA,cACjBY,SAAM,CAAAf,EAAA8zB,GAAA,CAAA,CAAA,EAAA9zB,EAAAkE,EAAA,CAAa/D,GAAAA,IAEhBgE,MAAG,eAAIpD,SAAMf,EAAAI,EAAA,CAAcD,KAAAA,OACzBE,KAAK,GAAA,CAAA,CAAY,CAAA,CAAG,CAAE,CAAA,EACvBL,EAAA,KAAA,CAETA,SAAA,mBAAA,CAAA,EAAIA,EAAA,MAAA,CACJA,MAAA,aAAA,CAAA,CAAKe,CAAM,CAAA,CAAgB,CAAA,EACxBf,EAAA,OAAA,CAEPA,SAAA4hB,EAAA,OAAA,EAAAzgB,EAAAC,EAAA,CACGwgB,SAAAA,CAAAA,EAAAA,KAAAA,CACCzhB,MAAAA,YACMY,SAAM6gB,EAAA,IAAAC,GAAA7hB,EAAA,KAAA,CACP4hB,SAAAA,EAAAA,EAAAA,CACCzhB,GAAAA,EACO,IAAApD,CAAA,MAAA8kB,EAAA,IAAA,GAAA,MAAAA,EAAA,IAAA,GACH1d,SAEO,CAAAnE,EAAAI,EAAY,CAElBD,KAAAA,SAEI,CAAA,EAAM,IAAAH,EAAA,OAAA,CAAW,SAAEA,EAAA,IAAA,CAAA,CAAAG,CAAWiQ,CAAAA,CAAY,CAAA,CAAA,CAC3C,CAAA,EAETwR,EAAA,OAAA,GAAA5hB,EAAA,SAAA,CAEF4hB,MAAAA,WACS7gB,SAAMI,EAAA,QAAA,CAAUhB,MAAAA,gBACfY,SAAM,CAAA6gB,EAAA,OAAA,WAAAA,EAAA,SAAA,EAAA,GAAA,GAAA,CAAA,CAAezhB,CAEe,CAAA,CAAA,CACpC,CAAA,EAEVkI,IAAA,UAAArI,EAAA,IAAA,CACD,MACY,WACXe,SAAMf,EAAAuT,GAAA,CAAUpT,OACjBH,EAAO,CAAA,CAAO,CAAA,EAAEqI,IAAA,QAAArI,EAAA,IAAA,CACf,MACW,WACXe,SAAM,mCAAA,CAAA,EAAWf,EAAA,IAAA,CAEpBA,MAAAA,WAAGe,SAAM,2BAAA,CAAA,CAAW,CAAA,CAAyB,CAAG,CAAA,CAE7C,CAAA,CACJ,CCnEX,MAAM2I,GAAQ,GAEd,SAASg2B,GAAU,CAAEl8B,MAAAA,EAAOuQ,KAAAA,EAAMtW,GAAAA,EAAI,GAAGoqB,CAAM,EAAG,CACvCrkB,GAAAA,GAAS,YAAauQ,GAAQ,YAAY,EAC7C,KAAA,CAAEjX,MAAAA,EAAOsB,UAAAA,EAAWrB,SAAAA,GAAasB,EAAI,EACrCoC,EAAaC,GAAYzD,CAAM,EAC/B0iC,EAAe9jC,IACf+jC,EAAa/jC,IAEXkrB,eAA0BvjB,EAAAA,EAAAA,EAElC4J,MAAoC,WAC9BA,EAAAA,QAAcuyB,EAAa5jC,GAAS,UAAA,KAAA,KAAA,CACtC4jC,MAAAA,EAAoD,CAAA,GACtD,MAAAryB,EAAA,MAAAqyB,EAAA,QAAA,KAAA,EACA,GAAA,CACI,MAAAjiC,CAAEA,EAAAA,EAAM,GAAI4P,GAAAA,MAAAA,EAAAA,OAAAA,CAChB,MAAmB,GACbuyB,IACWniC,EAAA,CAAA,EAAA,KAAAkiC,EAAA,UACbC,MAEAD,EAAA,QAAAliC,EAAA,CAAA,EAAA,IAEQiB,EAAAA,QAAkBihC,GAAAA,CAC5BpR,GAAA9B,EAAA3vB,CAAA,CAGAW,CAAAA,EACE8wB,EAAAA,GAAyB9wB,EAAAX,CAAA,EAC1BqQ,GAAAyyB,GACO7S,KACR2B,GAAiBkR,EAAAA,CAAAA,EAA0CniC,EAAA,KAAA,CAAA4R,EAAA,IAAA,CAC3Dqf,MAAAA,EAAAA,WAAkC,SAAA,EAIhC,OADmB,IAAA,KAAA,EAAA,SAAA,EACLT,CACd,CAAA,CACA,CAAeA,MAChB,CACH,GAAA5gB,EACO,MAAA5P,CAAA,CAELA,CACF,eAAAoB,GAAA,CACF,GAAA,CAEA,MAAAwO,EAAiC,MAAAxQ,EAAA,GAAA,UAAA,KAAA,KAAA,CAC3B,MAAA,EACF,WAAsBA,OACd,CAAA,EACG,KAAA,EAAA,WAIP,EAAAwQ,EAAE5P,MAAAA,GAAAA,GAAAA,MAAAA,EAAAA,SAAU4P,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,GAChBlR,EAAY4wB,GAAAtvB,EAAAX,CAA8BhB,EAC1C2B,KAAmBA,EAAA,MAAA,EACN3B,EAAAA,KAAAA,GAAgB,CAAA2wB,EAAGjvB,MAAAA,GAK9B,MAAA,CACF,MAAA,EACO,CAAA,CAEA3B,OAAAA,EAAA,IAAA,CACT,IAAAoC,EACF,OAAA,SAAA,CAEApC,GAAAA,EAAgB,CACVoC,EAAAA,EAAAA,KAAAA,YACS,gBAAAU,KAAAV,EAAA,CACPE,GAAW,CAAAF,EACPE,MACEO,GAAAA,EAAI,wBAAwB,CACpC,MAAA8L,YACE+jB,GAAKtwB,EAAAA,CAAAA,CAAK,SAAAU,EAAA,QAAA,SAAA,CACNA,MAAAA,IAAiC,QAC7B6L,KAAeq1B,EAAAA,CAAAA,EACrB1jC,IACAoyB,EAAAA,YACF,CACE,CACQ7vB,CAER,KACIsd,IAAAA,QAAGA,EAAAA,GAAAA,YAAAA,EAAAA,cAAAA,MAAAA,EAAAA,KAAAA,GACT/d,EAAA,IAAA,CAEF9B,EAAAA,CAAAA,CAAAA,CAAQuC,EACVqB,EAAAm2B,GAAA,CACF,MAAG3yB,GAAA,YACH,GAAA/F,GAAa,YACXS,UAAmB,uBACb,UAAA,wBACR,SAAAnB,EACF,WAAcgjC,EAEd,gBAAAjhC,EAEI0E,UAAgB,GAChB/F,eAAUgD,EAAA,SAAA,eACV41B,GAAUxO,EAEV9qB,cAAAA,OACA05B,iBAAYsJ,GACZjhC,gBAAAA,EAAAA,CAAAA,CACS,CCvGf,MAAM4K,GAAQ,GAKRs2B,GAAsB,EACtBC,GAAmBD,GAAsB,EAE/C,SAASE,GAAS,CAAEloB,MAAOmoB,EAAWC,WAAAA,EAAY,GAAGvY,CAAM,EAAG,CAExD,GAAA,CAAE7J,QAAAA,EAAS,GAAG2L,CAAAA,EAAWyW,EAAa,GAAKpE,KAC3CnU,EAAM7J,UAASA,EAAU6J,EAAM7J,SACnC,IAAIqiB,EAAWriB,EAAQvI,KAAK,EAAEsJ,MAAM,QAAQ,EAC5CshB,EAASrrB,KAAK,EACdgJ,EAAUqiB,EAAS,CAAC,EACpB,KAAM,CAACrX,EAAcC,CAAe,EAAIC,GAAgB,EAClDlR,EAAQmoB,GAAa,CAAC,CAACnX,EAAalnB,IAAI,OAAO,EAC/Cw+B,EAAatoB,EAAQ,WAAa,GAElC,CAAElb,MAAAA,EAAOC,SAAAA,EAAUgO,cAAAA,GAAkB1M,EAAI,CAC7CtB,UAAU8qB,GAAAA,YAAAA,EAAO9qB,WAAY4sB,EAAO5sB,QAAAA,CACrC,EACK,CACJD,MAAOkO,EACPjO,SAAUkO,EACVF,cAAegG,GACb1S,EAAI,EACFkiC,EAAeF,EAAS/+B,IAAKmsB,GAAO,IAAGA,CAAE,EAAC,EAAEzO,KAAK,GAAG,EACpDwhB,EAAmBxoB,EAAS,gBAAiB,GAC7CxU,EAAQzG,EACT,GAAEwjC,CAAa,GAAEC,CAAiB,OAAMzjC,CAAS,GACjD,GAAEwjC,CAAa,GAAEC,CAAiB,GACvC5C,GAASp6B,EAAQ,wBAAuB,EACxC,MAAMo8B,EAAa/jC,IAGb4kC,EAAQ5kC,EAAOyJ,MAAS,EAC9B,eAAeo7B,EAActzB,EAAW,CAUhCE,MAAAA,EAAU,MAAMxQ,EAAMM,GAAGujC,UAAU9e,IACtC7e,QAAQgb,CAAO,EACf1gB,KAAK,CACJC,MAAOmM,GACPk3B,IAAKP,EAAStT,MAAM,CAAC,EACrB8T,MAAOzzB,EAAY9H,OAAYm7B,EAAM1kC,QACrC+kC,UAAW9oB,CAAAA,CACZ,EACAra,KAAK,EACJ,GAAA,CAAED,MAAAA,CAAU4P,EAAAA,EAChB,OAAI5P,GAAAA,MAAAA,EAAOE,SACLwP,IACSrR,EAAAA,QAAU2B,EAAM,CAAC,EAAED,IAIhCC,EAAMoP,QAAkB4f,GAAA,CACtB8B,GAAW9B,EAAM3vB,EAAU,CACzB0xB,cAAezW,CAAAA,CAChB,CAAA,CACF,EAEDyoB,EAAM1kC,QAAU2B,EAAMA,EAAME,OAAS,CAAC,EAAEH,IAEnC,CACL,GAAG6P,EACH5P,MAAAA,CAAAA,CAEJ,CAEA,eAAeoB,GAAkB,CAC3B,GAAA,CACIwO,MAAAA,EAAU,MAAMxQ,EAAMM,GAAGujC,UAAU9e,IACtC7e,QAAQgb,CAAO,EACf1gB,KAAK,CACJC,MAAO,EACPqjC,IAAKP,EAAStT,MAAM,CAAC,EACrBgU,SAAUnB,EAAW7jC,QACrB+kC,UAAW9oB,CAAAA,CACZ,EACAra,KAAK,EACJ,GAAA,CAAED,MAAAA,CAAU4P,EAAAA,EAEhB,OADQ4f,EAAAA,GAAcxvB,EAAO,QAAQ,EACjCA,GAAAA,GAAAA,MAAAA,EAAOE,aAID,CACH,MAAA,EACT,CACF,CAEA,KAAM,CAACojC,EAAeC,CAAgB,EAAIrkC,EAAS,SAAS,EACtD,CAACqC,EAAMmM,CAAO,EAAIxO,EAAS,EAEjCd,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CACImD,MAAAA,EAAO,MAAMnC,EAAMM,GAAGyf,KAAK7Z,QAAQgb,CAAO,EAAEhgB,QAClD5B,EAAQuC,CAAQ,CAChByM,MAAY,CAAA,CAAA,IAEZhP,EAAAA,CAAAA,CAAAA,CAAAA,EACF,MAAA8kC,EAAAb,EAAA,QAAAJ,GAAA,OACCjgC,EAAAm2B,GAAA,CACL,MAAA3yB,EAEM09B,eAAAA,CAAab,IAAmBJ,EAAAA,KAAAA,CAEtC,4BAGIz8B,SAAAA,CAAAA,EAAAA,IAAAA,CAEE,SAAA+8B,CACE,CAAU,EAAAvgC,EAAA,MAAA,CAAqBG,SAC7BH,CAAA,CAAA,CAAAG,CAAIogC,CAAY,EAChB,GAAApgC,UAAMpD,SAAAA,EAAe,UACnB,gDAGRU,UAAG,qCACHV,WAAAA,EACAs5B,gBAAAA,EACAC,UAAU,GACVG,KAAYiK,EAAAA,QAAAA,OACZ5hC,QAAAA,EACAy3B,cAAS,SACTQ,YAAwBzxB,GAAAA,CACf0S,OAAAA,GAEK,gBAAA,GACd4e,gBAEInB,SAAM,SACN0L,WAAenhC,EAAA,SAAA,CACN,KAAA,SAEA,MAAA,QACTuD,SACEvD,EAAAI,EAAA,CAAa,KAAA,OAAe,KAAA,GAAA,CAAOD,CAC5B,CAAA,EAAM,SAAY,CAAA,CAAA,CAAAlB,GAAAohC,EAAA,SAAA,GAAAl/B,EAAAC,EAAA,CAAG,SAAE,CAAApB,EAAA6D,GAAA,CACtB,QAAA,GACT1D,QAEElB,YACDkB,aACG0D,aAAWma,CAAA,IACVla,SAAOk9B,IAAA,WAAA,CAAAj2B,EACPyI,QAASvU,IAAKiS,CACdnN,WAAmC,EACnCJ,EAA4B,YACb,GAAA,KAAA,QAAAqa,CAAA,EAAA,SAAA,EAAA,KAAA,IAAA,CACbijB,EAAAA,IACS/vB,EAMD9T,UACK4gB,EAGP5S,CAAQ,EAAA2H,GAAK9T,eAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,MAAiBS,GAAA,CAAM,MAACA,CAAA,CACrCqT,CAAW,EAAA,QAAA,IAAA,CAEZquB,EAAa,SAAA,CACZ73B,CAAAA,EAEFzM,EACCukC,GAAAA,KAAc,QAAArjB,CAAA,EAAA,OAAA,EAAA,KAAA,IAAA,CACbijB,EAAAA,CACD,GAAAhiC,EACE,UAAA,EACLnC,CAAMM,EAIM2V,GAAA,aAAAiL,CAAA,EAAA,CAAA,CAAA,EAAA,MAAK/e,GAAAA,CAAAA,MAAiBS,CAAA,CAAA,CAAA,EAAM,QAAA,IAAA,CACzBuhC,EAAA,UAAqB,CACjC,CAGC7kC,EACF,SACCilC,EAAQ,UAAMlgC,EAAAC,EAAA,CACb6/B,SAAAA,CAAAA,EAAAA,EAA0B,CAC5B,KAAC,cAAA,CACL,EAAA,IAAAjhC,EAAA,OAAA,CACF,SAAA,YAAA,CAECf,CAAAA,CACC,CAAAkB,EAAAA,EAAAA,EACO,CAAA,SAAM,CAAAH,EAAAI,EAAA,CAAgB,KAAEJ,MAAA,CAAA,EAAM,IAAAA,EAAA,OAAA,CAAiB,SAAA,QAAA,CAGtDmB,CAAAA,CAAA,CAAAhB,CACO,CAAA,EAAAH,EAAM0D,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA1D,EAAQshC,GAAE,CAAA,UAAM,QAAA,SAAa,SAAA,CAAA,EAAAngC,EACxCsC,GAAA,CACH,KAEHzD,WAGJA,QAAW,CAAA,CAAAgY,EAAC3W,QAAU,IAAA,CAAQ2W,EAC9B7W,EAAS,OAAA,OAAA,EAEPyH,EAAWoP,IAAAA,QAAAA,GAAAA,EAETiR,EAAWD,CAAA,CACTA,EAA2B,SACtB,CAAAhpB,EAAAI,EAAA,CACQgD,KAAAA,cAAgB,CAC/B,EAAA,IAAApD,EAAA,OAAA,CACAipB,MAAAA,YACF,SAAA,YAAA,CAAE9oB,CAAAA,CAEG,CAAA,EAACE,EAAKqD,GAAA,CAAA,CAAA,EAAA1D,EAAAuhC,GAAA,CAAc,UACzBvhC,aAAA,SAAYkhC,EAAA,SAAY,CAAA,CAAiB,IAAA3+B,CAAA,IAE1CmB,EAAAA,QACwB,SAAAhE,GAAA,SAAuBwhC,EAAAA,eAAAA,QAC7C/gC,GAACia,GAAAvb,EAAAa,EAAA,OAAA,CAAA,EAAA,QAAA,YAAAb,EAAA,OAAA,YAAAub,EAAA,KAAAvb,GAAE0D,GAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,YAAAA,IAAAA,EAAAA,YAAAA,CAAAA,IACFpB,EAAA,KAAAqgC,CAAA,IACmB,KAAA,EACbv4B,SAAe,KAAAlM,EAAA,IAAAA,CAAA,MAAAsjC,EAAA,KAAA,GAAA,CAAA,GAAA,MAAAA,EAAA,KAAA,GAAA,CAAA,GAAAC,CAAA,GAIfkB,EAKAnB,SAAAA,CAAAA,IAAwB,CACxBA,KAAAA,SAMAr4B,CAAAA,EAAAA,EAAAA,SAGF,IAAAzF,EACF,KAAA,OAAEpC,YAEFH,EAAK,OAAAigC,EAAA,QAAA,cAAC5/B,SAAK,GACXL,YAAA,MACEuC,eAAAA,MACAtC,WAAK,GACLme,QACE8iB,mBAEF1f,SAAQ0f,CAAA,CAAA,CACRvf,CAAY,CAAA,CACG,CAAA,EAAA3hB,EACHyhC,GAAA,CAAA,aAEJ,GAAA,SACEP,EAAAA,IAAAA,CAAAA,EAAAA,IAAAA,EAAAA,GAAAA,CAAW,SACrBb,EAAA,SAAA,EACE,QAAA3gC,GAAA,CAGVM,EAAU,OAAAyC,EAAA,CAAA,EAAa49B,EAAA,KAAA,WACX/+B,KAAAA,EAAQmB,KACP,MAAA49B,EAAA,KAAA,GAAA,CAAA,GAAAC,CAAA,GAAA,MAAAD,EAAA,KAAA,GAAA,CAAA,GAAAC,CAAA,EAEP38B,EACAzD,SAAgB,CAAAF,EAAAI,EAAA,CACLwD,KAAAA,IACTy8B,IAAAA,iBAMAr4B,MAAAA,aAE0C,CAC5C,EAAA7G,EAAA,OAAA,CAAEhB,SAEFH,CAAAA,EAAK,OAAA,CAAM,MAAA,qBAAQ,SAAA,GAAuB,CAAA,EAAAytB,CAAA,CAAA,CAAe,CACzDtsB,CAAAhB,EAAAA,CAAAA,CAAAA,CACE,CAAA,EAAAH,EAAY0D,GAAA,CAAA,CAAA,EAAAvC,EAAAsC,GAAA,CAAA,SAAqB,CAAAsN,EAAC,QAChC,IAAA,CAAA,GACG9T,EAAA,UAAA,QAAAygB,GAAA,CACC,MACX,OAAAA,EAAA,6CAAA,EAEFha,eAGgB,CACTzG,KAAAA,UAEC,QAAAojC,YAEH,SAAAtjC,EACF,MAAAib,EAAA,KAAA,MACA,EACQ/a,EAAA,UAAA,KAAAgf,GAAAA,EAAA,OAAA+D,EAAA,MAAA/D,EAAA,QAAA,MAAA,QAAA,EAAA,KAAA,EAAA,KAAA,GAAA,IAAA+D,EAAA,QAAA,MAAA,QAAA,EAAA,KAAA,EAAA,KAAA,GAAA,IAAA/D,EAAA,SAAAA,EAAA,WAAA+D,EAAA,SAAA,MAAA/D,EAAA,MAAA,CAAA,CAAAA,EAAA,OAAA,CAAA,CAAA+D,EAAA,MAAA,GAAA,EAENjjB,MAAAA,8BAAAA,GAEFE,EAAA,UAAA,KAAA+iB,CAAA,EAEM0hB,GAAAA,wBAA0BC,EAe9Bp4B,EAAoC,SAC/B,CAAAvJ,EAAAI,EAAA,CACE8e,KAAAA,UACPnM,CAAAA,EAAAA,IAAAA,EAAW,OAAuB,CACpC,SAAA,iBAAA,CACF,CAAA,CAAA,CAAE5S,EAAAA,EAAAA,GAEG,CAAA,QAAM,IAAA,CAAY,IAAEH,EAAA,OAAA,6CAAA,EAAAG,GAAM,CAAA,KAAA,KAAAyhC,CAAA,EAAA,CAAsBA,GAEvDzgC,MAAS,kBAAA,QAEDygC,CAGAA,IACEA,EAAAA,EAAAA,YAAAA,EAAAA,KAAAA,EAAar4B,SAAwB,KAAA,IAAAq4B,CAAA,MAAAvB,EAAA,KAAA,GAAA,CAAA,GAAAC,CAAA,GAE3C,EACA,SAAiB,CAAAtgC,EAAAI,EAAA,CACDwhC,KAAAA,KAEd55B,CAASugB,EAAAA,IAAAA,EAAAA,QAGX,SAAA,yBAAA,CACF,CAAA,CAAEpoB,CAAAA,EAAAA,IAEGpD,GAAAoE,EAAAsC,GAAA,CAAA,QAAM,IAAA,CAAO,SAAEzD,KAAA,IAAAiL,CAAA,MAAAo1B,EAAA,KAAA,GAAA,CAAA,GAAAC,CAAA,EAAA,EAA6B,SAAO,CAAAtgC,EAAAI,EAAA,CAEzD6K,KAAoBlO,KACV,OACEmD,EAAM,QAAA,CACJqoB,MAAAA,oBAGX,SAAA,CAAA,sBAAAvoB,EAAA,IAAA,CAAEG,SAEFH,CAAW,CAAA,EAAA,GAAA,CAAA,CAAO,CAAA,CAClB,CAAA,CAAA,CAAa,CAAA,CACQ,EAAAjD,EAAIkO,CAAAA,CAAAA,CCnXvC,MAAMvB,GAAQ,GAEd,SAASm4B,GAAKha,EAAO,OACbpnB,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAEH,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAC1BZ,GAAKoqB,GAAAA,YAAAA,EAAOpqB,OAAMu+B,EAAAA,GAAAA,IAAAA,YAAAA,EAAav+B,IAE/BmiC,EAAa/jC,IAGbimC,EAAejmC,IACrB,eAAekmC,EAAU30B,EAAW,EAC9BA,GAAa,CAAC00B,EAAa/lC,WAChBA,EAAAA,QAAUe,EAAMM,GAAGujC,UAAUrjC,KAAK0F,QAAQvF,CAAE,EAAEH,KAAK,CAC9DC,MAAOmM,EAAAA,CACR,GAEH,MAAM4D,EAAU,MAAMw0B,EAAa/lC,QAAQ4B,KAAK,EAC5C,GAAA,CAAED,MAAAA,CAAU4P,EAAAA,EAChB,OAAI5P,GAAAA,MAAAA,EAAOE,SACLwP,IACSrR,EAAAA,QAAU2B,EAAM,CAAC,EAAED,IAIhCC,EAAMoP,QAAkB4f,GAAA,CACtB8B,GAAW9B,EAAM3vB,CAAQ,CAAA,CAC1B,GAEI,CACL,GAAGuQ,EACH5P,MAAAA,CAAAA,CAEJ,CAEA,eAAeoB,GAAkB,CAC3B,GAAA,CACIwO,MAAAA,EAAU,MAAMxQ,EAAMM,GAAGujC,UAAUrjC,KAAK0F,QAAQvF,CAAE,EAAEH,KAAK,CAC7DC,MAAO,EACPwjC,SAAUnB,EAAW7jC,OAAAA,CACtB,EACG,GAAA,CAAE2B,MAAAA,CAAU4P,EAAAA,EAEhB,OADQ4f,EAAAA,GAAcxvB,EAAO,MAAM,EAC/BA,GAAAA,GAAAA,MAAAA,EAAOE,aAID,CACH,MAAA,EACT,CACF,CAEA,KAAM,CAACN,EAAM0kC,CAAO,EAAIplC,EAAS,CAAE4G,MAAO,MAAA,CAAQ,EAEzClG,GAAAA,EAAKkG,MAAQ,QAAO,EAC7B1H,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CACIwB,MAAAA,EAAO,MAAMR,EAAMM,GAAGiX,MAAMrR,QAAQvF,CAAE,EAAEO,QAC9CgkC,EAAQ1kC,CAAI,CAAA,MAEF,CAAA,CACVlB,IAAe,EACjB,CAAAqB,CAAA,CAAA,EAAA,KACC,CAAAqX,EAAAC,CAAA,EAAAnY,EAAA,EAAA,EACC,CAACqlC,EAAAC,CAAA,EAAAtlC,EAAA,EAAA,EAEP,OAAOkY,EAAAA,EAAAA,CACP,SAAOmtB,CAAAA,EAAAA,GAAAA,CAEP,QACE,MAAA9hC,GAAAA,OAGIqD,UAAYA,eACZ/F,UAAG,wBACH44B,SAAAA,EACAC,WAAUyL,EACVhlC,gBAAAA,EACA05B,UAAYsL,GACZjjC,eAAAA,EAAAA,SAAAA,eACAy3B,cAAS,OACTC,mBAEAtD,YAAclzB,EAAAkE,EAAA,CACC,GAAA,KAEfyyB,MAAAA,eACQxyB,SAAGnE,EAAAI,EAAA,CAAW,KAAA,OAAcD,KAAAA,GAC3B,CAAA,CAAM,CAAA,EAAY,UAAKgB,EAAAkC,GAAA,CACxB,OAAA,GAERuzB,gBACQ,GACJnB,SAAM,OACN0L,WAAe,QACfnV,SAAS,SACTC,WAAWjsB,EAAA,SAAA,CACF,KAAA,SACTuD,MAAAA,QACUtD,SAAKD,EAAAI,EAAA,CAAe,KAAA,OAAOD,KAAAA,GAC5B,CAAA,CAAM,CAAA,EAAY,SAAK,CAAAgB,EAAAsC,GAAA,CACtB,QAAA,IAAAsR,EAAA,CACT5U,KAAAA,CAEQ,CACPD,EAEI5C,SAAAA,CAAAA,EAAAA,EAAAA,CACD,KAAA,SACF6C,KAAAA,GAEI,CAAA,EAAMH,EAAA,OAAA,CAASM,SAAK,MAAA,CAAK,CAC9BN,CAAA,CAAA,EAAAG,EAAMsD,GAAA,CAAI,QAAO,IAAAy+B,EAAA,EAAA,EAEnB/gC,SAAS,CAAAnB,EAAAI,EAAA,CAACF,KAAAA,QAA+CC,KAAAA,GAClD,CAAA,EAAMH,EAAA,OAAA,CAAQM,SAAK,gBAAA,CAAK,CAC7BN,CAAA,CAAA,CAAA,CAAM,CAAA,CAAqB,EAAAvC,CACnB,EAACqX,GAAA9U,EAAAc,GAAA,CAAA,MACN,QA9CJrD,QAiDNqX,GAAAA,CAESpV,EAAA,SAAAA,EAAA,iBACU,EAAA,CAEZqV,EACF,SAAA/U,EAAAoI,GAAA,CACF,KAAA0M,GAAA,YAAAA,EAAA,KAAE3U,WAEU,CACJ2U,EAAsBxX,QAAAA,WAAAA,EAAAA,OACP8X,EAAA,IAAA,EACR+f,EAAAA,QAAuB/f,YAChC4sB,cAAmB,MAInBh6B,EAAgB,EAAA,CAClB,CACA+M,CAAAA,CAA6B,CAC/B,EAAAktB,GAAAjiC,EAAAc,GAAA,CAAE,MACH,QACI,QAGPd,GAAAA,CACQN,EAAA,SAAAA,EAAA,iBACU,EAAA,CAEZwiC,EACF,SAAAliC,EAAAmiC,GAAA,CACF,OAAA1kC,EAAE0C,YAEgB+hC,EAAA,EAAA,CAAA,CAAA,CACRzkC,CACRkD,CAAAA,CAA8C,CAAA,CAC/C,CAEJ,MACDyhC,GAAA,GAEN,SAAAD,GAAA,CAEA,OAAAE,EACA,QAAA1hC,CAA2B,EAAE0hC,CAAQ1hC,KAAAA,CAAW,MAAA7D,EAIxC,SAAAC,CAAED,EAAAA,EAAAA,EAAOC,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAiB,CAAAsL,EAAAC,CAAA,EAAA1L,EAAA,SAAA,EAC1B,CAAC0lC,EAASC,CAAc3lC,EAAAA,EAAW,EAAA,EACnC4lC,EAAoB3mC,IAC1B,eAAOqd,EAAqB9L,GAE5B+L,MAEA7Q,EAAA,YACE6Q,SAAiB,CACjB7Q,GAAAA,EACa8E,GAAA,CAAAo1B,EAAA,WACPA,EAAA,QAAA1lC,EAAA,GAAA,MAAA,QAAAulC,CAAA,EAAA,SAAA,KAAA,CACEj1B,MAAAA,EACFo1B,CAAgBzmC,GAGLqmC,MACR90B,EAAA,MAAAk1B,EAAA,QAAA,KAAA,EACL,GAAA,CACA,KAAA9oB,EACI,MAAAhc,CAAEgc,EAAAA,EAAMhc,GAAAA,MAAAA,EAAAA,QACRA,EADkB4P,EACH5P,EAEJA,EAAK,OAAAA,CAAA,CAFD,EAIJ4kC,EAAAA,CAAAA,CAAAA,GAEbnpB,EAAY,EAAK,EAEjBA,EAAAA,SAAiB,CACnB,MAAA,CACA7Q,EAAW,OAAS,EAEpBA,IACF,CAAAxM,OAAAA,EACC,IAAA,CACL2mC,EAAA,EAAA,CAEA3mC,EAAAA,CAAAA,CAAAA,EACE2mC,EAAAA,MAAiB,CACnB,MAAK,QAEL,GAAA,gCACO1hC,SAAM,CAAA,CAAA,CAAAJ,GAAAX,EAAA,SAAA,CAAW,KAAA,6BAEVC,QAAKU,EAASI,SAAMf,EAAAI,EAAA,CAAuBO,KAAAA,GAAAA,CAAQR,CACpD,CAAA,EAACE,EAAK,SAAA,CAAG,SAAEL,EAAA,KAAA,CAGpBA,SAAA,gBAAA,CAAAG,CACE,CAAA,EAAAA,EAAI,OAAA,CAAc,SAAIgB,EAAA,KAAA,CAExBnB,SAAA,CAAAsiC,EAAA,IAAAI,GAAAvhC,EAAA,KAAA,CAAAhB,YACEoO,GAAA,SACG+zB,EACCniC,SAAAA,CACe,CAAA,EAAUuiC,EAAAA,GAAAA,CAAQ3lC,QAAAA,EAC/BiD,OAAAA,CAAgB,CAAA,CAACwC,CAASkgC,EAAQL,EAAAA,EAAAA,CAAAA,EAAAA,GAAAA,IAAAA,WAAAA,EAAAA,GAAAA,CAAe,GAAG,KAAA,SAEvDzI,GACYvxB,GAAAA,EACXrI,EAAQ2iC,SAAG3iC,EAAA,SAAA,CAAK8f,KAAAA,SAA+C3f,MAAAA,cACrDF,QAAKwiC,EAAS1hC,SAAM,YAAA,CAAA,CAAuB0hC,CAAAA,CAAAA,CAAc,CAAA,CAEzD,CAAA,CAAA,CAEX,CAAA,CACC,CACC,SACJG,GAAA,CAET,QAAApgC,EAEA,OAAA6/B,CAAyB,EAAE7/B,CAAS6/B,KAAAA,CAAU,MAAAvlC,CACtC,EAAAuB,EAAA,EAAEvB,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAc,CAAA+lC,EAAAC,CAAA,EAAAlmC,EAAA,EAAA,EACtB,OAAOyL,EAAAA,GAAmB,CAC1B,QAAOw6B,CAAAA,EAEP,aACc1hC,EAAA,OAAA,UACA0hC,CAAAA,WAAAA,EAAAA,SAAAA,aAAAA,CAAAA,CACV9+B,EAAc,YAA2C,kBAAM,SAC/DT,QAAM,IAAA,CACYu/B,KACH,SAAA,GACb,SAAa,CACXv6B,GAAAA,CACa,MAAAxL,EAAA,GAAA,MAAA,QAAAulC,CAAA,EAAA,SAAA,OAAA,CACP,WAAA,CAAA7/B,EAAA,EAAA,CACF,CAAA,EACE2S,EAAAA,SAAa3S,EACfsgC,EAAC,EAAA,CACDx6B,MAAAA,CACAw6B,EAAW,OAAK,EAEhBx6B,OAEJA,EAAG,SAAA,GACE,SAAA,CAGLA,GAAAA,CAEa,MAAAxL,EAAA,GAAA,MAAA,QAAAulC,CAAA,EAAA,SAAA,OAAA,CACP,WAAA,CAAA7/B,EAAA,EAAA,CACF,CAAA,EACE2S,EAAAA,SAAa3S,EACfsgC,EAAC,EAAA,CACDx6B,MAAAA,CACAw6B,EAAW,OAAI,EAEfx6B,KACF,EAEJ,SAAAtI,EAAA,SAAA,CACF,KAAA,SAAEG,MAAAA,SAEF0iC,EAAA,GAAA,QAAA,GACE5iC,SAAKoI,IAAA,UACLtH,SAAQ8hC,EAAkB,MAAA,SAAc,CAAA,CAClB,CAAU1iC,CAEb,CChT3B,MAAMuJ,GAAQ,GACRq5B,GAAoB,IAAIC,gBAE9B,SAASC,GAAS,CAAE7C,WAAAA,EAAY,GAAGvY,CAAM,EAAG,CACpC,KAAA,CAAE/qB,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAC1B,CAAC2qB,CAAY,EAAIoX,EAAa,CAAC2C,EAAiB,EAAI7Z,KACpD,CAACga,EAAWC,CAAY,EAAIvmC,EAAS,IAAI,EACzCqD,GAAO4nB,GAAAA,YAAAA,EAAO5nB,OAAQ+oB,EAAalnB,IAAI,MAAM,GAAKohC,EACxDtF,GAAU,WAAU39B,IAAS,UAAY,aAAe,EAAG,GAAG,WAAW,EAEzE,MAAMmjC,EAAmBvnC,IACnB+jC,EAAa/jC,IAEnB,eAAewnC,EAAcj2B,EAAW,EAClCA,GAAa,CAACg2B,EAAiBrnC,WACjCqnC,EAAiBrnC,QAAUe,EAAMM,GAAGC,cAAcC,KAAK,CACrDC,MAAOmM,GACP45B,MAAO,CAAC,SAAS,CAAA,CAClB,GAEH,MAAMh2B,EAAU,MAAM81B,EAAiBrnC,QAAQ4B,KAAK,EAChD,GAAA,CAAED,MAAAA,CAAU4P,EAAAA,EAChB,OAAI5P,GAAAA,MAAAA,EAAOE,SACLwP,IACSrR,EAAAA,QAAU2B,EAAM,CAAC,EAAED,IAEhCC,EAAA,QAAA,CAAA,CAEAA,QAAe,IAAUgvB,CAAW8B,GAAA9B,EAAA3vB,CAAA,CAClCyxB,CAAAA,GAEJ,CACO,GAAAlhB,EACL,MAAGA,GAAAA,YAAAA,EAAAA,IAAAA,GAAAA,EAAAA,OAAAA,CAEL,CACF,MAAAi2B,EAAA1nC,IAEM0nC,EAA+B1nC,IACrC,iBAAsCuR,EAAA,EACtCA,MAA6C,WACvCA,EAAcm2B,QAAAA,EAAsBxnC,GAAS,cAAA,KAAA,CAC/CwnC,MAAAA,EAA4D,CAAA,GAG9D,MAAAj2B,EAAA,MAAAi2B,EAAA,QAAA,KAAA,EACA,GAAA,CACI,MAAA7lC,CAAEA,EAAAA,EAAM,OAAAA,EAAI4P,GAAAA,YAAAA,EAAAA,OAAAA,GAAAA,EAAAA,YAChB5P,GAAAA,MAAAA,EAAekZ,aAEb4sB,EAAe,QAAA9lC,EAAA,CAAA,EAAA,WAAA,IAELiB,EAAAA,QAAI,CAAc6kC,CAC5B,WAAA9W,CAEAhvB,IAAMoP,CAAW22B,GAAY/W,EAAAA,CAAAA,CAAAA,CAAW,GAEvC,CACH,GAAApf,EACQ3O,MAAAA,GAAAA,YAAAA,SAAsB+tB,EAAA,WAC9B,CAAO,CACFpf,SACI5P,KAAYgvB,EAAAA,CACrB,OAAAzsB,IAAA,UACFyjC,EAAA,GAAAC,CAAA,IAG0B,GAAAA,CAAA,CACfD,CACT,eAAA5kC,GAAA,CACOukC,GAAAA,IAAAA,UACT,GAAA,CAEA,MAAA/1B,EAAiC,MAAAxQ,EAAA,GAAA,cAAA,KAAA,OAClB,EACP,SAAA0mC,EAAA,OACF,CAAA,EAAA,KAAgB,EACR,GACG,CACPzC,MAAAA,CACD,EACKzzB,EACJ,OAAA5P,GAAA,MAAAA,EAAA,QAAEA,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,WAAAA,GAAU4P,MAOdk2B,MAAAA,CACO,MAAA,EACT,KAEF,KACS,MAAAl2B,EAAA,MAAAxQ,EAAA,GAAA,cAAA,KAAA,CACT,MAAA,EACK,MAAA,CAAA,SAAA,EACD,SAAA8iC,EAAA,OACF,CAAA,EAAA,KAAgB,EACR,GACG,CACP0D,MAAAA,CAAiB,IAEnB,OACM5lC,GAAA,MAAAA,EAAA,QACJkiC,EAAA,QAAAliC,EAAA,CAAA,EAAA,GAAEA,IACNtB,EACA,OACaL,MAAAA,EACJ,CAEF,CAAA,QACGoP,GAAA,IACHhK,EAAA,MAAA,CACT,MAAA,sBACF,SAAA,CAAAnB,EAAAkE,EAAA,CACF,GAAA,YAEM+5B,MAAAA,EAA8B,GAA9BA,YACJ,QACEv+B,GAAA,CAAW0gC,IAAqBjgC,EAAAA,eACzB,EACAgjC,EAAA,IAAA,IAGD,SAAgB,KACdzjC,CAAAA,EAAAA,EAAiBwE,EAAA,CACjBi/B,GAAAA,yBACF,MAAAljC,IAAA,UAAA,YAAA,GACF,QAAAP,GAAA,CACD0gC,IAGDpgC,EAAAA,eAAK,EACAmjC,EAAA,SAAA,IAGD,SAAgB,SACdzjC,CAAAA,CAAAA,CACAyjC,CAAAA,EACF,CAAAljC,CAAA,CAAA,EACF,OAAAD,EAAAm2B,GAAA,CAAA,MACD,WAAA,GAEM,WAAA,UACJ,0BAET,UAAS,2BAET,SAAAp5B,EAEIyG,WAAAA,EACA/F,gBAAAA,EACA44B,UAAU,GACVC,cAAU2H,EACVlhC,QAAAA,CAAAA,CACA05B,CAAAA,CCpKN,MAAMmN,GAAuB,CAC3Bze,QAAS,CAAC,UAAW,QAAQ,EAC7B1a,OAAQ,CAAC,UAAW,QAAQ,EAC5B4P,OAAQ,CAAC,UAAW,QAAQ,EAC5B+K,OAAQ,CAAC,SAAS,EAClBC,eAAgB,CAAC,SAAS,EAC1B/K,UAAW,CAAC,UAAW,QAAQ,EAC/B7C,KAAM,CAAC,QAAQ,EACf9S,OAAQ,CAAC,QAAQ,CACnB,EACA,SAASk/B,GAAiBxmC,EAAe,CAChCA,OAAAA,EAAcuZ,OAAyBnY,GAAA,CACtC,KAAA,CAAEwB,KAAAA,EAAMxC,GAAAA,EAAIiO,UAAAA,CAAcjN,EAAAA,EAChC,GAAI,CAACwB,EACKuoB,MAAAA,GAGN,MAAOtnB,EAAY0iC,GAAA3jC,CAAA,EACbuoB,OAAAA,GAAAA,MAAAA,EAAAA,OAEVtnB,EAAA,MAAA2V,GAAA,CAAA,CAAApY,EAAAoY,CAAA,CAAA,IAGE,CAAA,CAA8C,CAEhD,SAAOitB,GAAAzmC,EAAA,CACTA,EAACwmC,GAAAxmC,CAAA,EACH,MAAA0mC,EAAA,CAAA,EAEAC,EAA2C,CAAA,EAEzC3mC,QAAAA,EAAAA,EAAgBwmC,QAA8B,OAAA,IAAA,CAK9C,UAA0B,CAAA,GAE1B,GAAApmC,EACQgB,OAAAA,EACA,QAAA+D,EAAE/E,KAAAA,EAAIgN,UAAAA,CAAQjI,EAAAA,EAASvC,EAAAA,EAAAA,IAAAA,KAAAA,CAAAA,EAAAA,mBAAAA,EAAAA,GAAMyL,IAAAA,EAAAA,GAAcjN,IAAAA,aAAAA,IAAAA,YACjDwlC,EAAyB,oBAErBhkC,MAAAA,EAAAA,GAAwBA,GAAAA,YAAAA,EAAAA,EAAAA,IAAAA,CAAmB,IAAAk+B,CAAA,GAC/B+F,EAAAH,EAAAltB,CAAA,EAChB,GAAAotB,IAAA,iBACAD,EAAev5B,KAAcw5B,UACvBC,GAAAA,MAAAA,WACN,QAAsCA,EAAA,UAAA,KAAA50B,GAAAA,EAAA,KAAA9M,EAAA,EAAA,EACpCwhC,GACFG,eAAwC,EAChCA,EAAAA,wBAGND,EAAmB,IAAA,IAAAzmC,CAAA,KAEHuc,EAAAA,OAAAA,CAAAA,CAAY,EACPvc,EAAAA,UAAUA,KAAG+E,CAAA,EAC3B0hC,EAAA,IAAA,IAAAzmC,CAAA,GAELymC,KAAmBle,CACAvoB,EAAAA,OAAAA,CAAAA,CAAAA,EACrB,IAAA2mC,EAAAL,EAAAltB,CAAA,EAAA,CACK,GAAApY,EACGub,KAAAA,EACJoqB,UAAsBvtB,CAAAA,CAAAA,CAAO,EAC5BpY,EACGwlC,GAAAA,EAAAA,CACNje,CACF,CACAge,MAAAA,EAAsB,CAAA,EACxBK,EAAA,CAAA,EACF,QAAA,EAAA,EAAAtqB,EAAA,EAAA,EAAAiqB,EAAA,OAAA,IAAA,CAOA,UAA2B,CAAA,GAE3B,GAAAvmC,EACQgB,QAAAA,EACA,UAAAunB,EAAEvoB,KAAAA,EAAI+E,UAAAA,CAASwjB,EAAAA,EAAW/lB,EAAAA,EAAAA,IAAAA,KAAAA,CAAAA,EAAAA,mBAAAA,EAAAA,GAAMyL,GAAAA,IAAAA,oBAAAA,GAAAA,EAAAA,SAAAA,EAAAA,CAAcjN,MAAAA,EAAAA,GAAAA,GAAAA,YAAAA,EAAAA,EAAAA,IAAAA,CAAAA,IAAAA,CAAAA,KACvBa,KAC7B,GAAa4kC,EACXA,EAAe1hC,UAAevC,OAAa,MAAA,EACrCikC,EAAAA,IAAqBI,YACH,CACHre,IAAAA,EAAAA,EAAAA,CAAU1hB,EAAK9F,CACfhB,GAAAA,EACd,KAAAwC,EACDmkC,UAAuBvtB,CAAAA,EAAAA,MAAO,CAAA,EAEhC5W,EAAAA,GAAAA,EAAAA,CACAgmB,CAA+B,MAEjCoe,EAAAA,KAA2BD,CAC7B,CAEAC,OAAAA,CAA2B5lC,CCvEjC,MAAMiL,GAAQ,GACRq5B,GAAoB,IAAIC,gBAE9B,SAASuB,GAAc,CAAEnE,WAAAA,CAAW,EAAG,CACrCxC,GAAS,gBAAiB,gBAAgB,EACpC,KAAA,CAAE9gC,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAC1BoC,EAAaC,GAAYzD,CAAM,EAC/B,CAACoL,EAASC,CAAU,EAAI1L,EAAS,SAAS,EAC1C,CAACosB,CAAY,EAAIoX,EAAa,CAAC2C,EAAiB,EAAI7Z,KACpDsb,EAAiBxb,EAAalnB,IAAI,IAAI,EACtC2iC,EAA0Bzb,EAAalnB,IAAI,cAAc,EACzD,CAACoX,EAAUC,CAAW,EAAIvc,EAAS,EAAK,EACxC,CAAC8nC,EAAcC,CAAe,EAAI/nC,EAAS,EAAK,EAChDsyB,EAAgBrzB,IAChB,CAAEu0B,aAAAA,EAAcR,gBAAAA,EAAiBE,WAAAA,EAAYI,eAAAA,GACjDjB,GAAU,CACRC,cAAAA,CAAAA,CACD,EACG6J,EAAWnJ,IAAoB,OAAS,CAACM,EACzC,CAACnL,EAAgB6f,CAAiB,EAAIhoC,EAAS,CAAE,CAAA,EACjD,CAACioC,EAAeC,CAAgB,EAAIloC,EAAS,CAAE,CAAA,EAErDR,EAAoCP,IAEpC,iBAAqCuR,EAAA,EACrCA,MAA6C,WACvCA,EAAcjQ,QAAAA,EAAsBpB,GAAS,cAAA,KAAA,CAE/CoB,MAAAA,GACEI,aAAOmM,CAAAA,gBAAAA,CAAAA,CACPq7B,GAEJ,MAAAC,EAAA,MAAA7nC,EAAA,QAAA,KAAA,EACM6nC,GAAmBA,EAA4BjpC,MACrD,GAAAsB,IAAA,MAAAA,UAAuCK,CAEvCL,WAA2BoB,IAAA,CACzBpB,GAAAA,GAAwC,OAAAN,EAAA,CAC3B0B,cAAAA,EAA+B,CAAA,CACzB,CAAA,EAEnB,MAACwmC,GAAAnB,GAAAzmC,EAAA,EAEK4nC,GAENhoC,EAAe,kBAAAI,GAAA,CAAA,EACNH,EAAAA,cAAAA,GACPD,EAAAA,GAAuBgoC,QAAAA,OAAAA,CAGjB7nC,cACHoH,CACgB,WAAAnH,GAAA,CAAA,EAAA,EACbS,CAA6BL,CAC/B,EAAA,MAAA,IAAA,CAAA,CACD,GAEER,EAAA,cAAA,KAAA,GAAAgoC,EAAA,CAEP,CACF,OAAAhoC,EAAA,qBAAA,GAEAA,EAAOY,2BAAuB,KAAA,MACvBqnC,CACAF,CACT,eAAAG,GAAA,CAEA,GAAA,CAEM,OAAA,MAAAroC,EAAA,GAAA,eAAA,KAAA,CACF,MAAaA,EAA6B,CAAA,CACjC,MACR,OACM4C,EAEP,CACF,CACF,MAAA0lC,EAAA,IAAA,CAEA98B,cACEA,SAAoB,CACP,GAAA,CACP,MAAA+8B,EAAA,MAAAF,IACIE,GAAqC,EAC3CT,EAAAA,SAA0B,CAC1Bt8B,MAAAA,GACU,OAAA,CACVA,CAAkB,IACpB,EAEJ,eAAAg9B,GAAA,CAEA,GAAA,CACM,OAAA,MAAAxoC,EAAA,GAAA,cAAA,KAAA,CACF,MAAaA,OACN4C,EAEP,CACF,CACF,MAAA6lC,EAAAn4B,GAAA,CAEAgqB,MACEA,EAAW,SAAK,GAChB9uB,SAAoB,CACP,GAAA,CACP,MAAAk9B,EAAAC,EAAAr4B,CAAA,EACIo4B,IAENF,EAAe,EAAA,KAAAI,IAAA,CACMA,GAAA,KACVb,CAAAA,GAAAA,KAAkB,CACT7vB,MAAAA,GAAAA,IAAK,KAAU1F,GAAA,WAAAA,GAAA,SAAA,EAG3B,OADc,IAAIhQ,KAAKgQ,GAAE0H,WAAa1H,GAAE5D,SAAS,EAC/BpM,EAClB,CAAA,EACFwlC,EAACY,EAAA,CACDZ,CAAAA,EAAAA,MAAAA,IAAAA,CAA8B,CAC/B,EACaK,EAAC,EAAA,KAAAE,IAAA,CAEGT,EAAAS,EACE,CAClBT,CAAAA,EAAAA,MAAAA,IAAAA,CAA0B,CAC3B,GAEL,KAAA,CAEM,KAAAlrB,EAAEA,EAAAA,MAAAA,EAAKP,EAAUqsB,CAAAA,EAAAA,EACvBrsB,EAAAA,SAAiB,CAEjB7Q,MAAAA,GACU,OAAA,CACVA,CAAkB,IACpB,EAEJxM,EAAA,IAAA,CAEAA,EAAgB,EAAA,CACdypC,EAAAA,CAAAA,CAAAA,EACFzpC,EAAK,IAAA,CACLA,GACEypC,EAAgB,EAAA,CACQ,EACxB,CAAAzV,CAAA,CAAA,EACF,KAAIA,CAAAA,EAAWsH,CAAA,EAAAx6B,EAAA,EAAA,EAQT+oC,EAAoBjN,KAEpBiN,iBAAAA,IACH,EAAqB,KAAA,OAAiBt9B,IAAA,WAGrC5H,EAAA,SAAA,eAAA5B,EAAAqwB,EAAA,UAAA,YAAArwB,EAAA,WAAA,KAAAo6B,GAAA,OAAA,WAAA,CAAAE,GAAA,GACA/8B,EAA8B,EAAA,CACKwpC,EACjCnV,CAAAA,EAAWvB,qBAAuBuB,EAAAA,SAAAA,YAAAA,CAAAA,CAAAA,IACP50B,IAC3Bo9B,GAAAA,GAAAA,CACF,IAAC4M,EACD,GACEplC,EAAWua,CAKXuqB,MAAAA,GAAAA,KAAsB,IAAA,EAAA9L,EAAA,QACxB,CAAAA,EAAA,SAAAH,GAAA,IAAA,EAEUz7B,EAAAA,kBAIgB,EAC9BpC,CAAAA,EAEMiB,EAAS,QAAA,KAAA,MAEXmpC,EAAKpM,GAA0BH,EAAAA,uBAAqBwM,IAAA,CAEtCA,IACV7M,IAEG7B,EAAA0O,EAAA,CACLrM,CAAe19B,CACjB,CACQgqC,MAAAA,IAAAA,CACNF,GAAA,MAAAA,GACEF,CAAY,CACd,EACAvO,MAAAA,EAAY,IAAA,KACb4O,GAAA,IAAA,KAAAC,EAAA,GAAA,GAAA,GAAA,GAAA,EACH,IAAAC,GAAA,IAAA,KACA,MAAAC,GAAa,CAAA1lC,EAAA,cAAA,KAAAhC,GAAA,IAAA,KAAAA,EAAA,SAAA,EAAA,aAAA,IAAAwnC,EAAA,aAAA,CAAA,EACHG,EAAAvqC,IACVC,OAAAA,EAAA,IAAA,CACD0oC,IAEKyB,EAAAA,mBACAD,KACFE,kBAAsB,CAC1B,EAQApqC,EAAAA,CAAAA,EAAgB2oC,CAAA,CAAA,EACMzkC,EAAA,MAAA,CAClB/C,GAAAA,qBAA2B,MACrBunC,iBACJxc,IAAAA,EACF,SAAA,KACF,SAAA7mB,EAAA,MAAA,CACEqjC,MAAgBC,sBAAAA,EAAwB,gBAAA,EAAA,GAoB5C,SACE,CAAAtjC,EAAA,SAAA,CACK,OAAA43B,EACG,QAAAr5B,GAAA,OACDwvB,EAAAA,OAAAA,QAAAA,WAAAA,IACIrwB,EAAAqwB,EAAA,UAAA,MAAArwB,EAAA,SAAA,CAETsC,MAAa,SAAA,QAAyD,IAIhE,MAAKzB,IAASq4B,oBAAsB,GAClC7I,SAAAA,CAAAA,EAAAA,OAAgC,MAAO,cAAA,SAAa,CAAA/tB,EAAA,MAAA,CAAS,MAAC,cAChE,SAAA,CAAAnB,EAAA8zB,GAAA,CAAA,CAAA,EAAA9zB,EAAAkE,EAAA,CACF,GAAA,IACAnD,MAAmB,eAA2BZ,SAE9CgB,EAAAf,EAAA,CAAW,KAAA,OAAaD,KACtBgB,IAAW,IAAA,MAAA,CAAahB,CAEjB,CAAA,CAACgE,CAAG,CAAA,EAAIpD,EAAM,KAAA,CAAcZ,SAAAA,eAC1B,CAAA,EAAAH,EAAM,MAAA,CAAA,MAAY,aAAA,CAAA,CAAA,CAAQ,CAAA,EAAAm3B,GAAQ9uB,IAAA,WAAAlH,EAAA,SAAA,CAAA,MAClC,4BAAA,KAETnB,SAAA,QAAI,IAAA,OACJA,EAAA,EAAA,GAAKe,EAAAA,EAAM,UAANA,MAAAA,EAAM,SAAA,CAEL,IAAA,EAEPo2B,SAAuB,QACtB,EAEO,EACLj3B,SAAe,CAAAF,EAAAI,EAAA,CACbmlC,KAAAA,UACArW,CAAAA,EAAAA,qBAAgC,CAAA,CAAA,CACzB,CAAA,EAAA2V,EACK,OAAA,GAAA7kC,EAAA,MAAA,CAAA,MACX,mBACH,SAAAA,EAAA,MAAA,CAAEG,MAAAA,yBAEG,SAAMgB,EAAA,UAAA,OACb,gBACD,SAAA,CAAAA,EAAA,UAAA,CAEF0jC,SAAcjnC,CAASuD,EAAA,QACX,SAAA,CAAAnB,EAAAI,EAAA,CACTJ,KAAA,WAAW,MAAA,oBAAwBG,QACjC,CAAe,EAAA,IAAAgB,EAAA,IAAA,CAAehB,SAC5BgB,CAAA,eAAA0jC,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA1kC,EAAAA,IACEgB,EAAAA,QAAA,CAAAhB,MAAAA,gBACQE,SAAKtD,CAAA,CAAA,CAAWgE,CAAM,CAAA,EAAoBT,EAAK,OAAA,GAAAN,EAAA,OAAA,CAAG,MACxDmB,4BAAA,WAAG,IAAA,CAAa0jC,EAAcjnC,IAASoC,WAAY,CAAI,KACvDA,SAAOe,MAAM,eAAeZ,QAAEpD,IAAAA,SAAiB8B,GAAAunC,EAAA,UAAA,MAAAvnC,GAAA,SAAA6f,GAAA,eAAA,CAEhDmmB,SAAcjnC,SACD,MAAA,SAAA,EAGD,EACLmD,SAAM2d,EAAA,CAAA,CAAA,CACNxe,CACEkmC,CAAAA,CAAAA,CAEiB,CAAA,EAAApmC,EAAA,KACL,CAAA,MAAA,sBACH6kC,EAAA,OAAA,EAAA,WAAA,QAAA,GAAA,IAAAuB,EAEX,SAAAvB,EAAA,IAAAwB,GAAArmC,EAAA,KAAA,CAAA,WAESsmC,GAAA,CAEZ,aAAAD,CAAA,CAEJ,CAAA,CAEHrmC,CAAAA,CAAA,CAAA,CACEe,CAEC,CAAA,CACIqlC,CAAAA,CAGHjmC,CAAAA,EAAAA,EAAAA,OACoB,GAAAgB,EAAA,MAAA,CAACklC,MAAAA,kBAAAA,SAA6B,CAAArmC,EAAA,KAAA,CAAA,MAEnD,kBAAA,SACE,iBAAA,CAAA,EACE+kB,EAAA,OAAA,EAAA5jB,EAAA,UAAA,CACN,SAAA,CAAAA,EAAA,UAAA,CAGR4jB,SAAAA,CAAAA,EAAwB,OACvB,kBAAA,CAAA,CAAW,EAAA/kB,EAAA,KAAA,CAAiBG,SAC1BH,EAAA,IAAAwC,GAAArB,EAAA,KAAA,CAAU,SAAA,CAAAnB,EAAAuO,GAAA,CAAkB,QAAA/L,CAAA,CAC3BuiB,EAAAA,EAAAA,IACC5kB,UACEqC,EAAA,GAAUuiB,SAAennB,IAAAA,CACzBoC,CAAA,CACG+kB,CAAAA,CACC,EAAA5kB,EAAAA,EACEH,CAAAA,CAAa,CAACwC,CAAAA,CAAAA,CAAiB,EAAAxC,EAC/BA,KAAqB,CAAA,WACAvC,IAAAA,GAAAA,EAAAA,KAAAA,CAAAA,YACH8Q,GAAA,CAEd,QAAA/L,CAAA,CAAA,EAEFxC,EAAA2kB,GAAA,CAAA,UACAniB,EACL,GACE,SAAA,IAAA,CAGPxC,CAAA,CACG+kB,CAAAA,CACC,EAAA5kB,EAAAA,EACEH,CAAAA,CAAa,CAACwC,CAAAA,CAAAA,CAAiB,EAAAxC,EAC/BA,MAAqB,CAAA,GAAA,kBACAvC,WACTqiB,QAAM,CAEd,SAAA,CAAA9f,EAAA,QAAA,CACA,KACF,WAAA,QARavC,EAYtB,SAAAiC,GAAA,CAGLM,EAAAN,EAAA,OAAA,OAAA,CAAQ,CAAA,CAAiBS,EAAAA,mBACvB,CAAA,CAAAA,CACE,CAAA,EAAAH,EACO,KAAA,CAAA,MACI0kC,kBAAAA,gBAEPC,CAAgBjlC,EAAAA,IAAAA,CAAAA,CAAAA,EAAgB,cAAA,QAAAM,EAAA,IAAA,CAClC,MAAA,yBAAE,SACDqI,IAEL,UAAA,wBAAArI,EAAAoB,EAAA,CAAO,SAAA,GAAA,CAETpB,CAAA,CAAA,EAAUS,EAAA,cAAA,OAAAT,EAAAoB,EAAA,CAAiBjB,SAACM,EAAA,cAAA,OAAA2jC,GAAAA,EAAA,OAAA,gBAAA,EAAA,IAAA3lC,GAAA,CAC3B0nC,GAAkBzB,GAAEjkC,EAAWpD,OAAAA,UACrB,OAAA,KAC4C8C,MAAEomC,EAAA,IAAA,KAAA9nC,EAAA,SAAA,EAAU+nC,GAAAD,EAAA,aAAA,IAAAL,GAAA,aAAA,EAGlEzlC,KACCN,GACc9C,GAKC,MAAAiT,GAAAi2B,EAAA,iBAAAP,GAAA,eAAA,YAAAn1B,GAAAq1B,GAAA,CACT,SAAA,EACA,CAAA,EACA,OACEK,EAAAA,EAAAA,CACF,SAAkB,CAAAC,IAAAxmC,EAAA,KAAA,CACHumC,MAAAA,kBACf,SAAAj2B,EAGA,CAAMA,EAAAA,EAAAA,IAKY,SAAAvT,EACX,aAAA0B,CACP,EAAAA,EACW,EAAA,CAAA,CAAA,EAAAA,EACUuB,EAAAA,CAAA,CAAA,CAAU,CAAA,EAAAmB,EAAmBmP,EAAAA,CAAO,SACrDtQ,CAAAA,IAAa,WAAAA,EAAAoB,EAAA,CACXrE,SAAAA,EAAAA,KAAAA,CACA0B,MAAAA,gBAA2B,SACThB,MAAAA,KAClB,SACM,CAEb,EAAA,IAAA,CAAA,EAAAgF,IAAAtB,EAAA,KAAA,CAGLA,MAAA,iCACe,CAAAnB,EAAA,MAAA,CACXG,0BACY,SAAAH,EAAAI,EAAA,CAAeD,oBACD,KAAA,IAAA,CAAKmB,CACzB,CAAU,EAAAtB,EAAA,MAAA,CAAuBG,MAAAA,uBAC1BY,SAAMf,EAAA,IAAA,CAAmBG,2BACvB,CAAA,CAAM,CAAA,CAAA,CAAoB,CAAA,CAAA,CAAM,CAAC,CAExC,CAAA,EAAAkI,IAAW,SAAAlH,EAAA,IAAA,CAAsBhB,MAAAA,WAC/B,SAAG,CAAA,+BAAAH,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,SAAA,CAAA,KAAmB,SAAA,QAClB,IAAAulC,EAAA,EAAA,EAAA,SAET,WAAA,CACC,CAAA,CAAA,CACJ,CAAA,CAGF,CAAA,EAAGxkC,GAAMf,EAAAwa,GAAA,CAAA,SAAUof,GAEjB55B,CAEa45B,GAAS15B,GAAwC,EAErD,SAEZF,EAAA,SAAA,CAGJkZ,KACClZ,6BAEI,SAAYqI,IAAA,UACQ,QAAA,IAAAk9B,EAAA,EACpB,MAAA,CACF,eAAA,KAAEplC,EAGAF,SAAKoI,IAAA,UAAArI,EAAAuT,GAAA,CACC,OAAA,EAAA,KACIlL,EAAY,CACtBnI,qBAAiC,CAC1B,CAAA,CAAA,CAAkB,CAAM,CAAA,CAAA,CAAA,CAGtB,CAAA,CAAO,CAEd,SAAAi5B,IAAE,CAAA,MAAA,CAAiB,CAAE,SAAA,cAAA,sCAAA,CAAA,CAEjB,SAEXmN,GAAA,CAAA,aAAAD,CACE,EACF,CAET,KAAA,CAEA,SAAAtpC,CACE,EAAAsB,EAAO,EACT,CAEA,QAAAooC,CAA6BJ,EAAAA,GAAAA,EAAgBK,EAAAD,GAAA,YAAAA,EAAA,QACrC,CAAE1pC,GAAAA,YACF,SAAA4pC,EAAEF,OAAAA,cACR,OAAAG,EACM,YAAAC,EACJppC,UAAAA,EACA2f,KAAAA,EACAupB,SAAAA,EACAG,SAAAA,EACAC,KAAAA,EACAH,OAAAA,EACAC,UAAAA,CACA7vB,EAAAA,EACAgwB,EAAAA,IAAAA,KAAAA,CAAAA,EACA9oB,EAAAA,GAAAA,CAAAA,EACA7T,EAAAA,IAAAA,KAAAA,CAAAA,EACAwS,EAAAA,GAAAA,CAAAA,EACAjR,OAAAA,EAAAA,MAAAA,CACAq7B,MAAAA,qBACEZ,SAAAA,CAAAA,EAAAA,GAAAA,CAEEa,QAAAA,CACN,CAAMC,EAAAA,EAAAA,MAAAA,CACA7vB,MAAAA,uBACA8vB,QAAAA,IAEN,SAAAlpB,EACa,SAAAnhB,CAAA,CAAoBoD,EACfqC,wBAASkkC,CACvB1mC,OAAAgQ,GAAAoN,EAAA,CACQ,OAAAxR,CAAA,EACwBsS,CAAAA,CAAUnhB,EAAAA,EAAAA,IAAAA,CAAS,MAAC,gBAClD0b,SAAyB,CAAAzY,EAAA,OAAA,CACvBkQ,WAAgC,YAAA,EAC9BtE,SAAAA,GAAAA,CAAAA,CAAAA,CAAAA,EACDoL,GAAAowB,IAAAD,GAAAhmC,EAAAC,EAAA,CACH,SAAA,CAAA,IAAA,IAAA,IAAAD,EAAA,OAAA,CAEFA,MAAA,KAAS,SAAA,CAAA,UAAA,IAAAnB,EAAA,OAAA,CAAeG,SACtBmX,EAAA,YAAA,EAAM2P,YAAsC3P,CAAA,CAAA,CAAEnX,CAAAA,CACf,CAE9B6W,CAAAA,CACC,CAAA,CAAA7W,CAGE,CAAA,EAAAH,EAAY,MAAA,CAAA,MAAK,yBAETinB,OAAAA,GAAsC9mB,SAAAA,SACf,CAAA,KACtB,CACF,KAAAiQ,EAEV,MAAAmV,EAEHvlB,GAAAA,EAAW,UAAAqnC,EAA+B,IAAAxkC,CAAA1C,EAAAA,EAEhC,OAAAgB,EAAA,SAAA,CAAEiP,KAAAA,SAAMmV,MAAAA,gBAAAA,EAAAA,UAAAA,EAAAA,GAAO+hB,SAAAA,CAAAA,GAAAA,EAAAA,EAAAA,MAAAA,CAAID,IAAAA,GAAAA,EAAWxkC,IAAAA,EAAQ0kC,MAAAA,KAC5C,WACE,CAAa,EAAAvnC,EAAA,OAAA,CAAiB,SAAAoQ,CAAmC,CAC9DvN,EAAAA,IAAAA,EAAOwkC,OAAAA,CACD74B,MAAY64B,QAAW9mC,SAAK6P,GAAAA,CAAAA,CAAAA,CAAAA,CAAMnB,CAAM,CAAA,CAAY,CAAI,CAE7D,CAAA,CAAA,CAAOmB,CAAAA,CAET,CAAY,MAAOjQ,GAAAA,GAAAA,IC1jB3BuJ,GAAQ,GAEd,SAAS89B,GAAO,CAAE9lC,MAAAA,EAAO0+B,WAAAA,EAAY,GAAGvY,CAAM,EAAG,CACzCpnB,MAAAA,EAAaC,GAAYzD,CAAM,EAC/BwqC,EAAU,CAAC,CAAC/lC,EACZioB,EAASyW,EAAa,CAAC,EAAIpE,GAAU,EACrC,CAAEl/B,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,CAC9BtB,UAAU8qB,GAAAA,YAAAA,EAAO9qB,WAAY4sB,EAAO5sB,QAAAA,CACrC,EACK,CAAED,MAAOkO,EAAcjO,SAAUkO,GAAoB5M,EAAI,EACzDmF,EAAS,GAAEikC,EAAU,QAAU,WAAY,cAAa1qC,CAAS,IAC9DyG,GAAAA,EAAOikC,EAAW,kBAAoB,eAAc,EAE7D,MAAM7H,EAAa/jC,IAEb6rC,EAAiB7rC,IACvB,eAAe8rC,EAAYv6B,EAAW,EAChCA,GAAa,CAACs6B,EAAe3rC,WAC/B2rC,EAAe3rC,QAAUe,EAAMM,GAAGujC,UAAU9iB,OAAOvgB,KAAK,CACtDC,MAAOmM,GACPhI,MAAO+lC,CAAAA,CACR,GAEH,MAAMn6B,EAAU,MAAMo6B,EAAe3rC,QAAQ4B,KAAK,EAC9C,GAAA,CAAED,MAAAA,CAAU4P,EAAAA,EAChB,OAAI5P,GAAAA,MAAAA,EAAOE,SACLwP,IACSrR,EAAAA,QAAU2B,EAAM,CAAC,EAAED,IAIhCC,EAAMoP,QAAkB4f,GAAA,CACtB8B,GAAW9B,EAAM3vB,CAAQ,CAAA,CAC1B,GAEI,CACL,GAAGuQ,EACH5P,MAAAA,CAAAA,CAEJ,CAEA,eAAeoB,GAAkB,CAC3B,GAAA,CACF,MAAMwO,EAAU,MAAMxQ,EAAMM,GAAGujC,UAAU9iB,OACtCvgB,KAAK,CACJC,MAAO,EACPmE,MAAO+lC,EACP1G,SAAUnB,EAAW7jC,OAAAA,CACtB,EACA4B,KAAK,EACJ,GAAA,CAAED,MAAAA,CAAU4P,EAAAA,EAEhB,OADQ4f,EAAAA,GAAcxvB,EAAO,QAAQ,EACjCA,GAAAA,GAAAA,MAAAA,EAAOE,aAID,CACH,MAAA,EACT,CACF,CAEA,OACEoC,EAACm2B,GAAQ,CAEP3yB,MAAAA,EACA4yB,eACEj1B,EAAA,KAAA,CAAIJ,MAAM,sBAAqBZ,UAC7BH,EAAA,IAAA,CAAAG,SAAIsnC,EAAU,iBAAmB,oBAAA,CAAwB,EACzDznC,EAAA,MAAA,CAAAG,SAAMpD,CAAAA,CAAc,CAAC,CAAA,CACnB,EAENU,GAAG,SACHV,SAAAA,EACAs5B,UAAU,kCACVC,UAAU,uBACVG,WAAYkR,EACZ7oC,gBAAAA,EACAy3B,UAAS,GACTI,YAAa32B,EAAAoB,IAAI,EACjBo1B,eAAgB/1B,EAAWua,SAASwb,eAEpCtD,cAAc,SACd0D,UACEz1B,EAACkC,GAAK,CACJoyB,OAAM,GAENzJ,SAAS,OACTC,WAAW,QACXG,SAAS,SACT7oB,WACEvD,EAAA,SAAA,CAAQC,KAAK,SAASc,MAAM,QAAOZ,SACjCH,EAACI,EAAI,CAACC,KAAK,OAAOC,KAAK,GAAA,CAAK,CAAA,CACtB,EACTH,SAAA,CAEDH,EAACyD,GAAQ,CAACQ,KAAMwjC,EAAW,MAAK1qC,CAAS,KAAO,MAAKA,CAAS,OAAMoD,SACjEsnC,EACCtmC,EAAAC,EAAA,CAAAjB,SAAA,CACEH,EAACI,EAAI,CAACC,KAAK,UAAA,CAAY,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,qBAAA,CAAyB,CAAC,CAAA,CACzD,EAEFgB,EAAAC,EAAA,CAAAjB,SAAA,CACEH,EAACI,EAAI,CAACC,KAAK,UAAA,CAAY,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,iBAAA,CAAqB,CAAC,CAAA,CACrD,CAAA,CAEI,EACVH,EAAC0D,IAAa,CAAA,EACdvC,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACT0hC,IAAAA,EAAcgG,OAChB,6CACF,EACA,GAAI,CAAC,KAAK1kC,KAAK0+B,CAAW,EAAG,CACvBA,GAAar4B,MAAM,kBAAkB,EACzC,MACF,CACIq4B,IACYA,EAAAA,EAAYiG,YAAY,EAAEpyB,KAAK,EAE7CzN,SAASugB,KAAOkf,EACX,IAAG7F,CAAY,OACf,IAAGA,CAAY,KAExB,EAAEzhC,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,KAAA,CAAO,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,yBAAA,CAA6B,CAAC,CAChD,CAAA,EACT8K,IAAoBlO,GACnBoE,EAACsC,GAAQ,CACPvD,QAASA,IAAM,CACb8H,SAASugB,KAAOkf,EACX,IAAGx8B,CAAgB,OACnB,IAAGA,CAAgB,IAC1B,EAAE9K,SAAA,CAEFH,EAACI,EAAI,CAACC,KAAK,KAAA,CAAO,EAAE,IACpBc,EAAA,QAAA,CAAOJ,MAAM,oBAAmBZ,SAAA,CAAC,sBACZH,EAAA,IAAA,CAAAG,SAAI8K,CAAmB,CAAA,EAC5C,GAAA,CAAA,CAAO,CAAC,CAAA,CACA,CACX,CAAA,CACI,CAAA,EA9EJlO,EAAW0qC,CAgFjB,CAEL,CC1IA,MAAMK,GAAc,EACdp+B,GAAQ,GACRq5B,GAAoB,IAAIC,gBAE9B,SAAS+E,GAAO,CAAE3H,WAAAA,EAAY,GAAGvY,CAAM,EAAG,CACxC,MAAM8B,EAASyW,EAAa,CAAC,EAAIpE,GAAU,EACrC,CAAEl/B,MAAAA,EAAOC,SAAAA,EAAUgO,cAAAA,GAAkB1M,EAAI,CAC7CtB,SAAU4sB,EAAO5sB,QAAAA,CAClB,EACK,CAACsL,EAASC,CAAU,EAAI1L,EAAS,SAAS,EAC1C,CAACosB,CAAY,EAAIoX,EAAa,CAAC2C,EAAiB,EAAI7Z,KACpD+B,EAAgBpvB,IAChBkW,GAAI8V,GAAAA,YAAAA,EAAOjJ,QAASoK,EAAalnB,IAAI,GAAG,EACxC7B,EAAOmgC,EACT,YACAvY,GAAAA,YAAAA,EAAO5nB,OAAQ+oB,EAAalnB,IAAI,MAAM,EAC1C87B,GACE7rB,EACK,WAAUA,CAAE,GACX9R,EACK,KACC,CACEoK,SAAU,QACV7I,SAAU,WACV6+B,SAAU,UAAA,EACVpgC,CAAI,CACP,IACD,EACL,GACD,SACH,SACH,EAEA,KAAM,CAACiZ,EAAUC,CAAW,EAAIvc,EAAS,EAAK,EACxCorC,EAAYnsC,EAAO,CAAC,EAC1BC,EAAU,IAAM,CACdksC,EAAUjsC,QAAU,CAAA,EACnB,CAACgW,EAAG9R,CAAI,CAAC,EAEZ,MAAMivB,EAAgBrzB,IACtBssB,GAAgB,IAAM,UACNpsB,GAAAA,EAAAA,EAAAA,UAAAA,YAAAA,EAASksC,WAATlsC,MAAAA,EAAAA,KAAAA,EAAoB,EAAG,EAAC,EACrC,CAACgW,EAAG9R,CAAI,CAAC,EAEZ,KAAM,CAACioC,EAAeC,CAAgB,EAAIvrC,EAAS,CAAE,CAAA,EAC/C,CAACwrC,EAAgBC,CAAiB,EAAIzrC,EAAS,CAAE,CAAA,EACjD,CAAC0rC,EAAgBC,CAAiB,EAAI3rC,EAAS,CAAE,CAAA,EACvDd,EAAU,IAAM,CACdqsC,EAAiB,CAAE,CAAA,EACnBE,EAAkB,CAAE,CAAA,EACpBE,EAAkB,CAAE,CAAA,CAAA,EACnB,CAACx2B,CAAC,CAAC,EACN,MAAMy2B,EAAqB,CACzBn+B,SAAU89B,EACV3mC,SAAU6mC,EACVhI,SAAUkI,CAAAA,EAGN,CAAC7vB,EAAkBa,CAAmB,EAAI3c,EAAS,CAAE,CAAA,EACrD4c,EAAoB,MAAOhY,GAAa,CAC5C,GAAI,EAACA,GAAAA,MAAAA,EAAU5D,QAAQ,OACvB,MAAMqU,EAAgB,MAAMD,GAAmBxQ,EAAUkX,CAAgB,EACrEzG,GACkBsH,EAAA,CAClB,GAAGb,EACH,GAAGzG,CAAAA,CACJ,CACH,EAGF,SAASw2B,EAAYr7B,EAAW,CAC1BA,IACF46B,EAAUjsC,QAAU,GAGlB,GAACqR,GAAa,CAACrC,KAKnBzC,EAAW,SAAS,EAChB8E,GAAa,CAACnN,IAChBkoC,EAAiBD,EAAcnb,MAAM,EAAG+a,EAAW,CAAC,EACpDO,EAAkBD,EAAerb,MAAM,EAAG+a,EAAW,CAAC,EACtDS,EAAkBD,EAAevb,MAAM,EAAG+a,EAAW,CAAC,IAGvD,SAAY,SACX,MAAMne,EAAS,CACb5X,EAAAA,EACAkE,QAASlL,EACTxN,MAAOuqC,EAAAA,EAEL7nC,IACF0pB,EAAOpsB,MAAQmM,GACfigB,EAAO1pB,KAAOA,EACV8K,IAAe4e,EAAO0T,OAAS2K,EAAUjsC,UAG3C,GAAA,CACF,MAAMuR,EAAU,MAAMxQ,EAAMiZ,GAAGC,OAAOhY,MAAM2rB,CAAM,EAClDvtB,GAAAA,EACA,GAAUgR,EAAA,CACRo7B,EAAevoC,CAAA,EAAAqN,EAAArN,CAAA,CAAA,EACbuoC,MAAAA,IAAAA,EAAAA,EAAuBvoC,CAAUA,IAAjCuoC,YAAAA,EAAiCvoC,OAC3BrC,EAAAA,QAAiBqC,GACvB+nC,EAAoBt+B,CAAAA,CAAAA,EAAAA,CACpByP,KAAY,CACPqvB,EAAAvoC,CAAA,EAAAga,IAAA,CAAA,GAAAA,GAAA,GAAA3M,EAAArN,CAAA,CAAA,CAAA,EACcA,MAAAA,IAAAA,EAAAA,EAAIA,CAAGga,IAAPha,YAAAA,EAAOga,OACpBrc,EAAAA,QAAiBqC,EAAOrC,QAAAA,GACpB7B,EAAAA,CAAAA,CAAAA,EAAUisC,CACR,MAETG,EAAA76B,EAAA,UAAA,CAAA,CAAA,EACYA,EAAAA,EAAoB,YAAE,EACrBA,EAAAA,EAAQ9L,UAAY,CAAA,CAAE,EACtB8L,EAAAA,QAAAA,EAClB06B,EAAoB,EAAA,EAEtBxuB,EAAAlM,EAAA,QAAA,EACAkM,EAAAA,UAEAlR,MAAoB,GACR,OAAA,CACZlM,CACAkM,KACF,CAAA,MACCmxB,EAAA59B,IACLJ,GAAAiB,GAAA,OAEA,cAA8B,wBAAA,aAAA,EAC9BjB,GAAAA,GAAAA,EAA+B,CACvBq0B,MAAAA,EAAaZ,KAAcnzB,IAAAA,EAAAA,EAAuB,WAC7B,SAAAu9B,EAAA,IAAA,EACzBmP,EAAiBnpC,EAAAA,EAGfmpC,EAAgB,QAAA,KAAA,KAED1sC,CAAmB,CACpC,EACFD,EAAA,IAAA,cACDse,GAAAvb,EAAAosB,EAAA,UAAA,YAAApsB,EAAA,WAAA,MAAAub,EAAA,KAAAvb,EAAAkT,GAAA,IAEDjW,EACgBC,EAAAA,EAAAA,GAEZ0sC,GAAAA,EAAAA,EAAgB,UAAhBA,YAAAA,EAAgB,QAAhBA,MAAAA,EAAAA,KAAAA,EAEAxd,EAAAA,CAAAA,EAAAA,EAAAA,IACF7rB,GAAA,CAAA,IAAA,OAAA,EAAAM,GAAA,UACC0a,GAAAvb,EAAAosB,YAAA,YAAApsB,EAAmB,QAAnB,MAAAub,EAAA,KAAAvb,EAEHO,EAAAA,CAGI6rB,iBAA+B,CAEjC,EAAA,KACkB,CAAAyd,CAAA,EAAArmC,KAClB,OACFrC,EAAA,MAAA,CAEM,GAAA,cAEN,uBACOvC,IAAGyxB,EAAcnuB,SAAMI,EAAA,MAAA,CAAsB+tB,MAAAA,qBAAc/uB,YAC9D,SAAA,CAAW,MAAAkI,IAAA,UAAA,UAAA,GAAoBlI,SAC7BH,EAAA,MAAA,CAAQe,MAAmB,cAA2BZ,YACpD,MAAA,CAAW,MAAA,cAAaA,SACtBH,EAAA8zB,GAAA,EAAA,CAAA,CAAA,EAAW9zB,EAAA8oB,GAAA,CAAa3oB,IACtBH,CAAU,CACP,EACLA,EAAC8oB,MAAU,CAACvmB,MAAK0oB,cACjBjrB,SAAAA,EAAA,SAAA,CAAW,KAAA,SAAaG,MAAAA,QAEpBF,QAAK,IAAA,CACCwoC,EAAA,EAAA,GAEJA,SAAAA,IAAgB,UAClB,SAAAzoC,EAAAI,EAAA,eACgCD,KAAAA,GAE3B,CAAA,CAAM,CAAA,CAAc,CAAA,CAAA,CAAK,CAAA,CACxB,CAAA,EAACgB,EACL,OAAA,CAAA,SACH,CAAA,CAAA,CAAA4Q,GAAA,CAAAquB,GAAAj/B,EAAA,MAAA,CAEPA,IAAAA,EAAAhB,MAAAA,cACWigC,cACP,UAAA,EAAA,GACE79B,SAAKmmC,CAAAA,CAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CACG,GAAA,UAAA32B,EAAA,MAAyB,mBAAYA,mBAE3C,OACM5N,CAAAA,EAAAA,CAAAA,CAAuDhE,MAAC,gBAK9D,WACEkT,GAAO,aAAA,mBAAAtB,CAAA,CAAA,gBAAA,EACD,CACN5N,MAAK,WAEP,KAAA,WACEkP,GAAO,aAAA,mBAAAtB,CAAA,CAAA,gBAAA,EACD,CACN5N,MAAK,QAEP,KAAA,WACEkP,GAAO,aAAA,mBAAAtB,CAAA,CAAA,gBAAA,CAAA,EACD,KAAA,CAAAzC,EAAAN,IACDM,EAAA,OAAArP,KAIDqP,EAAErP,OAASA,EAAa,EACbA,CAAa,EAAA,IAAA0oC,GAAA3oC,EAAAkE,EAAA,CACrB,GAAAykC,EAAA,GACR,SACKA,EACJ3oC,KAAK,IAAUmE,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MACPkP,EAAAA,CAAK,SACP,EAAA,CACPpT,GAACA,IAAA,aAAAkB,EAAAC,EAAA,CAGP,cACC,YAAAD,EAAA,KAAA,OACI,kBAEGlB,SAAS,CAAA,WAAA,IAAAD,IACR,CAAU,GAAA,aAAA,mBAAA+R,CAAA,CAAA,0BACC/R,EAAAI,EAAA,CAEF,KAAA,cAAkDD,KAAAA,GAElD,CAAA,CAAM,CAAA,CAAA,CAAmB,CAAA,EAAGioC,EAAE,OAAA,EAAAjnC,EAAAC,EAAA,CAAC,SAC/B,CAAApB,EAAA,KAAA,CAGVooC,MAAAA,8BACCjoC,SACEH,EAAA,IAAAwC,GAAAxC,EAAA,KAAA,CAAU,SAAAA,EAAAuO,GAAA,CACP65B,QAAAA,EACCjoC,SAAAA,EAEIqC,UAAAA,GACAzF,aAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CACS,EACTiU,EAAAA,EAAAA,CAAAA,CAAyC,CAAA,EAAE/Q,IAC5C,YAAAD,EAAA,MAAA,CAAC,MANavC,WASjB,SACM0D,EAAA+C,EAAA,CACG,MAAA,eAAU/D,GAAAA,aACd,mBAAA4R,CAAA,CAAA,iBACHhR,SAAM,CAAA,qBAAAf,EAAAI,EAAA,CACD,KAAA,aAEH,CACH,CAAA,CACwB,CAAA,CAAM,CAAA,CAAA,CAAgB,CAAA,EACzC,CAAAH,IAAAoI,IAAA,UAAArI,EAAA,IAAA,CAAC,MAEV,WAGH,WACauT,GAAA,CACF,OAAA,EAAA,CAAUpT,CACV,CAAA,EAAOH,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,oBAAA,CAAA,EAAS,CAAA,CAAA,GAAW,CAAAC,GAAAA,IAAA,aAAAkB,EAAAC,EAAA,CAAkB,SAEzC,CAAAnB,IAAA,YAAAkB,EAAA,KAAA,CAGH,wBAEGlB,SAAS,CAAA,WAAA,IAAAD,IACR,CAAU,GAAA,aAAA,mBAAA+R,CAAA,CAAA,0BACC/R,EAAAI,EAAA,CAEF,KAAA,cAAkDD,KAAAA,GAElD,CAAA,CAAM,CAAA,CAAA,CAAmB,CAAA,EAAGmoC,EAAE,OAAA,EAAAnnC,EAAAC,EAAA,CAAC,SAC/B,CAAApB,EAAA,KAAA,CAGVsoC,MAAAA,yBACCnoC,SACEH,EAAA,IAAAge,GAAA,OAAU,KAAA,CAAwB7d,KAAAA,EAExB,QAAAyoC,CAAEx4B,EAAAA,EAAMw4B,GAAAA,EAAAA,GAAAA,YAAAA,EAAAA,SAAAA,YAAAA,EAAAA,KAAAA,EAAAA,CAAAA,GAAAA,KAAAA,IAAAA,CAAAA,GAAAA,KAAAA,GAAQ,OAAI5qB,EAAAA,KAAAA,CACpB1T,SAAAA,EAAiBsO,EAAAA,CAIvB,KACE,IAAA7b,CAAA,MAAAqT,CAAA,GAAA,MAAAA,CAAA,GAAAjQ,YACOC,EAAA,CACH+D,cAGiB,CAChBhE,EAAAA,EAAAA,OAEI,CAACE,SAAK+P,CAAW,CAAA,EACtBpQ,CAAAA,CAAAA,GAAAA,EAAA,OAAA,CAAAG,MAAOiQ,QACN,SAAE9F,GACDA,CAAA,CAAA,CAAA,CAAMvJ,CAAM,CAAOZ,CACG,EAAA,GAEvBiQ,CAAA,IAAA9F,CAAA,EAAA,CAAA,CAAA,CACG,CAAA,EAACrK,IAfQ,YAgBbD,EAAA,MAAA,CAER,MAAC,WACC,SACMmB,EAAA+C,EAAA,CACG,MAAA,eAAU/D,GAAAA,aACd,mBAAA4R,CAAA,CAAA,iBACHhR,SAAM,CAAA,qBAAAf,EAAAI,EAAA,CACD,KAAA,aAEH,CACH,CAAA,CACwB,CAAA,CAAM,CAAA,CAAA,CAAgB,CAAA,EACzC,CAAAH,IAAAoI,IAAA,UAAArI,EAAA,IAAA,CAAC,MAEV,WAGH,WACauT,GAAA,CACF,OAAA,EAAA,CAAUpT,CACV,CAAA,EAAOH,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,oBAAA,CAAA,EAAS,CAAA,CAAA,GAAW,CAAAC,GAAAA,IAAA,aAAAkB,EAAAC,EAAA,CAAkB,SAEzC,CAAAnB,IAAA,YAAAkB,EAAA,KAAA,CAGH,wBAEGlB,SAAS,CAAA,QAAA,IAAAD,EAAAkE,GACE,GAAA,aAAA,mBAAA6N,CAAA,CAAA,0BACF/R,EAAAI,EAAA,CAEC,KAAA,cAAkDD,KAAAA,GAElD,CAAA,CAAM,CAAA,CAAA,CAAmB,CAAA,EAAG+nC,EAAE,OAAA,EAAA/mC,EAAAC,EAAA,CAAC,SAC/B,CAAApB,EAAA,KAAA,CAGVkoC,MAAAA,WACC/nC,SACEH,EAAA,IAAAyK,GAAAzK,EAAA,KAAA,CAAU,SAAAA,EAAAkE,EAAA,CACPgkC,MAAAA,cACC/nC,GAAAA,EACO,IAAApD,CAAA,MAAA0N,EAAA,EAAA,GAAA,MAAAA,EAAA,EAAA,GACH1J,SAAMf,EAAAsnB,GAAA,CACNnjB,OAAAA,CAGsB,CACrBhE,CAEM,CAACsK,CAAAA,EAAAA,EAAiB,EAAA,CAAA,CAAA,CAAA,EAACxK,IACtB,YAAAD,EAAA,MAAA,CAAC,MAVOvC,WAahB,SACM0D,EAAA+C,EAAA,CACG,MAAA,eAAU/D,GAAAA,aACd,mBAAA4R,CAAA,CAAA,iBACHhR,SAAM,CAAA,kBAAAf,EAAAI,EAAA,CACD,KAAA,aAEH,CACH,CAAA,CACqB,CAAA,CAAM,CAAA,CAAA,CAAgB,CAAA,EACtC,CAAAH,IAAAoI,IAAA,UAAArI,EAAA,IAAA,CAAC,MAEV,WAGH,WACauT,GAAA,CACF,OAAA,EAAA,CAAUpT,CACV,CAAA,EAAOH,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,iBAAA,CAAA,EAAS,CAAA,CAAA,EAAUG,CAAC,CAAAF,IAAAoI,IAAA,UAAA6Q,EAAAlZ,EAAAwa,GAAA,CAAe,SAEtCof,GAAA,OASmB,EACd,SAAA55B,EAAA,SAAA,CACF,KAAA,SAAEG,MAAAA,cAGAF,QAAK,IAAAwoC,EAAA,EACL1nC,MAAM,CACNb,eAA2B,KACpB,EAAA,SAAkB,YAAA,CAAM,CAAA,CAAA,EAChCF,EAAA,IAAA,CAED,MAAQ,yBAGVA,SAAA,UAAA,CAAA,EAASqI,IAAA,WAAArI,EAAA,IAAA,CAAwBG,MAAC,WAAW,SAGnCH,EAAAuT,GAAA,CACD,OAAA,EAAA,CAAUpT,CACV,CAAA,EAAA,CAAO,CAAA,EAAEkI,IAAA,UAAArI,EAAA,IAAA,CAAC,MAGrB,WACJ,SACYA,EAAAuT,GAAA,CACL,OAAA,EAAA,CAAUpT,CACV,CAAA,EAAOH,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,6DAAA,CAAA,CAAGe,CAAM,CAAA,CAAA,CAAW,CAAA,CAGrB,CAAA,CACI,CC1bf,MAAM2I,GAAQ,GAERm/B,GAAa7+B,GACNlN,GACFA,EAAMM,GAAG0rC,OAAOC,MAAMzrC,KAAAA,EAAOK,OAEtC,CAEEsM,OAAQ,GAAK,GAAK,GACpB,CACF,EAEA,SAAS++B,GAAS,CAAE5I,WAAAA,EAAY,GAAGvY,CAAM,EAAG,CACpCpnB,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B0sB,EAASyW,EAAa,CAAC,EAAIpE,GAAU,EACrC,CAAEl/B,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,CAC9BtB,UAAU8qB,GAAAA,YAAAA,EAAO9qB,WAAY4sB,EAAO5sB,QAAAA,CACrC,EACK,CAAED,MAAOkO,EAAcjO,SAAUkO,GAAoB5M,EAAI,EACzDmF,EAAS,aAAYzG,CAAS,IACpC6gC,GAASp6B,EAAQ,sBAAqB,EAEtC,MAAMo8B,EAAa/jC,IAEb,CAACwkC,EAAU4I,CAAW,EAAIrsC,EAAS,CAAE,CAAA,EACrC,CAACmsC,EAAOG,CAAQ,EAAItsC,EAAS,CAAE,CAAA,EAC/BusC,EAAgBttC,IACtB,eAAeutC,EAAWh8B,EAAW,OAC/BA,GAAAA,GAAa,CAAC+7B,EAAcptC,QAAS,CACvCotC,EAAcptC,QAAUe,EAAMM,GAAG0rC,OAAOz+B,SAAS/M,KAAK,CACpDC,MAAOmM,EAAAA,CACR,EAGG,GAAA,CACF,MAAMiT,EAAW7f,EAAMM,GAAG0rC,OAAOjsB,KAAKvf,OAChC,CAAEI,MAAOmf,CAAAA,EAAS,MAAMF,EAAShf,OAC/BgB,GAAAA,MAAAA,EAAAA,QACRsqC,EAAkBpsB,CAAA,CACA,MAClB,CAAA,CACF,IACEzgB,KAAAA,CACF,MAAAghC,CAGA,EAAI,MAAAyL,GAAA/rC,CAAA,EACIusC,GAAAxqC,EAAAu+B,GAAA,YAAAA,EAAA,SAAA,YAAAv+B,EAAA,KAAAu+B,EAAAuL,GAAAA,EAAA,OAAA,QAAEjrC,GAAAA,MAAAA,EAAAA,QAAMwrC,EAAUL,CAAAA,CAIxBzsC,MAAQuC,CAAI,CACZ,CACEuqC,MAAAA,EAAc,MAAAC,EAAA,QAAA,KAAA,EAChB,GAAA,CACF,MAAAzrC,CACEtB,EAAAA,EACF,OAAAsB,GAAA,MAAAA,EAAA,SACF0P,IACAwyB,EAAgB,QAAoB7jC,EAAAA,CAAAA,EAAAA,IAC9B2B,EAAAA,QAAAA,GAAAA,CAAU4P,GAAAA,EAAAA,CAAAA,CAChB,CAAA,GAEevR,CACb,GAAAuR,EAGA5P,MAAAA,CACE8wB,CAAyB,CAE7B,eAAA1vB,GAAA,CACO,GAAA,CACL,MAAGwO,EAAAA,MAAAA,EAAAA,GAAAA,OAAAA,SAAAA,KAAAA,CACH5P,MAAAA,CAIJ,CAAA,EAAA,KAAA,EACM,GAAA,CACF,MAAAA,CACQ,EACG4P,EAAA,OAAA5P,EAAAwvB,GAAAxvB,EAAA,QAAA,EAAAA,GAAA,MAAAA,EAAA,QAAAA,EAAA,CAAA,EAAA,KAAAkiC,EAAA,WAIH,QAAAliC,EAAA,CAAA,EAAA,GACJ,IAAY4P,EACR4f,MAAAA,CACR,QACanxB,CACJ,CACT,MAAAkiC,EAAA9yB,GAAA,IACOhK,EAAAC,EAAA,UACG,CAAA,CAAA,CAAAi/B,EAAA,QAAAl/B,EAAA,MAAA,CACH,MAAA,wBACT,SAAA,CAAAnB,EAAAI,EAAA,CACF,KAAA,QAEM69B,MAAAA,gBACJ,aAEgBrgC,IAAAA,CAAAA,EAAAA,IAAAA,CACC,KAAA,CAAuBuC,KAAAA,EACrB,QAAAyoC,CAAc,EAAA/mB,EAAqBvX,EAAAs+B,EAAA,OAAA,CAAA/vB,EAAAywB,IAAAzwB,GAAA,CAAAywB,EAAA,KAAA,CAAA,EAC7CjJ,OAAAA,EAAan8B,GACN,GAAA,IAAAnH,CAAA,MAAAqT,CAAA,GAAEA,SAAAA,CAAAA,EAAAA,OAAAA,CAAMw4B,SAAAA,CAAAA,EAAAA,OAAAA,CAAY/mB,MAAAA,qBACpBvX,SAAgBsO,GACtB,CAAA,IACO,CAAM,EAAA5Y,EAAY,OAAA,CAAYG,MAAAA,eACjCA,YACEmK,CAAA,CAAA,CAAA,CAAA,CAAY,EAAA8F,CAAqB,CAAA,CAAC,CAAA,CAC7B,CAAA,EAAA,CAAA,CAAA24B,EAEP/oC,QAAAmB,EAAA,MAAA,CAAA,MAAY,YAAchB,SAAAA,CAAAA,EAAEsQ,UAAmB,SAASzQ,EAAA,KAAA,UACpD,eAAA,CAER,CAGL,CAAA,EAAE+oC,EAAMnrC,IAAAA,IACI,KAAA,CAAWuC,WAAAA,EACpBA,UAAAA,EACEA,SAAAA,EAAqB,YAAAopC,EAEtBR,OAAAA,EACO,MAAA9wB,EACJuxB,iBAAAA,EACAC,SAAAA,EACAC,aAAAA,EACAH,YAAAA,EACAr6B,YAAAA,EACA+I,MAAAA,EACA0xB,IAAAA,EACAjX,MAAAA,CACAkX,EAAAA,EACAC,EAAAA,IAAAA,IAAAA,CAAAA,EAAAA,SAAAA,QAAAA,SAAAA,EAAAA,EAAAA,QAAAA,MAAAA,EAAAA,EACAhD,IAAAA,GAAAA,GACArjC,EAAAA,CACAX,MAAAA,GAAAA,GAAAA,CAAAA,EACAoM,GAAAA,GAAAA,EAAAA,EACE05B,GAAAA,GAAAA,CAAAA,GAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CACJ,CAGImB,OAAAA,EAAAA,IAAAA,CACJ,KAAcjnC,EACNknC,OAAAA,SACAC,IAAAA,sBACQ7tB,MAAAA,GAAAA,CAKhB,iBAAA,OAAA2tB,GAAA,KAAA,GAAA,CAAA,IAEA,uBACE,QAAAA,GAAA,KAAA,GAAA,CAAA,QAAA,EAEQjnC,CAAAA,EACNuG,SAAOjI,EAAA,UAAA,CACH,SAAA,CAAAnB,EAAA,SAAA,UAGEA,EAAA,MAAA,CACqB,IAAAiY,EACM,IAAA0xB,EAI1B,MAAA16B,EACN9O,OAAAA,EAEDA,QACEH,MAAA,CAAAG,CACE,CAAA,EACEqO,EAAKyJ,MAAAA,CAAAA,MACA0xB,eACL16B,SAAAA,CAAAA,EAAAA,SAAAA,CACAC,SAAAA,CAAAA,EAAAA,MAAAA,CACQ,MAAA,eACT,SAAA,CAAAlP,EAAA,OAAA,CAEHmB,MAAA,SAAW,SAAA+L,CAAc/M,CAAAA,EAAAA,IACvBgB,CAAAA,CAAAA,GAAAnB,EAAAoB,EAAA,CAAAjB,SACEgB,IAAW,CAAA,EAAA,CAAA,CAAA0lC,GAAA7mC,EAAAoB,EAAA,CAAcjB,SACvBH,EAAAgnB,GAAA,CAAY,SAAA6f,EAAU35B,OAAAA,OAAAA,CAAe,CACnB,CAAA,CAAA/M,CAAE,CAAA,EACnB,CAAA,CAAA8pC,GAAEpD,EAAAA,MACD1mC,MAAAA,QACe,KACD0mC,EAAAA,IACH,OAAA,SACRoD,CAAA,CAAA,CAAC,CAEL,CAAA,EAEF,CAAA,CAAAV,KACC,IAAA,CAAA,MAAU,cAAA,KAAc7W,EAAAA,IAAc,OAAA,SACnClvB,CAAAA,CAAAA,CAAK,CAET,CAAA,CAAA,CAGD,CAAA,CAAS,EAAAX,CAAA,CAAoB6vB,CAAAA,CAAAA,CAAc,CAAA,CAAA,CACxC6W,CAAAA,EAEJ,CAAAlJ,EACG0I,CAAA,CAAA,EAAA,OAAA/oC,EACCm2B,GAAA,CAAA,MAAA3yB,EACR,eAELrC,EAAA,KAAA,CAAA,MAEL,sBACD,SAAA,CAAAnB,EAAA,IAAA,CAEQ+oC,SAAAA,UAEd,CAAA,IACW,MAAA,CAEPvlC,SAAAA,CAAAA,CACA4yB,CAAAA,CACE,CAAA,EAA+Bj2B,GAAAA,WAC7B,SAAApD,EAAW,UACX,qBAAA,UAAMA,uBAAAA,WAAeqsC,EAAA,gBAAAtqC,EAGzBrB,wBAAG,EAAA,GAAA,IACHV,UAAAA,GACAs5B,YAAUr2B,EAAAoB,EAAA,EAAA,EACVk1B,eAAU71B,EAAA,SAAA,eACVg2B,cAAY2S,SACZtqC,cAAAA,EACA43B,UAAAA,EAAAA,GAAAA,CACS,OAAA,GACI12B,SAAAA,OACbw2B,WAAAA,QAEc,SAAA,SACCyH,WAAAA,EAAAA,SAAAA,CACfrH,KAAAA,SAEU,MAAA,QAEG,SAAA52B,EAAAI,EAAA,CACE,KAAA,OACF,KAAA,GAAA,CACTmD,CACE,CAAA,EAAa,SAAe,CAAApC,EAAAsC,GAAA,CAAOtD,QAAAA,IAChCC,CAAKC,IAAKuhC,EAAA,OAAA,6CAAA,EAAOthC,GAAK,CAAA,KAAA,KAAAshC,CAAA,EAAA,CAAKA,GACtB,MAAA,kBAAA,EACTzhC,OAIOyhC,IAGJA,EAAeA,EAAc,YAAA,EAAA,KAAA,EACvBA,SAAAA,KAAAA,IAAAA,CAAAA,YACJ,EACF,SAAA,CAAA5hC,EAAAI,EAAA,CACA,KAAiB,KACfwhC,CAAcA,EAAAA,IAAAA,EAAAA,OAAAA,CAELrZ,SAAAA,yBAAuB,CAClC,CAAA,CACF,CAAA,EAAAtd,IAAAlO,GAAAoE,EAAAsC,GAAA,CAAEtD,QAAAA,IAEFH,CAAMK,SAAK,KAAA,IAAA4K,CAAA,WAAO,EAAE,SAAM,CAAAjL,EAAAI,EAAA,CAA8B,KAAA,KAAA,CAChD,EACWrD,IAAAA,EAAAA,QAAAA,OAERmD,oBACEqoB,SAAAA,CAAAA,sBAA2BvoB,EAAA,IAAA,CACtC,SAAAiL,CAAE9K,CAAAA,EAAAA,GAAAA,CAEG,CAAA,CAACE,CAAK,CAAA,CAAK,CAChB,CAAA,CAAa,EAAAtD,CAAmB,CACX,CC9RnC,SAASmtC,IAAU,CACjBtM,GAAS,OAAQ,GAAG,EACdn9B,MAAAA,EAAaC,GAAYzD,CAAM,EAC/B,CAAEiiB,UAAAA,CAAcze,EAAAA,EAEdsmB,QAAiC/G,GAAA,CAEnCmqB,GAAAA,CAAAA,EACJ,OAAKnqB,KAAiB,KAAA,CAChB,KAAA/f,EAAEA,GAAAA,CAAAA,EAAS0pB,EAAW3J,EAAAA,CAC5B,UAAkB0f,GAChBxuB,cAAWwuB,GACXriC,KAAeknC,GACfjnC,OAAMukC,GACNhkB,UAAQ2pB,GACR1pB,WAAWqhB,GACXphB,QAAYuhB,GACZthB,SAASosB,GACTlsB,SAAU+kB,GACVhlB,OAAU+qB,EAAAA,EACVhzB,CAAQ+xB,EAEa,MADjB,CAAAsC,GACiBpqC,IAAA,UAAA,CAAA0pB,EAAA,MAEnB1pB,KAA2CD,EAAAqqC,EAAA,CAC/C,GAAA1gB,EACY,WAAyCA,EAAAA,EAAkB1pB,EAAA,KAAA,UAAA0pB,CAAA,CAAA,CAAA,CAAA,EAEzE,OAAAvqB,GAAC,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,EAAA,CAAAM,EAAAisB,IAAA,CAEDvsB,GAAAA,CACM,MAAAsf,EAAA,SAAAiN,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,EACF,0BAAuBA,cAAiB,EAAEjN,CAAI,EAAA,MAAA,CAC9CxiB,MAA0B,CAAA,CAA6B,CAAA,EAEvDE,EAAQkuC,MAAO,CACjB,GAAA,UACD,cAAA5qC,GAAA,UAGC,QAAA,gBAAA,GAAA,CAAAA,EAAA,OAAA,QAAA,GAAA,GAAA,CAAAA,EAAA,OAAA,QAAA,QAAA,IACKA,EAAA,eAAA,0BACmB,GAOlBA,EACAzC,SAAAA,CAA+B,CACjC,CAAA,CC/CR,SAASstC,IAAO,OACR9pC,MAAAA,EAAaC,GAAYzD,CAAM,EACrCnB,OAAAA,EAAU,IAAM,EACb,SAAY,CACX,MAAMoF,EAAO,MAAMsV,GAAGF,OAAOpV,KAAK,EAClC,GAAIA,EAAKtD,OAAQ,CACf,MAAM6Y,EAAKC,KACKxV,EAAK0V,UAAgBC,EAAIC,WAAWL,CAAE,CAAC,EAC3C7Y,SACVX,EAAOinB,WAAa,GAExB,CAAA,IAEJ,EAAG,CAAE,CAAA,EAGHlkB,EAAAoB,EAAA,CAAAjB,UACIM,EAAWua,SAAS6E,oBAAsB,gBACzC,CAACpf,EAAWua,SAAS6E,mBACpBpf,EAAWua,SAASuQ,yBACtB9qB,EAAAA,EAAWye,YAAXze,MAAAA,EAAsB7C,QACtBoC,EAACkqC,GAAO,CAAE,CAAA,EAEVlqC,EAAC0/B,GAAS,CACRl8B,MAAM,OACNuQ,KAAK,IACLtW,GAAG,OACHk5B,YAAa,GACbC,UAAW52B,EAACwqC,GAAmB,EAAA,CAAA,CAChC,CAAA,CAEH,CAEN,CAEA,SAASA,IAAoB,CACrB/pC,MAAAA,EAAaC,GAAYzD,CAAM,EAC/BwtC,EAAsB5uC,IACtB,CAAC24B,EAAWC,CAAY,EAAI73B,EAAS0I,MAAS,EACpD,OACEnE,EAAAC,EAAA,CAAAjB,SAAA,CACEH,EAACkE,EAAI,CACH3B,IAAKkoC,EACLtmC,GAAG,iBACHpD,MAAQ,qCACNN,EAAW5C,qBAAuB,YAAc,EACjD,IAAG22B,GAAa,EAAG,GACpBt0B,QAAgBR,GAAA,CACdA,EAAEgrC,gBAAgB,EACd1lC,OAAO2lC,WAAW,yBAAyB,EAAEC,UAC/ClrC,EAAEuJ,eAAe,EACjBwrB,EAAyBU,GAACA,EAAiB7vB,OAAT,MAAmB,EAEzD,EAAEnF,SAEFH,EAACI,EAAI,CAACC,KAAK,eAAeC,KAAK,IAAIC,IAAI,eAAA,CAAiB,CAAA,CACpD,EACNP,EAAC6qC,GAAiB,CAChB1V,MAAOX,EACPc,UAAWmV,EACX9pC,QAASA,IAAM8zB,EAAanvB,MAAS,CAAA,CACtC,CAAC,CAAA,CACF,CAEN,CAEA,MAAMwlC,GAAsB,GACtBC,GAA8B,EACpC,SAASF,GAAkB,CAAEvV,UAAAA,EAAWH,MAAAA,EAAOx0B,QAAAA,CAAQ,EAAG,CAClD,KAAA,CAAE7D,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,EAC1BoC,EAAaC,GAAYzD,CAAM,EAC/B,CAACoL,EAASC,CAAU,EAAI1L,EAAS,SAAS,EAE1CO,EAAwBL,EAAMM,GAAGC,cAAcC,KAAK,CACxDC,MAAOutC,EAAAA,CACR,EAED,eAAerF,GAAqB,CAC5BT,MAAAA,EAAmB,MAAM7nC,EAAsBQ,OAC/CN,EAAgB2nC,EAAiBtnC,MAEvC,GAAIL,GAAAA,MAAAA,EAAeO,OAAQ,CACzBP,EAAcyP,QAA0BrO,GAAA,CAC3BA,GAAAA,EAAagM,OAAQ1N,EAAU,CACxC0xB,cAAe,EAAA,CAChB,CAAA,CACF,EAEKwW,MAAAA,EAAuBnB,GAAmBzmC,CAAa,EAEtDH,EAAAA,kBAAoBG,EAAc,CAAC,EAC1CJ,EAAOI,cAAgB4nC,EAGjB7nC,EAAAA,GAAGW,QACNyG,OAAO,CACNnH,cAAe,CACbS,WAAYT,EAAc,CAAC,EAAEI,EAC/B,CAAA,CACD,EACA2jC,MAAM,IAAM,CAAA,CAAE,CACnB,CAEAnkC,OAAAA,EAAOY,qBAAuB,GACvBqnC,EAAAA,2BAA6B5lC,KAAK0rC,MAClChG,CACT,CAEA,KAAM,CAACiG,EAAmBC,CAAoB,EAAItuC,EAAS,EAAK,EAChE,SAASuoC,GAAsB,CACtBroC,OAAAA,EAAMM,GAAG2nB,eAAeznB,KAAK,CAClCC,MAAO,CAAA,CACR,CACH,CAEA,SAASgoC,GAAoB,CAC3Bj9B,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAMm9B,EAAmB,EACnB1gB,MAAAA,EAAiB,MAAMogB,IACR+F,EAAA,CAAC,EAACnmB,GAAAA,MAAAA,EAAgBnnB,OAAM,EAC7C0K,EAAW,SAAS,OACV,CACVA,EAAW,OAAO,CACpB,CAAA,IAEJ,CAEAxM,OAAAA,EAAU,IAAM,CACVq5B,IAAU,QAA0BoQ,GAAA,EACvC,CAACpQ,CAAK,CAAC,EAGRh0B,EAACk0B,GAAc,CACbnJ,cAAc,qBACdiJ,MAAAA,EACAG,UAAAA,EACA30B,QAAAA,EACA80B,OAAQ,CACNrsB,OAAQlN,SAASw5B,IACnB,EACA1J,SAAS,OACTC,WAAW,QACXG,SAAS,SACT9oB,MAAM,SACNoxB,mBAAmB,UAASv0B,UAE5BH,EAAA,SAAA,CAAAG,SACEH,EAAA,KAAA,CAAAG,SAAI,eAAA,CAAiB,CAAA,CACf,EACRH,EAAA,OAAA,CAAAG,SACGM,EAAWpD,cAAcO,OACxBoC,EAAAoB,EAAA,CAAAjB,SACGM,EAAWpD,cACT0vB,MAAM,EAAGge,EAA2B,EACpCzpC,IACCtB,GAAAA,EAAC4lB,GAAY,CAEX7oB,SAAAA,EACA0B,aAAAA,EACAqnB,mBAAkB,EAAA,EAHbrnB,EAAahB,EAInB,CACF,CACH,CAAA,EACA4K,IAAY,UACdrI,EAAA,MAAA,CAAKe,MAAM,WAAUZ,SACnBH,EAACuT,GAAM,CAAC8B,OAAM,EAAA,CAAE,CACb,CAAA,EAELhN,IAAY,SACVlH,EAAA,MAAA,CAAKJ,MAAM,WAAUZ,UACnBH,EAAA,IAAA,CAAAG,SAAG,gCAAA,CAAiC,EACpCH,EAAA,IAAA,CAAAG,SACEH,EAAA,SAAA,CAAQC,KAAK,SAASC,QAASqlC,EAAkBplC,SAAC,WAAA,CAE1C,CAAA,CACP,CAAC,CAAA,CACD,CAAA,CAGL,EACNgB,EAAA,SAAA,CAAAhB,SAAA,CACEgB,EAAC+C,EAAI,CAACC,GAAG,YAAYpD,MAAM,eAAcZ,SAAA,CACvCH,EAACI,EAAI,CAACC,KAAK,IAAA,CAAM,EAAE,IAAAL,EAAA,OAAA,CAAAG,SAAM,UAAA,CAAc,CAAC,CAAA,CACpC,EACNgB,EAAC+C,EAAI,CAACC,GAAG,iBAAiBpD,MAAM,gBAAeZ,SAC5C8qC,CAAAA,EACC9pC,EAAAC,EAAA,CAAAjB,UACEH,EAAA,OAAA,CAAMe,MAAM,gBAAeZ,SAAC,KAAA,CAAS,EAAE,IACvCH,EAAA,OAAA,CAAAG,SAAM,iBAAA,CAAqB,CAAC,CAAA,CAC5B,EAEFH,EAAA,IAAA,CAAAG,SAAG,SAAA,CAAU,EACZ,IACHH,EAACI,EAAI,CAACC,KAAK,aAAA,CAAe,CAAC,CAAA,CACvB,CAAC,CAAA,CACD,CAAC,CAAA,CACK,CAEpB,CAEA,MAAe7D,GAAAA,GAAK+tC,EAAI,EC3NlBY,GAAoB,CACxB,6CACA,qBACA,uCACA,gCAAkC,EAG7B,SAASC,GAAwBvoC,EAAK,CAE3C,KAAM,CAAEuT,SAAAA,EAAUjO,SAAAA,CAAS,EAAI,IAAIgO,IAAItT,CAAG,EAE1C,UAAWwoC,KAASF,GAAmB,CACrC,KAAM,CAAA,CAAG1tC,CAAE,EAAI0K,EAASmjC,MAAMD,CAAK,GAAK,GACxCjvC,GAAOqB,EACP,MAAQ,CACC,SAAA2Y,EACLrZ,GAAAA,CACAU,CAEJ,CACF,MAAA,EACA,CACF,SAAA8tC,GAAA1oC,EAAA,CAES0oC,KAAAA,CACD,SAAAxuC,EAAEA,GAAAA,CAAUU,EAAAA,GAAAA,CAAAA,EAAG,OAAI2tC,GAAAA,EACrBruC,IAAYU,CAAI,MAAAA,CAAA,GAEpB,IACA,CCtBF,SAAwB+tC,IAAY,CAElC,MAAM3oC,EADWoF,KACIE,SAASvC,QAAQ,MAAO,EAAE,EACzC6lC,EAAeL,GAAwBvoC,CAAG,EAE1C6oC,EAAYD,GAAAA,MAAAA,EAAc1uC,SAC3B,IAAG0uC,EAAa1uC,QAAS,MAAK0uC,EAAahuC,EAAG,GAC/C,KACE,CAAC4K,EAASC,CAAU,EAAI1L,EAAS,SAAS,EAEhDurB,OAAAA,GAAgB,IAAM,CACpB7f,EAAW,SAAS,GACnB,SAAY,CAEP,GAAA,CACI,KAAA,CAAEvL,SAAAA,EAAUU,GAAAA,CAAOguC,EAAAA,EACnB,CAAE3uC,MAAAA,GAAUuB,EAAI,CAAEtB,SAAAA,CAAAA,CAAU,EAElC,GADe,MAAMD,EAAMM,GAAGiN,SAASrH,QAAQvF,CAAE,EAAEO,QACvC,CACHgK,OAAAA,SAASugB,KAAOmjB,EAAY,aACnC,MACF,OACU,CAAC,CAGb,CACQ,KAAA,CAAE5uC,MAAOkO,EAAcjO,SAAUkO,GAAoB5M,EAAI,EACzD+W,EAAS,MAAMpK,EAAa+K,GAAGC,OAAOhY,MAAM,CAChD+T,EAAGlP,EACHtF,MAAO,EACP0Y,QAAS,EAAA,CACV,EACGb,GAAAA,EAAO/K,SAASzM,OAAQ,CACpB6M,MAAAA,EAAS2K,EAAO/K,SAAS,CAAC,EAChCrF,OAAOgD,SAASugB,KAAQ,IAAGtd,CAAgB,MAAKR,EAAOhN,EAAG,YAAA,SACjD2X,EAAO5T,SAAS5D,OAAQ,CAC3B4E,MAAAA,EAAU4S,EAAO5T,SAAS,CAAC,EACjCwD,OAAOgD,SAASugB,KAAQ,IAAGtd,CAAgB,MAAKzI,EAAQ/E,EAAG,QAClDiuC,EAEF1jC,OAAAA,SAASugB,KAAOmjB,EAAY,aAEnCpjC,EAAW,OAAO,CAEtB,CAAA,IACC,EACF,CAACojC,CAAS,CAAC,EAGZvqC,EAAA,MAAA,CAAKJ,MAAM,WAAWuB,SAAS,KAAInC,UAChCkI,IAAY,UACXlH,EAAAC,EAAA,CAAAjB,SAAA,CACEH,EAACuT,GAAM,CAAC8B,OAAM,EAAA,CAAE,EAChBrV,EAAA,KAAA,CAAAG,SAAI,YAAA,CAAc,EAClBH,EAAA,IAAA,CAAAG,SACEH,EAAA,IAAA,CAAGiE,KAAMpB,EAAKuG,OAAO,SAASoP,IAAI,sBAAqBrY,SACpD0C,CAAAA,CACA,CAAA,CACF,CAAC,CAAA,CACJ,EAEF1B,EAAAC,EAAA,CAAAjB,UACEH,EAAA,KAAA,CAAAG,SAAI,uBAAA,CAAyB,EAC7BH,EAAA,IAAA,CAAAG,SACEH,EAAA,IAAA,CAAGiE,KAAMpB,EAAKuG,OAAO,SAASoP,IAAI,sBAAqBrY,SACpD0C,CAAAA,CACA,CAAA,CACF,CAAC,CAAA,CACJ,EAEJ7C,EAAK,KAAA,CAAA,CAAA,EACLA,EAAA,IAAA,CAAAG,SACEH,EAACkE,EAAI,CAACC,GAAG,IAAGhE,SAAC,SAAA,CAAa,CAAA,CACzB,CAAC,CAAA,CACD,CAET,CCzEA,SAASwrC,IAAQ,CACT,KAAA,CAAE7uC,MAAAA,GAAUuB,EAAI,EACtBu/B,GAAU,QAAS,IAAG,EACtB,KAAM,CAACv1B,EAASC,CAAU,EAAI1L,EAAS,SAAS,EAE1C,CAACiY,EAAa5S,CAAM,EAAIC,GAAkBuS,GAAAA,EAAI,EAAG,CAAC,EAClD,CAACJ,EAAOC,CAAQ,EAAI1X,EAAS,CAAE,CAAA,EACrCd,EAAU,IAAM,CACdwM,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAM+L,EAAQ,MAAMvX,EAAMM,GAAGiX,MAAM/W,KAAK,EACxC+W,EAAMW,KAAK,CAAC1F,EAAGN,IAAMM,EAAE9L,MAAMuZ,cAAc/N,EAAExL,KAAK,CAAC,EACnDpH,GAAiB,EACjBkY,EAAc,SAAA,CACdhM,MAAAA,GACU,OAAA,CACVlM,CACAkM,IAAkB,EACpB,CAAAuM,CAAA,CAAA,EAAA,KACC,CAAAC,EAAAC,CAAA,EAAAnY,EAAA,EAAA,EACL,OAAIiY,EAAAA,MAAY,CAEhB,GAAM,aAEN,uBACOpX,SAAG,KAAasD,SAAM,CAAAI,EAAA,MAAA,CAA0B,MAAA,qBAAIhB,SACvDgB,CAAAA,EAAA,SAAA,CAAW,SAAAA,EAAA,MAAA,CAAoBhB,MAC7BH,cAAAG,YACE,MAAA,CAAW,MAAA,cAAaA,SACtBgB,CAAAA,EAAA2yB,GAAA,CAAA,CAAA,EAAA9zB,EAAAkE,EAAA,CAAW,GAAA,IAAa/D,MAAAA,eAEhBgE,SAAGnE,EAAAI,EAAA,CAAU,KAAA,OAAcD,KAAAA,GAC1B,CAAA,CAAM,CAAA,CAAA,CAAY,CAAA,EAAGH,EAAE,KAAA,CAAC,SACxB,OAAA,CACJ,EACLA,EAAA,MAAA,CAAAG,MAAI,cACJH,SAAAA,EAAA,SAAA,CAAW,KAAA,SAAaG,MAAAA,QAEpBF,QAAK,IAAA8U,EAAA,EAAA,EACLhU,SAAMf,EAAAI,EAAA,CACNF,KAAAA,OAA6CC,KAAAA,IAEvCE,IAAK,UAAA,CAAA,CAAY,CAAA,CAAQ,CAAA,CAAA,CAAY,CAAA,CACrC,CAAA,EAACL,EACL,OAAA,CAAA,SACHqU,EAAA,OAAA,EAAAlT,EAAAC,EAAA,CAEPpB,SAAA,CAAAA,EAAA,KAAA,CACGqU,MAAAA,YACClU,SACEH,EAAA,IAAA1C,GAAA0C,EAAA,KAAA,CAAU,SAAAA,EAAAkE,EAAA,CACPmQ,GAAAA,MAAAA,EAAW/W,EAAAA,GACV6C,WACO,OAAA,CAACgE,SAAU7G,CAAAA,EAAQ8C,EAAA,CAAED,KACxBgB,MAAA,CAAAhB,EAAAA,IAAAA,EACEH,OAAK,CAACK,SAAK/C,EAAA,KAAA,CAAQ,CAAA,CAAE,CAAA,CAAYkG,CAAAA,CAAa,CAAA,CAAA,CAC1C,CAAA,EAAC6Q,EAcH,OAAA,GAAArU,EAAA,SAAA,CAAC,MAEV,WAEFqU,SAAelT,EAAA,SACA,MAAA,gBAAUhB,YACtB,OAAA,QAAAkU,EAAA,SAAA,EAAA,GAAA,GAAA,CAAA,CAAA,CAAa,CAAelU,CAAAA,CAEI,CAAA,EACzBkI,IAAA,UAAArI,EAAA,IAAA,CAAC,MAEX,WACD,SACYA,EAAAuT,GAAA,EAAA,CACd,CAAA,EAASlL,IAAA,QAAArI,EAAA,IAAA,CAAUG,MACjBH,WACC,SACW,uBACd,CAAA,EAASA,EAAA,IAAA,CAAUG,MAAC,WAEpBH,SAAA,eAAA,CAAA,CAAS,CAAA,CAAA,CAAW,CAAA,EAAa8U,GAAG9U,EAAAc,GAAA,CACrC,MACI,QACJ,QAEHd,GAAAA,CACQN,EAAA,SAAAA,EAAA,iBACU,EAAA,CAEZqV,EACF,SAAA/U,EAAAoI,GAAA,CACF,KAAA0M,GAAA,YAAAA,EAAA,KAAE3U,WAEU,CACJ2U,EAAsBxX,QAAAA,eAGjByX,EAAA,EAAA,CACT,CACAA,CAAAA,CAA6B,CAC/B,CAAA,CAAA,CAAA,CACD,CC7HX,MAAe62B,GAAA,GAAA,IAAA,IAAA,0BAAA,YAAA,GAAA,EAAA,KCAf,IAAM1kC,GAAA,CAAA,mBAAA,WAAA,eAAA,yBAAA,wBAAA,4FAAA,0BAAA,yDAAA,aAAA,aAAA,wBAAA,aAAA,SAAA,KAAA,KAAA,aAAA,IAAA,GAAA,KAAA,GAAA,IAAA,EAAA,09BCAN,IAAOA,GAAA,CAAA,mBAAA,WAAA,eAAA,yBAAA,wBAAA,4FAAA,0BAAA,yDAAA,aAAA,aAAA,wBAAA,aAAA,SAAA,KAAA,KAAA,aAAA,IAAA,GAAA,KAAA,GAAA,IAAA,EAAA,ywEC6CP,MAAMwC,GAAQ,GACRmiC,GAA6B,GAC7BC,GAAa,EAEnB,IAAIC,GAAsB,CAAA,EACtBC,GAAoB,CAAA,EACpBC,GAAkB,CAAA,EACtB,SAASC,GAAoBzuC,EAAI,CAC/B,OAAOuuC,GAAkBvuC,CAAE,EAC3B,OAAOwuC,GAAgBxuC,CAAE,CAC3B,CAEA,MAAMs4B,GAAwB,CAC5BC,MAAO,UACPC,OAAQ,SACRC,SAAU,QACZ,EAKMiW,GACJ,sLAEIC,GAAmB,SAEzB,SAASC,GAAW1iB,EAAQ,CACpB,KAAA,CAAElsB,GAAAA,CAAOksB,EAAAA,EACT,CAAE7sB,MAAAA,EAAOC,SAAAA,GAAasB,EAAI,CAAEtB,SAAU4sB,EAAO5sB,QAAAA,CAAU,EACvD0D,EAAaC,GAAYzD,CAAM,EAC/B,CAAC+rB,EAAcC,CAAe,EAAIC,GAAgB,EAClDojB,EAAatjB,EAAalnB,IAAI,OAAO,EACrCyqC,EAAiBvjB,EAAalnB,IAAI,YAAY,EAC9C0qC,EAAa5gB,SAAS0gB,GAAcC,EAAgB,EAAE,EAC5D,IAAIE,EAAYD,EAAa,EACvBE,MAAAA,EAAgB1jB,EAAalnB,IAAI,eAAe,EAChD6qC,EAAcC,GAAUF,EAAe3vC,CAAQ,EACjD2vC,GAAiB,CAACC,IACRF,EAAA,IAERI,MAAAA,EAAgBJ,GAAa,CAAC,CAACF,EAE/Ble,EAAOlB,GAAU1vB,EAAIV,CAAQ,EAC7B,CAAC+vC,EAAYC,CAAa,EAAInwC,EAASK,EAAOoN,SAASgkB,CAAI,CAAC,EAClEvyB,EAAU,IAAM,CACVmB,EAAOoN,SAASgkB,CAAI,GACRpxB,EAAAA,EAAOoN,SAASgkB,CAAI,CAAC,CACrC,EACC,CAACA,CAAI,CAAC,EAEH2e,MAAAA,EAAY7hC,GAAQ,IAAM,CACxB,KAAA,CAAEyY,aAAAA,CAAiB3mB,EAAAA,EACnBkL,IACHyb,GAAAA,YAAAA,EAAczb,WAAY,MAAOyb,GAAAA,YAAAA,EAAc5N,SAAU,IACtDi3B,EACJC,GAAU,mBAAoB/kC,CAAQ,GAAK+kC,GAAU,SAAU/kC,CAAQ,EACrE,MAAA,CAACA,GAAY8kC,EACR,IAEF9kC,CACT,EAAG,CAAE,CAAA,EAELrM,EAAU,IAAM,CACV,CAACgxC,GAAcL,IAChB,SAAY,CACP,GAAA,CACIhiC,MAAAA,EAAS,MAAM3N,EAAMM,GAAGiN,SAASrH,QAAQvF,CAAE,EAAEO,QACnDwwB,GAAW/jB,EAAQ1N,CAAQ,EAC3BgwC,EAActiC,CAAM,OACR,CACZrO,MAAAA,sBAAiB,EACjBmN,SAA4B,KAAAyjC,CAC5BhlC,CAAgBglC,IAEjB,EACL,CAAAP,CAAA,CAAA,EACF,MAAIA,EAAUC,EAAAC,GAAA,YAAAA,EAAA,iBAAAG,GAAA,YAAAA,EAAA,iBAERn1B,EAAmB+0B,GAAAA,IACR/0B,CAGXw1B,CAAAA,OAAAA,WAAmBzU,iCAAkB,EAAA,SAAAj4B,EAAA,aACzC,QACUkqC,KAAAA,EAIHkC,EACL,SAAmB,KAAAG,GAEZhkB,EAAA,OAAA,OAAA,EACLA,EAAaokB,OAAO,eAAO,EAC3BpkB,GAAmC,EAGvC,EAAA,CAAA6jB,EAAAG,EAAAvsC,EAAA,YAAA,CAAA,EACF3E,OAAAA,EAAI+wC,IAAAA,CAEJ/wC,IAAAA,EAAgB,WAAA,IAAA,CACVsL,MAAAA,WAAyB,cAAA,WAAA,EAErBimC,GACNA,EAAe,MAAA,CAEf,EAAA,GAAA,EACF,MAAM,IAAA,aAAAjmC,CAAA,CACN,EAAO,CAAAylC,IACLA,EAAAA,MAAc,CAElB,sBACO9rC,SAAM,CAAA0rC,EAAA90B,GAAA,MAAAA,EAAA,OAAA3X,EAAAskB,GAAA,oBAIH3M,SAAAA,GAAAA,EACA4M,SAAAA,EACAxnB,KAAAA,GAAAA,YAAAA,EAAAA,SACA2d,MAAkBgY,EAAAA,EAClBhU,QAAoByuB,CAAA,CAAA,EACXA,EAAAA,MAAAA,CAGXntC,MAAAA,gCAAKe,SAAMf,EAAAuT,GAAA,CAA+BpT,OACxCH,EAAO,CAAA,CAAO,CAAA,EAAEA,EAAAkE,EAAA,CAIpBlE,GAAAA,CAAK,CAAA,EAAKgtC,CAAAA,GAAAA,EAAAA,GAAAA,CAAY,GAAAvvC,EAIpBA,SAAAA,EAAAA,SACAV,UAAAA,CAAiBA,CACjBiwC,CAAAA,CAAAA,CAAAA,CAEH,CAGP,SAAAM,GAAAzlB,EAAA,CAEA,KAAA,CACQ,SAAA0lB,EAAEA,GAAAA,EAAUppC,QAAAA,EAAIjE,GAAAA,CAAAA,EAAYstC,EAAU,OAAI3lB,EAAAA,EAAAA,EAAAA,CACzC0lB,MAAAA,cACCxsC,GAAAA,EAAoBoD,QAAAA,EAAQjE,GAAAA,CAAAA,CAAAA,EAAsBstC,EAAAA,MAAAA,CAExDxtC,MAAAA,eAAKe,SAAM,EAAeuB,GAAUkrC,CAAA,CAAA,CAAOA,CAE/C,SAAAC,GAAA,CAEA,GAAAhwC,EAAwBA,UAAAA,EAAAA,IAAIuvC,SAAYr3B,CAAA,EAAeA,WAAgB,KAAA,CAAAqT,EAAAC,CAAA,EAAAC,GAAA,EAC/DojB,EAACtjB,EAA6B,IAAA,OAAoB,EAClDsjB,EAA0BxqC,EAAAA,IAAW,eAAA,EACrC4qC,EAAAA,SAA6B5qC,EAAI,EAAe,EAAA,EAChD2qC,EAAY7gB,EAAAA,CAAAA,EAAqB,eAAM,QAAA,SAAA,GAAA,eAAA,UAAAxR,IAAAvb,GAAA,mCAAA,UAAA,YAAAA,GAAA,+BAAAub,GAAA,UAAA,EAAA,EACvChN,CAAYvR,EAAAA,CACfoB,EAAAA,IACUW,IAAAA,MAAAA,GAAWwP,EACjB,QAAA,OAA0BsgC,IAAAA,EAE3BC,EAAsB,CAAA,CAAA,SAAA3kB,EAC1BA,IAAAA,WAAiB,CAAA,EAEb2kB,CACA,MAAA7wC,EAAEA,SAAAA,CAAOC,EAAAA,EAAAA,UAAiB4Y,CAAA,CAAA,EAA0B,CACpD,MAAA3K,EACJlO,SAAOkO,EACPjO,cAAAA,CACAgO,EAAAA,EAAAA,EACMqd,EAAArrB,IAAAkO,EACFmd,KAA4Bnd,CAAAA,EAC5BxK,CAAAA,EAAAA,GAA+B7D,EAAA,CAAA,CAAA,EAC/B,CAACyN,EAAUujC,CAAAA,EAAehxC,EAAAA,SAAW,EACrCixC,EAAoBhyC,IACpBgyC,KAAuBpwC,EAAAV,CAAA,EACvBsxB,EAAiB5wB,EAAY,CAAA,EAC7BqwC,EAAAA,IAENhyC,cACAA,EAAAA,EAAgB,UAAhBA,MAAAA,EAAgB,OACdozB,EAAAA,CAAAA,CAAAA,EACFpzB,EAAK,IAAA,OACLA,MAAAA,EAAgBiyC,GAAA,IAAA,CACRpd,GAAAA,CAAAA,UAEJ,OAA4B,KAAA,CACtB,UAAAF,CAAA,EAAEA,EAAAA,QAAcvB,IAAcnzB,YACpCkwC,GAA2BxuC,CAAA,EAAAgzB,EAE3B,EAAA,EAAA,EACF,OAAA5xB,EAAAqwB,EAAK,UAAL,MAAArwB,EAAK,iBAAA,SAAA8xB,EAAA,CACS50B,QAAAA,EAA8C,GAE5D40B,IACS,IAAA,OACTA,EAAa,OAAA,GACXA,EAAAA,EAAgB,UAAhBA,MAAAA,EAAgB,oBAAA,SAAAA,EAChBzB,CACF,EAAA,CAAAzxB,EAAA4K,IAAA,SAAA,CAAA,EACF,MAAQA,MAEF2lC,EAAuBnyC,IACvBoyC,IACN,WAAAC,CAAuBA,EAAAA,KAAAA,CAAW5lC,EAAW,SAAA,EACnCye,IAAAA,EACRze,MAAAA,EAAoB0jC,GAAAvuC,CAAA,EAChB0wC,GAAAA,EAAAA,CAEEC,MAAAA,IAAqC,OACvBnyB,IAAAhf,EAAA,SAAAoxB,CAAA,CAE0BzX,EACfg3B,EAAAS,CAAA,CAAA,MAG7BT,EAAYS,CAAoB,CAC3B,GAAA5wC,CAQLmwC,CAAAA,CAAAA,EAAenwC,OAAAA,SAAK,WAEtB,MAAA6wC,EAAA,IAAAC,GAAA,IAAAzxC,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,QAAA,CAEa,QAAA,CACX,CAAM6wC,EAEOE,GAAAD,GAAA,IAAAzxC,EAAA,GAAA,SAAA,QAAAW,CAAA,EAAA,QAAA,MAAA,EAAA,CACV,QAAA,CACH,CAAM+wC,EAGOC,GAAA,CAAA,CAAAhuC,EAAA,SAAA4tB,CAAA,EACX,IACFqgB,GAAAjuC,EAAA,SAAA4tB,CAAA,EAEA,GAAA,EAAAogB,IAAkB,CAAAP,GACdpB,GAAAA,CACA2B,GAAcP,MAAYI,IAC5BlyC,MAAqCW,CAAA,EAChC,MAAA,IAAA,QAAAkZ,IAAA,CACD,WAAAA,GAAA,GAAA,CACF62B,CAAAA,CACAte,MAAAA,CAEMlmB,SAAa2N,EACjB1X,MAAuB,CAGzBnC,GAAAA,CACAkM,IAAAA,GAAkB,SAAAqmC,GAAA,CAClB,OAAAA,IAAA,YAAAA,GAAA,IAAAC,KAAA,CACF,GAAAA,GAAA,GACF,QAAAA,GAAA,QAEI,aAAAA,GAAA,aAoEOC,QAAAA,GAAAA,QACAF,OAAAA,GAAuBC,EAAA,EAC5BnxC,QAAOA,GAAAA,GAAAA,SAAAA,CAAAA,GACK+E,EACK0vB,SACL9U,MAAAA,GACZ0xB,CACAtkC,UAASqkC,GACX,YAAAE,EACF,EAAAnhB,GA5EAkgB,EAAsBU,SAAAA,IAAAA,YAAAA,GAAAA,SAAAA,EAChB,MAAAQ,GAAA,IAAA,IAAAC,GAAEC,QAAAA,IAAAA,CAAWH,GAAAA,GAAAA,EAAAA,CAAgBnhB,cAAAA,EAEnCkgB,CAAiB/xC,EAEXizC,GAAAA,sBAA0B/yB,IAAAA,GAAA,KAAAxR,GAAA,WAAA,GAChCykC,GAA8B,IAAAzkC,GAAA,WAAA,CACC,CAAA,EACZ,MAChB0kC,GAAAF,GAAA,MAAAhzB,IAAAA,GAAA,QAAA,KAAAyyB,GAAA,QAAA,EAAA,EAECjkC,GACA,CAAA,EAEgBiE,GAAAA,QAAAA,IAAsB,CAQX,GAP7B8f,GAAA/jB,GAAA1N,EAAA,CACD,cAAA,EACD,CAAMoyC,EAGAC,gBAAsB,CAAAL,GAAA,KAAA9yB,IAAAA,GAAA,KAAAxR,GAAA,WAAA,GAAAA,GAAA,cAAAikC,GAAA,IAC5BK,GAAqBtkC,IAAWA,GAAA,WAAA,EAEbA,GAAA,qBAAAA,GAAA,QAAA,GAChB2kC,GAAA,KAAA3kC,EAAA,UAGQojB,GAAAA,cACNkhB,GAAwB9yB,GAGTvN,GAAAA,OAAsB,UACxC,CAAAjE,GAAA,oBAAA2kC,GAAA,KAAAnzB,IAAAA,GAAA,KAAAxR,GAAA,WAAA,GAAAA,GAAA,QAAA,KAAAikC,GAAA,QAAA,GAEAU,GAAW7oB,KAAAA,EAAAA,MAET6oB,CACS3kC,MAAAA,GAAAA,GAAuBqiC,KAAAA,IAAAA,GAAAA,KAAeriC,GAAA,WAAA,EAE/C2kC,QAEC3kC,YAKD2kC,GAAAA,UAAuB3kC,IAGvBqnB,aAA2BhY,KAAAA,EAAAA,EAErB,CACFgY,CAAAA,EACFkd,GAAA,KACOK,MAAAA,GAAAA,CAAAA,MAAqB,IAAApzB,KAAA,CAAA,GACvBA,GAAA,GAEGuM,SAAAA,GACV,SAAA2mB,GACF,UAAAlzB,GAAA,QAAA,GACD,QAAAA,GAAA,QAED7f,aAAY6f,GAAA,aAAEizB,OAAAA,GAAAA,EAAAA,CAAWH,EAAAA,EAAAA,CAAaK,GAAAA,EAAmB,UAAAV,GAAA,QAAA,GACzD,UAA0BA,EAAA,CACxBtyC,EAAAA,GAAAA,GAAc,IAAA6f,KAAoB,CACpC,GAAAA,GAAA,GAaA,QAAoBA,GAAA,QAEhBxe,UAAMA,GAAAA,QAAAA,GACN6xC,WAAU,GACVC,OAAUJ,GAAAA,QAAAA,KAAAA,GAAAA,QAAAA,GACVhlC,OAAAA,GAAqB1M,EAAAA,EACrB+E,QAASyZ,GAAEzZ,GAAAA,SAAAA,CAAAA,EACX0vB,GACA4c,aACFd,EACA,QAAA,CACEvwC,WAAAA,GAAAA,EAAAA,UAAAA,YAAAA,GAAAA,UACA0M,WAAW2iC,GAAAA,EAAmBrvC,UAAnBqvC,YAAAA,GAAmBrvC,SAAAA,EAEhC,MACG2xC,GAAkB9tC,GAAY,UAAA2a,IAAAA,GAAA,KAAAxe,CAAA,MACzBA,GACN+E,EAASyZ,GAAEzZ,CAAAA,EACU/E,EACT+xC,EAAA,EAAAxD,GACMvuC,CAAAA,EAAAA,GAClBqxC,MAA0B/xC,CAAA,CAC1ByN,MAAAA,CACFlC,EAAG,OAAA,CAGLA,CACA0lC,KACEyB,eAAkCA,MAClChf,IAAAA,CACF,aAAA0d,CAAA,CAGA,CACA,EACEuB,EAAAA,MAAsB,CAAA,EACxB,KAAA,CAAAC,EAAAC,CAAA,EAAAhzC,EAAA,EAAA,EAEAR,EAAAA,IAAY,CAAEozC,IAAAA,EAAAA,YAAAA,IAAAA,CAAAA,MAAaxE,EAAA,KAAA,MAC3B4C,EAAuB,SAAA5C,EAAAiD,EAAA,SAAA,KACvBjC,EAAAA,GAKoC,OAEpC5vC,MAAAA,KACAkM,cAAkBunC,CAAA,CAAA,CACpB,EACC,CAAA,CAAA,EAEe9zC,GAAAA,IAAAA,SAElB,GAAA,CAAAsO,EAAa,OACXtL,OACF,MAAA+wC,EAAA7D,GAAAxuC,CAAA,EACF,GAAAqyC,EAEAh0C,EAAuB,QAAKgB,UAAMgzC,UAE3BH,EAA2B,QAAA,CAClC7zC,MAAUi0C,EAAM,CACVF,WAAWG,EAAAA,EAAkB,UAAlBA,YAAAA,EAAkB,UACzBhF,eAAe,wBAAA,SACrB,EAIE4E,GAAmBG,EAAA,UAAA/B,EAAA,QAAA,UAAA+B,EAAA,UACrB7gB,EAAA,QAAA,UAAA+gB,EAAA,MACO5lC,EAAA,SAAA,IACT6kB,EAAa,QAAA,UAAA,GAEb8e,EAAA,QAAA,IAAA,EACC,EAAE,CAAA,EAEL7lB,EAAAA,IAAgB,CACV1nB,EAAU7C,kBAAAA,IACNmpB,SAAAA,CACF+oB,GAAAA,CACE/oB,KAAAA,CACF+oB,YAAAA,CACJ1zC,EAAAA,GAAwB,EACtBqB,EAAAA,WAAAA,CAAAA,oBAAAA,CAAAA,WAED,aADCqyC,MAAAA,OAAAA,KAAAA,KAAAA,GACD,OAAAI,EAAA,CACDhhB,aAAkC4gB,CACpC,EAC2BK,EAAA,CACvBV,aAAkCA,CAClChf,CAAkCA,MACpC,CAAA,CACA,IAIAr0B,EAAAA,CAAAA,kBAAwB,CAAA,EAAAN,MAEtBi0C,IAAAA,CACAE,GAAAA,CAAAA,EACA5lC,EAAAA,iBAAsB,EACxB2hC,GAAC,CAAA,EACD9c,GAAsBuB,CAAAA,EACxB2f,GAAoBxyC,MAAAA,CAClBxB,EACEqB,CAAAA,CAAAA,EAAAA,MACDqvC,EAAArsC,EAAA,SAAA4tB,CAAA,GAAA5tB,EAAA,SAAAhD,CAAA,EACDyxB,KAAkC,IAAA,CACpC,GAAA,CAAA4d,EAGAkB,MAAAA,GACF,KAAI3jC,CAEJvO,QAAAA,CACE,EAAI2E,EAAkC4vC,EAAA,SAAA,cAAA,KAAA,EAEtC,OAAAA,EAAa,UAAA7tC,EAAA,YACP6tC,EAAA,UAAA,MACF,EAAM,CAAAvD,CAAA,CAAA,EAAEjkB,GAAAA,GAAAA,IAAAA,CAAAA,GAAY,GACpB,MAAA,GACQlqB,IAAAA,EAAAA,IAA6B,EACrC,OAAAyV,EAAA,OAAiB,KACXk8B,EAAAA,EAAAA,YAA4B,KAAoBl8B,CAEtD,EAAA,CAAA04B,CAAmB,CAAA,EAAAlP,GACL2S,GAAAC,GAAA,GAAAD,CAAA,MAAAC,EAAA,IAAA,SAAA,mBAAA,EAAA,MACdC,GAACtlC,GAAA,IAAA,CAAA,MAED/O,OACF,KAAA,CACC,IAAAyG,CACF,EAAYwgB,EAEfvnB,GAAAA,EAGImwC,OAAAA,IAAAA,IAAAA,CAAAA,EAAkB,QAClBhvC,EAAAA,CAAAA,CAA0B,CAAA,EAC1B+uC,GAAqB7gC,GAAA,IAAA,CACrB4gC,GAAAA,GAEF,OAAA0E,KAAA1zC,CAAA,EACC,IAAEA,CAAA,CAAA,EAEC+vC,IAAwBziC,EAAAA,EAAAA,IACxBkmC,EAAAA,OAECzD,EAAAA,OAAAA,EAAmB,CAAAziC,EAAA,OAAA9M,CAAA,CAAA,EAClBmzC,GAAArmC,EAAA,KAAA4R,GAAAA,EAAA,UAAA,EAAEzZ,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,QAAAA,EAAYsqC,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACduD,GAAexhC,GAAAA,IAAAA,CACrBwhC,GAAIM,GAAoBhlC,SAAAA,GACjB0kC,OAAAA,KACT,KAAIvD,CACE0D,IAAAA,CACJ,EAAI3C,EAACf,QAAAA,wBAAmB,OAAAjiB,EAAA,EAAA,OAAA,IACxB,EAAIzW,CAAAA,KACAA,GAAKxW,UAAa,CAGpBwW,SAAOA,KAAK2Y,CAAe,EAC7B,CAIAwjB,QAAAA,CAAAA,EAMIE,gBAAAA,GACC3D,CAAAA,CAAAA,SAAAA,cAAAA,sBAAAA,CACC,CAAEjqC,EAAAA,GAAQiqC,YAAAA,IAAAA,CAChB,SAAKjqC,KAAAA,CAAK,CAAA,EACHzD,GAAA,IAAQyD,IAAKuT,CACtB,MAAI02B,EAAW,SAAA,cAAA,QAAA,6BAAA,EACT8D,mBAAiC,wBAChCH,EAAAA,MAAAA,KAAAA,EAAAA,QAAAA,iBAAAA,EAAAA,CAAAA,EAAc,GAAAI,GAAAC,EAAA,IAAA5hB,EAAA,QAAA,cAAA4hB,EAAA,OAAA,EAAA,CACnB,MAAwB/zC,EAAAA,EAAAA,QAAAA,CAAAA,EACtB0zC,IAAc1zC,GAAAA,EAASg0C,EAAA,CAAA,EAEpBxzC,KACD2b,GAAW/N,QAEf6lC,kBAAyBzzC,EAAAA,EAG3B,KAAuB8M,CACvB,MAAkBA,EAAiB4R,EAAgB,KAAAg1B,IAAA,CAE7C,MAACC,GAAyBD,2BAC1BE,OAAAA,GAAsB,KAAM,IAAAC,GAAA,MAAA,CAEhC,CAAI,EAA6CC,IAC3CA,EAAA,MAAA,EAAExmB,EAAAA,eAAAA,EAAAA,EACDA,CAAmB,CAC5B,EAEAzrB,GACE,QACM,CACJ4I,MAAAA,EAAgBglC,SAAAA,cAAAA,QAAAA,6BAAAA,EAElB8D,EAAAD,GAAA,YAAAA,EAAA,wBAAAS,EAAA,MAAA,KAAApiB,EAAA,QAAA,iBAAAid,EAAA,CAAA,EAAA,GAAA0E,GAAAC,EAAA,IAAA5hB,EAAA,QAAA,cAAA4hB,EAAA,OAAA,EAAA,SAGYrE,EAAAA,QAAAA,CAAAA,SACc6E,EAAAP,EAAA,CAAA,EACtBQ,KACO1wC,GAAAA,MAAAA,EACT0wC,GAAA,eAAAxb,EAAA,EAIJ32B,KAAAA,CACE4I,MAAAA,EAAgBglC,EAAAA,KAAAA,IAAAA,CACjB,MAAAoE,GAAAH,GAAA,wBAED7xC,UAAsB,KAAA,IAAAgyC,GAAA,MAAA,CACpB,CAAA,EAGMN,IACNO,QAA6BhxB,EAG7BjkB,EAAY,eAAA25B,EAAA,EAAkB,CAC9B,CACE8a,EAIME,GAAAA,IAAAA,IAAAA,CACFC,MAAAA,EAA4BD,SAAAA,cAAAA,QAAAA,6BAAqB,EACrD,GAAAF,EAAgB,CACdG,MAAAA,EAAiBH,EAAA,mBACjBG,aAA+C,YAAA,IAAA,YACjDQ,EAAA,KAAA,CAAAA,EAAA,KAGMH,CACJ,CAAMD,EACN,KAAA,CAAAK,GAAsB5mB,CAAaumB,EAAAA,EAAAA,EAAAA,EACpCM,EAAA71C,EAAA4wC,EAAA,eAAA,QAAA,EACDkF,EAAuBjZ,GAAA,CAAAh5B,EAAA+C,EAAAuV,EAAAvN,IAAA,CACrB4mC,EAAAA,eAAAA,EACAA,EAAAA,gBAAAA,EACFpoB,EAAA,CACF,MAAAxmB,EAAA,EACD,cAAAgI,EAAA,EAEDrL,CAAAA,CACE,EAAA,CAAA3B,CAAA,CAAA,EAGMqzC,MAAuD,CAAApxC,EAAA+K,IAAA,CAC7DyhC,KAA6B7rB,EAAAA,CAI3BwwB,EAAAA,CAAAA,CAAAA,EAIME,EAAAA,IAAAA,CACFQ,IAAAA,EACJ,OAAA7E,GAAgBD,IACd8E,EAAAA,WAAiB,IAAA,OACjBA,MAAAA,OAA+C,wBAAA,cAAA,wBAAA7E,CAAA,MACjDjiC,GACKA,EAAA,eAAAsrB,EAAA,CAGGqb,EAAAA,GAAAA,GAEP,IAAA,CACD,aAAuBhqC,CAAA,CACrBiqC,CACAA,EAAAA,CAAAA,EAAAA,IACF,MAAAO,GAAAlZ,GAAA,CAAAjuB,EAAAhI,IAAA,CACF,KAAA,CACD,GAAA8hB,EAIDnlB,SAAAA,EACE,SAAAmwC,GAGA,WAAAsC,GACE,OAAAC,GACA,QAAAtnC,GACU0qB,aAAAA,GACV,OAAA4Z,EACF,EAAArkC,EACDsnC,GAAAxtB,IAAA9mB,EAQD,OAAyB5B,EAAAA,KAAAA,CAEzB,SACE,KACIoN,MAAe,GAAAqmC,EAAA,WAAA,EAAA,IAAAuC,GAAA,aAAA,EAAA,IAAAC,GAAA,SAAA,EAAA,IAAAC,GAAA,OAAA,EAAA,GACfrH,SAAgB,CACFqH,GAAA5wC,EAAAC,EAAA,UACH,CAAApB,EAAAwa,GAAA,WACW/c,GACvB,SAAAm8B,IAAA,CAGL,eAAA,IAAA,CAE8BlB,sBAAAA,IAAY,CACxCwT,GAA6BtS,EAAA,CAAA,CAC1B,CAEL99B,CAAgB,CACVsL,uBAEFA,WACE,WAA6BrL,GAAAA,CAGjB,SAAAwoB,EACV9Z,SAAAA,EACF,cAAA,GACI,KAAA,IACR,gBAAA,GACa,eAAAkjC,CACX5uC,CAAAA,CAAkB,CACpB,EAAAsJ,IAAA,WAAA,CAAA0C,EAAA5J,EAAA,MAAA,CACiBsrC,MAAAA,qBAEE/T,SAAAA,CAAAA,EAAAA,IAAAA,CAEX,SAAA,0EAAA,CACAnU,EAAAA,EAAAA,EAAAA,CACJ+qB,GAAAA,SACAC,MAAAA,SACAsC,SAAAA,QAAAA,CACAC,CAAAA,CACAtnC,CAAAA,EAAAA,CAAAA,GAAAA,EAAAA,MAAAA,CACA0nB,MAAAA,qBACA4c,SAAAA,CAAAA,EAAAA,IAAAA,CACErkC,SAAAA,CAAAA,uCAAAA,EAAAA,IAAAA,UACwBhN,2DACG6xC,CAE/B,KACE,SAAA,MAEgBzB,SACJyB,SAAAA,IAAwB,UAIjCyC,QAAAA,IAAAA,CAAAA,EACC,SAAA,GAAA5xC,SACS,CACM,GAAA,OACWmN,GAAA,MAAAtC,EAAA,GAAA,OAAA,MAAA,CACpBsjB,EAAAA,EAAqB,IACnB0jB,KAAAA,WACEC,QAAAA,GACD,MAAA,CAAA,CACF,EACH,GAAA3kC,GAAA,SAAA,OAAA,CACM,MAAA+Z,GAAA/Z,GAAA,SAAA,CAAA,EACI,SAAA,KAAArC,EAAA,IAAAA,CAAA,MAAAoc,GAAA,EAAA,GAAA,MAAAA,GAAA,EAAA,EAAA,KAGR9C,OAAAA,IAAAA,MAAAA,YAAAA,CAEa,OAAA7kB,GAAA,CACR4I,EAAA,SAAA,EACU,MAAA,UAAA5I,EAAA,CACCiuC,CAAAA,IAGnBtlC,EACY,SAAA,CAAArI,EAAAI,EAAA,CAAoBD,eAC1B,CAAA,EAAA,+CAAA,CAAA,CAGA,CACHH,CAAK,CAAA,CAAA,CAAI,CAAA,EAAAmB,EAAemsC,GAAA,CAAA,SA7FnB4E,IAAe5C,EA6Fa,GAE1BvyC,EAAA,IAAAA,CAAA,MAAAwnB,CAAA,GAAA,MAAAA,CAAA,GAAA,QAGR6D,IAAAA,CACMrnB,GAAMwjB,CAAA,CAAoBpkB,EAC7B,SAAA,CAAAsC,IACsCzC,GAAAA,EAAAA,EAAAA,GAAAA,CAAA,UAAIjD,GAAQ,SAElD68B,IAAA,CACAz4B,eAAA,IAAA,CACO,sBAAA,IAAA,GACiBy4B,EAAA,CAAA,EAEpBtxB,CAAAA,CACA,EACM,SAAAtI,EAAAsnB,GAAA,CACF,SAAA/C,EAAmD,SAAAxnB,EACnC8F,cACR,GAAA,KAAAivC,IACGxC,EAAA,IAAA,IAAA,gBACF,GAAA,aACRqC,EACGrkC,oBACF,CAAM7C,CACNzC,CAASugB,EAAAA,EAAAA,GAAAA,CAEW,SAAAhE,EAEd,SAAAxnB,EACR,cAAA,GAAA,KACF+0C,IAAYxC,EAAA,IAAA,IACVhnC,gBAAAA,GACAiB,aAAMooC,EACNv1C,qBACF,eAAA,CAAA,CAAAy1C,EAAA,CAAA,EAAAvC,GACCpd,GAAA,GAAA/wB,EAAA,MAAA,CACL,MAAA,eAAEhB,SAAAA,CAAAA,EAEFH,EAAK,CAAA,KAAM,UAAA,CAAU,MAEvBA,EAAA,OAAA,CAAS,MAAAkyB,GAGd,SAAAzhB,GAAAyhB,EAAA,CAAA,CAGH/wB,CAAAA,CACYgxC,CAAAA,EAAAA,GAAAA,CAAAA,CACVhuC,EAA6D0tC,KAC9CrnC,IAAA,YAAAA,GAAA,QAAA,GAAAxK,EAAAoyC,GAAA,CACblG,SAAAA,EACF,QAAA1hC,GAAErK,gBASK2xC,GACE,MACM,EAAA,aAETxjB,QAAAA,EAAqB,QAAAud,GACnBmG,WAAAA,CACEE,GAAAA,EAAAA,IAAAA,CAAsB,MAAA3tB,CAAA,GAAA,MAAAA,CAAA,GAAA,QACvB,IAAA2nB,GAAA3nB,CAAA,CAAA,CACF,CACH,EAAEpkB,IAAAA,WAEK4xC,IAAA,CAAA,EAAAjF,GAAA,MAAAA,EAAA,eAAA,CAAA4D,IAAA1wC,EAAA,MAAA,CACLukB,MAAAA,iBACAxnB,SAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,EAEAuD,IAAMwxC,SAAUxC,IAAW,CAAM,EAAAxC,GAAA,MAAAA,EAAA,eAAA,CAAA4D,IAAAvvC,EAAA,MAAA,CAAA,MAClB,eAAA,SACDwwC,CAAAA,0BAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,SAAAA,CAAAA,KACKU,SAAsB,MAC1C,QAGHryC,QAAO,IAAA,CACLukB,EAAAA,kBACAxnB,EACAu1C,SAAa,WAAA,CACbhyC,CAAAA,CAAiC,CAAA,CAClB,CACDqxC,EAAAA,CACKU,CACnBE,EAAAA,CAAAA,EAAAA,EAAAA,EAAiBxnC,EAAC8mC,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,EAAAA,EAGM1mC,GAAA,WAC1B,GAAA,eAAW,SAAA,6BAAA,SAAA,CAAchL,MAAAA,EACvBH,WAAK,QAAA,EAAA,WAAA,aAAA,MAAA,CAAA,EAAA,GAAAwyC,GAAA,MAAAA,EAAM,IAAA,OAAYpG,GACvB,KAAAoG,EAAA,GAAA,CAA0BryC,CACG,OAAAisC,GACtB,MAAAvtC,EAAA5B,EAAA,eAAA,YAAA4B,EAAA,QAAA,CAAA,EAAA,CAAAwvB,CAAA,CACJ,EACDokB,GASMtnC,GAAA,IAAA,CAAA,GAGf0mC,CAAcrnC,EAEXzN,MAAAA,GACAyN,MAAAA,EAAAA,CAAAA,EAAAA,SACiBsnC,EAAAA,EAAAA,CAAAA,EACjBY,KAAOjoC,EAAA,EAAA,EACPkoC,EAAW7D,SACX8D,EAAAA,iBAAoC/G,CAElC1nC,CACAjE,OAAAA,EAAAA,MAAAA,CAAegsC,EAAAA,QAAAA,CAAAA,EACjB2G,EAAA,IAAApqB,GAAA0E,GAAA1E,EAAA1rB,CAAA,CAAA,CAAA,EAAA,CAAAmc,EACD7O,EAAA9M,EAAAR,CAAA,CAAA,EAEFsL,GACC0pC,GAAAA,IAAAA,WAEA,EAAA,IAAAH,EACE5xC,EAAAA,CAAAA,EAAAA,EAAA4xC,EAAA,CAAA,EAAA,OAAAzwC,EAAW,MAAA,CAAA,SACTnB,KAAS,IACNkvB,EAER7mB,MAAAA,8BAECgC,SACA,EAAA,gBACElJ,EAAAA,IAAAA,EAAA,UAAA,UAAA,CAAAiM,EAAA,QAAA,WAAA,EAAA,IAAA0lC,EAAA,aAAAA,CAAA,GAAA,EAAA,GAAA,eAAWpzC,GAAA,CAAcS,EAEvBH,UAAAA,WACA0xC,EACO,QAAA,KACC,EAEGruB,SAAAA,CAAAA,EAAAA,SAAAA,CACT,MAAA,GAAAhb,IAAA,UAAA,UAAA,EAAA,GAAA,WACD3I,GAAA,CAAAzC,EAEQ,kBAAA,EAEZ,SAAAkE,EAAA,MAAA,CACD,MAAA,4BAIN1D,SAEA4K,CAAAA,EAAAA,KAEA+f,CAQE2qB,SAAAA,CAAAA,GAAyC/yC,EAAA,SAAA,CAEzC,KAAA,SACIwyC,gCACS3vC,IAAK,CACXupC,QAAAA,KAAAA,CACT,EACF,SAAApsC,EAAAI,EAAA,CACwB8C,KAAAA,eACjB,KAAA,IAET,CAAMuvC,CACJ,CAAKv5B,EAAAA,CAAAA,IAAAA,GAAAA,IAAAA,UAAAA,EAAAA,EAAAA,CAAU,SAAS,CAAA/X,EAAA,OAAA,OACV,wBACU,CAAAnB,EAAAiD,GAAA,SACJ6pC,EAAA,mBAETtiC,cACT,MAAA,EAAA,CACF,EAAA,IAAArJ,EAAA,OAAA,CACe5D,MAAAA,gBACCE,cAAiBA,IAAAA,EAAAA,GAAa,CACxBF,SAAAA,YAEH4N,OAAAA,OAKrB,CACE,CAAA,CAAA,CACW,CAAA,CAAA,CACJ+jB,EAAAA,IAAAA,EAAAA,SAAAA,qBAQkB,kCAGjBwiB,QAAAA,IAEFA,EAAAA,eAA2B,EAC7BhyC,EAAA,gBAAA,EACFmuC,EAAA,QAAA,eAAA,CAEA7tC,SAAA,SACwB,MAAA,OAA2B,EAGxCqjB,EACT,MAAA,kBAAEljB,SAOFH,EAAAI,EAAA,CAAW,KAAA+wC,KAAA,OAAA,aAAA,UAAA,CAA2BhxC,CACpC,CAAA,CAAA,CAEI,CAAA,EACOgB,EAAAC,EAAA,CACLL,SAAM,CAAA,OAAA,IAAAI,EAAA,SAAA,eAEJynC,MAAAA,kCACF,QAAAlpC,GAAA,CAAES,EAAAA,eAEG,EAAMT,EAAA,gBAAA,EAAoBwvB,EAAA,QAAA,SAAA,CAAM,IAAA,EAGvCgiB,SAAAA,QACA,CAAA/wC,CACc,EAAcA,OAAAA,CAAAA,GACf,QAAAsxC,GAAA,YACajvC,MAAAA,2BACpBzF,SAAAA,CAAAA,EAAAA,EAAAA,CACA2pB,KAAU,UAAA,CAAA,EACLwoB,GAAA,OAAA,CAAA5/B,EAAA7M,EAAAuwC,IAAAA,EAAA,UAAAhkC,GAAAA,EAAA,YAAAM,EAAA,SAAA,IAAA7M,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,IAAA6sC,GAAAtvC,EAAA4C,GAAA,CACN,IACDzB,EAAA,QAAA,OAAMJ,IAAMuuC,EAAA,QAAA,WAAA,YACH,EAAA,CACPtvC,KAAa,OAAA,GAAAmB,EAAAC,EAAA,CAAA,cACUsK,EAAAA,OAAAA,CACrBwb,MAAO,gBACP,SAAAzW,GAAAy+B,GAAA,MAAA,CAAA,CACG,CAAA,CAAA,CACH,CAAE,CACR,CAAA,CACEjvC,CAAK,CAAA,CAAA,CACC,CAAA,EAAAkB,QACU,CACdzB,MAAAA,cACAA,SAAkB,CAAAM,EAAA,SAAA,CAClB6tC,KAAAA,SAAqC,MACzB,4BAAA,MACH,CAAA,QACRiF,IAAA,OAAA,GAAA,MACH,EAAA,QACM,IAAA,CAAiB3yC,MAElB,EACHE,EAAsB,OAAA,OAAA,EAAmC2oB,EAC1D,OAAA,YAAA,EACMA,EAAA,OAAA,MAAA,EAGX7nB,EAAA6nB,CAAA,CAAE,EAEA,MACO,2BAAA,SACChpB,EAAAI,EAAA,CACNF,eAEER,KAAiB,GACjBA,CAAAA,CACAwvB,CAAAA,EAAAA,GAAAA,WAA+B,CAAA,KAC7BrE,SAAK,MACK,uBAAA,QACX,IAAA,CACH5tB,EAAA,mBACAhB,EAASizC,EAAoBuC,CAC7BjuC,EAAqDrD,SAAAA,EAErDH,EAAK,CAAA,KAAM,UAAU,KACpBkvC,GAOU,CAELrsC,CAAsB2I,CACtBjL,EAAAA,EAAAA,IAAkC,MAFpBiC,MAOlB,OAAA,CAE6BrC,OAAAA,EACV+uC,OAAgB,EAC1B,WAEVlvC,EAAA,SAAA,CACM,KAAA,SAEZ,MAAA,gBAEHmB,SAAAnB,EAAAI,EAAA,CAAW,KAAA,OAAaD,IACtBH,UACO,KAAA,IAAA,CACC,CAAA,CACC,EACLwgB,SAAAA,CAASsyB,EAAarvC,GAAA,CACxB,SAAA4E,IAAA,kBACe,IAAA,CACb4qC,EAAAA,kBACAjqB,EACAA,SAAAA,CAAAA,IAAgC,CAChCA,KAAAA,SACAC,CAAAA,EAAAA,EAAAA,OAA4B,CAC9B,SAAA,SAAA,CACM,CAAA,CAAA,CAA0B9oB,EAAAA,EAEhCH,GAAK,CAACK,UAAK,mBAAUC,QAAK,IAAA,CAAK2yC,EAAAH,IAAA,OAAA,KAAA,MAAA,EAG/B9yC,EAAAA,OAAA,OAAA,EACOgpB,EAAA,OAAA,YAAA,EACC8pB,IAAA,SACS,OAAA,MAAA,EAEblD,EAAoB,IAAA,OAAA,MAAA,EACpBzvC,EAEG6oB,CAAA,CAAM,EAAU1oB,SAAK,CAAAN,EAAAI,EAAA,CAAK,KAAA,CAGnCe,GAAM,UACE,KAAA,SAAA,EACE2xC,GAAA,EAAA,CAAA,CAAA,EAAA3xC,EAAA,OAAA,UAEgBpF,CAAAA,aAAAA,IAAAA,OAAAA,YAAAA,OAAAA,OAAAA,CAAAA,CACxB,CAAA,CAAA,CACAwH,EAAAA,EAAAA,GACE,CAAQtD,QAAK,IAAA,CAAe,MAAA,KAAAivB,EAAA,QAAA,iBAAA,sEAAA,CAAA,EAC1BlvB,QAAKkzC,GAAA,CAAMA,EAAA,MAAA,CAAA,CAAW,CAAA,EAAmB,SAAE,CAAAlzC,EAAAI,EAAA,CACrC,KAAA,UAAA,CACTD,EAAAA,IAEDgB,EAAAA,OAAS,UACe,4BAAA,GAEpBlE,CAAOomB,EAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EAAAA,GAAAA,CACT,UAAA,QAAEljB,SAAA,cAEG,CAAA,EAACE,EAAKoD,GAAA,CAAS,SACpB,CAAAgtC,IAAAG,GAAA,QAAM,IAAA,CAAc,MAAAlF,EAAAH,GAAAuB,EAAA,GAAA,EAEtB3rC,EACY,SAAA,KAAAuqC,EAEIoH,MAAAA,kBAAsB,CAElC9pB,EACA,cAAyB,CACvBA,KAAAA,UAA0B,CAAA,EACrB7nB,EAAA,QAAA,CACQiC,MAAAA,oBACf,SAAA,CAAA,4BAAAqtC,GAAAtvC,EAAAC,EAAA,CACA6nB,SAAAA,CAAAA,IAA4B,IAAAjpB,EAAA,IAAA,CAC9B,SAAAywC,EAAEtwC,CAAAA,EAAAA,GAEFH,CAEI,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CACM,CAAA,CAAA,CACE,CACR,EAAAA,KACD,MAEHmB,0BAAA,GAAAhB,EAEA,SAAOH,EAAAI,EAAA,CAETe,KAAAA,IACEjB,SAEE,CAAA,CAKAizC,CAAAA,CAAAA,CACED,CAAAA,CAAAA,CAAa,CAAA,CACd,CACH,EAAA7oC,EAAA,QAAAyiC,EAAA3rC,EAAA,KAAA,CAAEhB,MAAAA,iCAEGkI,IAAA,UAAA,UAAA,EAAA,GAAA,SAAChI,CAAK+yC,GAAAl6B,EAAA,GAAAlZ,EAAA,KAAA,CAAA,SAAcmB,EAAAnB,SAAA,CAAA,KAAAG,SAAM,MAAiC,wBAAA,SAEjEuD,IAAAA,UACU,QAAW,IAAAgsC,EAAAz6B,GAAAA,EAAAvL,EAAA,EAAA,MAAQ,CAAY,eACjC,KACP/F,EAA2BitC,sBACZ6B,GAAA,KAAA,GAAA,EACP/G,SAAAA,CAAAA,EAAAA,MAAAA,CACN,MAAA,mBACE1jC,SAAAA,EAAgB0jC,MAAAA,EAAAA,EAAAA,CAAAA,EAAAA,IAAAA,GAAAA,EAAAA,GAAAA,CAAAA,IACXjhC,EAAA,QAAA,YACmB,EAC1BA,EAAA,EAAA,CAAA,CAAA,CACF,EAAA,IAAAtJ,EAAA,MAAA,CAAEhB,MAAAA,KAEG,SAAM,CAAA,aAAA,IAAAH,EAAA,OAAA,CAAU,MACrBmB,MAAA,SAAa+X,EAAAxP,GAAA,GAAAA,EAAA,IAAAwP,CAAA,CAAA,CAAA,CAGT,CAAA,CAAA,CAEG,CAAA,CAAIu3B,CAAY,CAAA,CACnB,CAAA,EAAAtvC,EAAAC,EAGD,CAAA,SACK,CAAAiH,IAAA,WAAArI,EAAA,KAAA,CAAA,MACC,wCAAA,SAEbA,EAAK,KAAA,CAAA,SAAOA,EAAAsnB,GAAA,CAA0BnjB,SAAI6oC,GAAU7sC,KAAAA,GAC7C,CAAA,CAAM,CAAA,CAAS,CAAA,EAAAkI,IAAM,SAAAlH,EAAA,IAAA,CAAA,MACrB,WAAA,SACH,CAAA,sBAAAnB,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,SAAA,CACH,KAAA,SAEJqK,QAASzM,IAAUkvC,CAEV7vC,EAAA,oBAMNkD,oBACE,CAAA,CACEF,CAAK,CAAA,CAAA,CACC,CAAA,CAAA,CACgB,CAAA,CACkB,CACjC,SAAAmyC,GAAkB,CAAM,QAAA5nC,EAC/B,SAAAzN,EAAgDoD,gBAAAA,EAEhD,MAAAuyC,EAA6BvyC,UAAAA,EAKvB0C,QAAAA,EAAoBC,WAAAA,CAAAA,EACpB,CAEH,KAAA,CAAAkmB,EAEH7nB,CAAA,EAAA+nB,GAAA,EAAAmqB,EAAWC,GAAAA,EAAK,OACI,CAAAz6B,EAAA0K,KAClB,KAAA,CAAY,aAAA2O,EACwBhZ,QAC7Bq6B,CAAA,EAAAhwB,EAEHgC,GAAAguB,GAAA,YAAAA,EAAA,SAAArhB,EAAC,OAEZrZ,EAAA0M,EAAA8tB,EAAAE,GAAA,CAAA,CAAA,CACC,EAEJpyC,CAAAA,EAEQJ,EAAMyJ,EAAA,OAAA6oC,EAAA7oC,CAAA,EAAuCrK,IAC/C,SAAAqzC,EAAArzC,EAAAA,EACS,IAAAyO,GAAAA,EAAA,OAAA,EAAA,OAAA,CAAAU,EAAA7M,EAAAuwC,IAAAA,EAAA,UAAAhkC,GAAAA,EAAA,KAAAM,EAAA,EAAA,IAAA7M,CAAA,EAAA,MAAA,EAAA,CAAA,EAAAgxC,EAAStoC,GAAA,IAAAX,GAAA,YAAAA,EAAM,OAAA,CAAAqO,EAAA0K,IAAK1K,GAAA0K,GAAA,YAAAA,EAAA,QAAAovB,GACzB,CAACA,EAGInoC,GAAA,YAAAA,EAAA,MAAA,CACXrJ,EAAA,IAAA+zB,EAAS,IAAA0d,MAMU9G,IAEf,CAAA4H,GAAAF,IAAA,GACDG,GAAAnpC,EAAA,CAAA,CAAA,EAAA,KAEQ0qB,EAEZ,IAEJ,MACE0e,EAAA7H,GAAAvhC,EAAA,CAAA,EAAA,EAAA,EAETmnC,EAAAjZ,GAAA,CAAAh5B,EAAA+C,EAAAuV,EAAAvN,IAAA,CAEA/K,EAAA,eAAqB,EACnB8K,EAAAA,gBAAAA,EACAzN,EAAAA,CACA22C,MAAAA,EAAAA,EACAhB,cAAAA,EAAAA,EAAAA,CACAC,CACAC,EAAAA,CAAAA,CAAAA,EACAiB,EAAAA,IACC1rB,OAAAA,GAAA,IAAA,OACD,SAAOa,EAA6BtpB,EAAA,CAG9B2zC,EAAAA,OAAAA,QAAwB,WAAA3zC,EAAA,OAAA,UAC5B,CACQ,OAAAb,EAAAi1C,EAAA,UAAA,MAAAj1C,EAAA,iBAAA,SAAAk1C,EAAA,CAAE7hB,QAAAA,EAAAA,GAA0B3O,IAAAA,QAC5BgC,EAAAA,EAAAA,UAAAA,MAAAA,sBAA2B2M,SAAAA,EACjC,CAA2C,GAC1C,CAAA,EACL/wB,EAAA,UAAA,CACA,IAAsBqJ,EAChBwpC,MAAAA,UAGAxyC,KAAAA,GACHF,EAIGmyC,SAAAA,GAAAA,CACJ,KAAgB76B,CACd,MAAoBk2B,EACVpvC,EAAA,OACVizC,GAAoB/0C,EAAO,CAAA,EAAA,EAAA,EAAAq2C,CAE/B,EACA,MAAa,CACJ,mBAAAvB,CACT,EACS,sBAAAA,EACE,+BAAoBc,EAAAA,EAC7B,SAAmBG,CAAAA,EAAAA,UAAAA,CACfO,MAAAA,kBAAmB,OAAAhf,EACzB,SAAA,CAAAl1B,EAAA,OAAA,CACM4zC,MAAa7H,UAEb4F,WAAmBjZ,IAAYppB,GAAAtP,EAAIyC,IACtB,IAAA6M,EAAA,aACC,MAAA,GAAAA,EAAA,WAAA,KAAAA,EAAA,QAAA,GACF,SAAAA,GAAA,YAAAA,EAAA,GAAA,IACP7M,EAAI,CAAA,CAAA,YACWhF,CACvB,MAAA,iBACE,SAAA,CAAA0D,EAAA,IAAA,WAEctF,EAAO,OAAA,CAC1BssB,MAAsB3d,EAAA,OACpB,YAAyBA,EAAA,MAAA,CACvB9K,CAASy0C,EAAAA,IAAAA,OAAqBz0C,EAAAA,SAASgxB,EAAAA,IAAAA,KAAAA,CAAAA,CACzC,EAAA,CAAAsjB,GAAAR,EAAA,GAAAryC,EAAAC,EAAA,CACWrF,SAAAA,CAAAA,IAA0B,IAAA,IAAAoF,EAAA,OAAA,CAC1B,SAAA,CAAAnB,EAAA,OAAA,CACV,MAAAwzC,EACY,SAAA/iC,GAAA+iC,CAAA,CACXM,CAAW/3C,EAAAA,IAAAA,UAA6By3C,IAAA,EAAA,GAAsB,GAAA,CAAA,CAChE,CAAA,CAAA,CACG,CAAA,CAEL,CAAA,IACEpzC,EAAA,CACO0zC,KAAAA,eACC,MAAA,4BACAF,CAAc1e,CAAAA,GAAAA,EAAAA,EAAAA,OACH,sBACT,GAAA2e,EAAA,GAAE3e,QAAAA,EAAAA,cAAW9rB,6BAEnB2iC,SAAAA,GAAqC7W,CACvC,CAAA,CAAA,CACO,EAAAl1B,EAAA,KAAA,CACL,SAAoB0yC,EAAAA,IAAAA,GAAAA,SAAAA,OAAAA,EAAAA,KAAAA,CACtB,SAAA,CAAAvxC,EAAA,MAAA,CACqBuxC,MAAAA,0BACmBvyC,SAExCgB,CAAAnB,EAAAsnB,GAAA,CAAe,SAAA1Y,EAAA,GAA0BsmB,SAAAA,EAAK/0B,cAC5C,GAAY,KAAA,IACTqB,gBAAc8N,gBAGJxM,iBACiB,EAAe,4BAC1B2I,SAAAA,EAAAA,aAAAA,GAAAA,EAAAA,MAAAA,CAHNhO,MAKV,eAEH0D,SAAA,CAAAnB,EAAAI,EAAA,CAAY,KAAA,UAAA,CAAgBD,EAAAA,IAC1BgB,EAAA,OAAA,CAAAhB,MACEH,EAAAA,sBAAqBpC,GAAAA,EAAAA,YAAAA,CAAAA,CAAOuC,CAAAA,CAA8B,CAAQ,EAGjE,CAAA,IACFia,EAAAxL,YAAA,YAAAwL,WAA8Bpa,EAAAoyC,IAC7BjyC,SAAAA,EAGEA,QAAAA,EAAAA,QACE,MAAaqzC,EAAAA,EAAcrzC,UAAAA,EACGszC,WAAA,QAAAb,EAGC,WAC1B,CAEV,GAAA71C,EAAA,IAAAA,CAAA,MAAA6R,EAAA,EAAA,GAAA,MAAAA,EAAA,EAAA,GAEH5O,QAAK,IAAA,CAAMksC,GAAAt9B,EAAA,EAAA,CAAqB,CAC9B,CACK,CACG,CAAA,CAAA,MACSzK,EAAAA,CAAAA,CAAAA,CAAAA,CACKjE,CAAAA,CACd,CACP,MAEDk0C,GACD,IAEHp0C,GAAA,GAAAG,GACgByO,GACZzO,GAQEgB,IAAAivC,GAAW,IAAA,IAAA,SAAAuD,GAAyBlpC,EAAA,SAAEtK,MAAAA,EACpCH,GAAO,IAAAyK,EAAA,EAAA,EAAA,GAAA4pC,EAELt3C,OAAAA,EAAAA,KAAAA,CACa,YAAA2a,EACR,QAAA0F,EACU,iBAAAzF,EACDg6B,KAAAA,EACA,KAAA9e,CAGd,EAAApoB,EAAyBtK,EAAAA,GAClBuX,EAAA0F,CAAA,EAAAk3B,EAAM38B,GAAA,MAAAA,EAAA,OAAAy8B,GAAA,EAAAG,KACXv0C,EAAAA,GAAAA,YAAAA,EAAA,UAAAA,YAAAA,EAAA,SAAA,GAAAw0C,GAAAC,EAAa7lC,IAAEsjB,GAAAA,MAAAA,EAAAA,SAAAA,EAAAA,GAAAA,YAAAA,EAAAA,UAAAA,MAAAA,EAAAA,QAAAA,EAAAA,GACgB4c,GADH3uC,EACXyO,EAAc2lC,EAAAE,GACxBC,GAAA,OAAAtE,GAEV,IAAA3lC,EAAA,GAAAqkC,CAAA,EACEA,CAGS,CACV/xC,YACWyN,EAAAA,ECt6C3B,SAAwBmqC,IAAc,CACpC,MAAMhrB,EAASqS,KACT,CAAEv+B,GAAAA,EAAIV,SAAAA,CAAa4sB,EAAAA,EACzB,OAAO3pB,EAACsnB,GAAM,CAAC7pB,GAAAA,EAAQV,SAAAA,CAAAA,CAAqB,CAC9C,CCRA,MAAe63C,GAAA,GAAA,IAAA,IAAA,+BAAA,YAAA,GAAA,EAAA,KCAAC,GAAA,GAAA,IAAA,IAAA,qCAAA,YAAA,GAAA,EAAA,KCAAj1B,GAAA,GAAA,IAAA,IAAA,4BAAA,YAAA,GAAA,EAAA,KCAAk1B,GAAA,GAAA,IAAA,IAAA,sCAAA,YAAA,GAAA,EAAA,KCAAC,GAAA,GAAA,IAAA,IAAA,sCAAA,YAAA,GAAA,EAAA,KCAAC,GAAA,g4ICAf,IAAO9tC,GAAA,CAAA,mBAAA,WAAA,eAAA,yBAAA,wBAAA,4FAAA,0BAAA,yDAAA,aAAA,aAAA,wBAAA,aAAA,SAAA,KAAA,KAAA,aAAA,IAAA,GAAA,KAAA,GAAA,IAAA,EAAA,usFCGP,MAAM+tC,GAAcjwC,OAAOuE,MACtBvE,OAAOkwC,gBAAelwC,OAAOkwC,cAAgBD,IAElDjwC,OAAOuE,MAAQ,SAAUlD,EAAS,CAIhCA,aAAA,QAAAA,GAAA,MAAAA,EAAA,WACAA,EAAuB4e,EAAAA,SAGvB,OAAA5e,GAAA,WACAA,EAAWA,KAAAA,UAAYA,CAAU,GAEjC,MAAAqd,EAAAyxB,GAAA,CAEMzxB,KAAAA,EACJtP,UAAa,QACb/S,QAAS,MACT+zC,SAAc,SACdhpB,SAAU,IACVhZ,OAAQ,CACRiqB,EAAAA,EACEgY,EACF,QAAC,IAAA,CACM3xB,EAAA,UAAQ,EAEf,CAAA,EACFA,EAAE,UAAA,GCyBJ1e,OAAOswC,WAAar4C,EACpB+H,OAAOuwC,iBAAmB,IAAM,CAC9B,MAAMr0C,EAAO,CACX,WACA,WACA,WACA,gBACA,cAAc,EAEVs0C,EAAS,CAAA,EACft0C,EAAK4L,QAAiB+J,GAAA,CACpB2+B,EAAO3+B,CAAG,EAAIoJ,OAAO/e,KAAKjE,EAAO4Z,CAAG,CAAC,EAAEjZ,MAAAA,CACxC,EACO4qB,KAAAA,CAEF,SAAAne,CAAEA,EAAAA,EAAapN,EAAAA,CAAAA,EACrB,0BAC4B,cAAA,yBAAA4Z,CAAA,8BAAAA,CAAA,IAAA,GAI1B4+B,EAAY,KAAA5+B,CAAA,CAEZ,EAEFza,YAAa,IAAA,CACf,GAAA,CAAA,OAAA,SAKA4zC,OACE,KAAY3W,CAAU,SAAAhvB,EAChB,cAAAqrC,EAAErrC,cAAAA,CAAUqrC,EAAAA,EAAer4C,IAAAA,EAAAA,EAAc,KAAIJ,CACnD,SAAAF,CACM,EAAAsB,EAAA,EAAEtB,UAAAA,KAAAA,EAAAA,IAAiB,CAAA,OAAA,SACzB,MACE,GAAI,CAAkB,MAAA44C,EAAA,SAAA,cAAA,yBAAA9+B,CAAA,8BAAAA,CAAA,IAAA,EAClB++B,EAAAv4C,EAAA,KAAA+mC,GAAA,OAAA,OAAAvtB,IAAAsW,IAAAtuB,EAAAulC,EAAA,SAAA,YAAAvlC,EAAA,GAAA9B,CAAA,EAAA,EACF,GAAA,CAAA44C,GAAcz5C,CAAS6D,EAAAA,CAGjB61C,OAAAA,EAAAA,SAAAA,CAAsBv4C,EAGxB,OAAUJ,EAAsB,aAAA4Z,CAAA,EAC3B5Z,UAAAA,OAAmB,CACnBA,MAAAA,IAAuB0rC,CAAA,EAEtBkN,MAD0BA,EAAA,GAAAA,EAAA,QAAA,IAC1BA,GACN,OAAa1oB,EAAAA,cAAmB1vB,CAAAA,EAChC,KACSR,CACP,CACF64C,GACF,CACAA,MAAAA,CACF,CAAA,CACW,EACf,GAAA,GAAA,GAAA,EACA,WAAe,IAAA,CACL72C,UAAAA,KAAoB62C,GAC9B,eAAA,IAAA,mBACe,QAAAC,GAAA11C,CAAA,CAAA,GAKjB9B,GAAAA,EAAAA,GAAiB8B,CAAA,GAAA,KAAjB9B,MAAAA,EAAAA,KAAAA,IAEI+vB,GAAAA,EAAAA,IAAAA,KAAAA,MAAAA,EAAAA,KAAAA,EAEIynB,CAAM11C,CAEN01C,EAAAA,GAAAA,GACF,IAAA,CAAA,OACD,SAAA,GACH,MAAAC,EAAA,CAAA,YAAA,YAAA,SAAA,UAAA,aAAA,cAAA,cAAA,OAAA,EACKC,EAAA,IAAA,CAEA,OAAA,SAAA,EACLjxC,EAWMixC,EAAgBlI,GAAAkI,EAVhBD,GAUgB,EACpBhxC,EAAkB,IAAA,CACpB,OAAA,SAAA,GACAkxC,GACA,EACAF,UAAwBjuB,GAAA,CACtB/iB,OAAOq0B,iBAAWtR,EAAAouB,EAAA,CACD,QAAA,GACnB,QAAA,EACAH,CAAAA,CACEhxC,CAAOqsB,EAAmC,OAC/B,iBAAA,OAAA4kB,EAAA,CAAA,QACA,EAAA,CAAA,EAEb,SAAC,gBAAA,iBAAA,aAAAv2C,GAAA,CACM2xB,CAAAA,EAAAA,6BACI4kB,GAGX/5C,EAASk6C,CAGL,QAAwB,EACtBH,CAAQ,CAAA,KACV,MAEFI,GAAA,mBAAA,KAAA,UAAA,SAAA,EACE/kB,IACF,SACF,iBAAA,mBAAA,IAAA,CAYC,GAAA,SAAA,kBAAA,UAAA,CAIG+kB,MAAQC,EAAA70C,GAAA,MAAA,IAAwBsD,OAAAA,EAC3B,IAAAwxC,EACAllB,GAAAA,GAEL,GADEn1B,EAAAA,uBAAwC,uDAAA,EACpCo6C,EAAQ70C,CACV80C,MAAAA,EAAAA,EAAAA,QACOC,EAAAF,IAAA,QAAAC,EAAA,QAAA,oBAAAA,EAAA,QAAA,mBAEDr6C,EAAAA,WACL,GAEH,WAAW,IAAA,CACTq6C,UAAoBn5B,CACpB,EAAA,EAAA,CAIAm5B,MACAh4C,CACEg4C,MAAAA,EAAgB/mC,OAAAA,WAAAA,8BAAAA,EAAAA,QAAAA,OAAAA,QAEpB,GAFoBA,EACb,SAAA,cAAA,oCAAAinC,CAAA,IAAA,EACPF,EAAA,CACK,MAAA/mC,EAAA+mC,EAAA,QAAA,UAEevxC,EAAO2lC,QAAAA,YAK3B4L,EAAQr6C,QAAS6D,GACd,GAEH,WAAW,IAAA,CACHyP,EAAAA,SACAgnC,EAAAA,EAAAA,CACND,CACAh4C,CACEg4C,CAAgB/mC,CAAAA,EAEpB,CAEJ,MAAA8mC,EAAA70C,GAAA,MAAA,IAAA,OAAA,EACF,GAAC60C,EAAA,CACH,SAAA,gBAAA,UAAA,IAAA,MAAAA,CAAA,EAAA,EAEA,SAAA,cAAA,2BAAA,EAAA,aAAA,UAAAA,GAAA,YAAA,EACE,MAAc70C,EAAYK,SAAW,cAAA,mCAAA,EAE1B40C,IAETx6C,EAAyBkoB,KAAAA,cACzBloB,UAC4Co6C,IAAA,QAAAI,EAC5B,QAAA,kBAAgC,QAAA,gBAM/B,SAAA,iBAAA,iCAAA,EACfA,QAAmB16B,GAAA,CACnB06B,EAAAA,KAAAA,EAG0BC,CAC5B,CAEMC,CAGNA,MAAAA,KAA0B,MAAA,IAAA,UAAA,EACxB56B,GACF,SAAC,gBAAA,MAAA,YAAA,cAAA,GAAA66B,CAAA,IAAA,CAEH,CACAn4C,GAAczB,EAAA2lB,GAAA,OACZ1mB,SAASk6C,OAAsBU,CAAAA,IAA4Bl0B,EAAA,CAC7D,GAAA7O,EAAA,KAAA,GAAA,IAAA,6BAAA,CACF,MAAAgjC,EAAA,SAAA,eAAA,KAAA,EAEU95C,IACR85C,EAAW,QAAShjC,mBAAa8O,EAAAA,cAAAA,MAAAA,EAAuB,OAAAnlB,EAAA,GAG9Cq5C,CACNhjC,EAAU,KAAA,GAAA,IAAA,sBACK8L,SAAAA,KACf,UAAA,OAAA,QAAAniB,CAAA,CAIF,CACE,CAAA,EACAs5C,SAAM5yB,IAAAA,CACR,KAAA,CAAA3nB,EAAAw6C,CAAA,EAAAr6C,EAAA,EAAA,EACF,CAAAyL,EAAAC,CAAA,EAAA1L,EAAA,SAAA,EACDd,EAAA,IAAA,CAED,MAAe+sB,EAAApnB,GAAA,MAAA,IAAA,aAAA,EACNhF,EAAAA,oBAAyB,gBAAkB,OAAA,MAAA,cAAA,GAAA,CAAA,CAAA,EAAA,GAAA,CAAA,CAAA,EAClD,GAAMy6C,EAAC7uC,CAEPvM,OAAgB,QAAA,aAAA,CAAA,EAAA,SAAA,MAAA,OAAA,SAAA,UAAA,GAAA,EACd,MAAoB2F,EAAAA,GAAAA,QAAYK,IAAiB,UAAA,EACpCq1C,EAAAA,GAAAA,QACHnvC,IAAAA,cAAgBsjC,EAGhB/kC,EAAA9E,GAAA,QAAA,IAAA,UAAA,GACRrF,SAAY,CAAE86C,EAAAA,SAAAA,EAAM,KAAA,CAEbtO,cAMP,EAAMwO,MAAW31C,GAAcK,CAC/B,YAAA+mB,EACA,UAAiBpnB,EAEJ,cAAA41C,EACX/uC,KAAAA,CACA,CAAM,EAAgB0f,EAAAA,GAAAA,CAAY,SAAyBa,EACzDA,YAAAA,CAAAA,CAAAA,EACWuuB,MACIC,QAAAA,WAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EACfH,KACFI,GAACC,CAAA,EAEDN,IAA0B,EAAA3uC,EAAYugB,SAAAA,CAAAA,IAAab,KAAa,CAChE,OAAA,6BACEwvB,GAGS,MAAAh1C,EAAAiE,KACX6wC,GAAAA,EAAAA,CAEAL,GAAAA,QAAc,IAAI,iBAAAz0C,EAAA,KAAA,EAAA,EAClB8F,KAAAA,CACC,OAAAivC,CACE,EAAAl5C,EAAA,CACL2G,QAAAA,CACA,CAAA,EACa,CACXvD,SAAAA,CACM,EAAA81C,EAAEA,KAAOD,GAAQC,CAAA,EAAE/0C,EAAAA,SAAAA,GAAS,SAAA,CAC5B,GAAA,CAAEzF,MAAAA,GAAAA,EAAAA,CAAAA,CAAaw6C,MAAAA,CAErBE,QAAW,CACXH,EAAsB,EAAA,EACtBhvC,EAAoB,SAAA,CACP,CACX,IACE,MAAmCA,EAC5B5I,SAAG,CAEVu3C,CACA3uC,EAAAA,CAAAA,CAAAA,EACF,IAAAN,EAAAC,KAGFK,OAHErL,EACC,gBAAA+K,EAAA,SAAAlM,EACEqL,GAAA,CAAAa,EAAAvL,CAAA,CAAA,EACL6L,YAAAA,KAAoBN,EAAA,QAAA,EACtBhI,EAAAwrC,GAAA,CAAA,CAAA,EAECrqC,EAAAC,EAAA,CAEL,YAA2Bs2C,GAAA,CAC3Bz6C,WAAAA,EAKAnB,QAAqBuM,IAAW5L,SAEhC,CAAA,EAAgByG,EAAAA,GAAciF,CACrBnI,WAAAA,CACT,CAAA,EAAAqI,IAAA,WAAArI,EAAA23C,GAAA,CAEA,SACE33C,EAAA43C,GAAA,CAAAz3C,KAAA,oBACiB1D,QAAAA,EAAAA,GAAAA,EAAAA,CAAAA,EAA6C,CAAY,EACxEuD,GAAgBA,EAAAR,GAAA,CAAA,CAAA,EAAA/C,GAAAuD,EAAAsrB,GAAA,CAAA,CAAA,EAAAtrB,EAAA8iB,GAAA,EAAA,EAAArmB,GAAAuD,EAAAioB,GAAA,CAAA,CAAA,EAAAjoB,EAAAzD,GAAA,CAACE,WAAAA,CAAyB,CAAA,EACzC4L,IAAY,WACXrI,EAAC23C,GAAM,CAAAx3C,QAAAA,EACC,CAAA,EAAC4T,EAAKvT,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA2C,CAAI,SAG9D/D,GAAe+C,CAIG/C,WAAAA,EAAAA,QAAAA,CACqB,EAAA,CAAU0K,MAClDnH,OACA63C,EAAA1sC,GAAA,IAAA,CAEN,KAAA,CAEA,SAAAhD,CAAyB1L,EAAAA,EAAY6V,MAAAA,CAAAA,qBAAAA,KAAAA,CAAAA,CAAQ,EAAG,CAAAtK,CAAA,CAAA,EAC9C,YAA6B,CACvB6vC,SAAAA,KACE,SAAA,CAAA73C,EAAA43C,GAAA,CAAEzvC,KAAAA,IAAaH,QAAAA,EAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAAAA,CACd,GAAC,aAAkC,CACxCA,EAAAA,EAAS8vC,GAAA,EAAA,CAEb,CAAA,EAAA93C,KACS,eAAuCG,QAC5CH,EAAC43C,GAAK,EAAA,CAAA,CAAA,EACC53C,EAAA43C,GAAA,CACLG,KAAAA,WAIW,QAAI/3C,EAAA83C,GAAA,EAAA,CAAA,CAAA,CAAa,CAEd,CAEb,CAEG,CAAM,SAAkB93C,IAAQ,CAAE,OACxCA,EAAM,cAAA,IAAA,CAAM,SAAoBA,GAAU,CAAA,WAAAvD,CAAK,EACzC,CAEZ,MAAAuL,EAAAC,KAEA+vC,EAA2Bn8C,EAAAo8C,GAAA,CAAA,EAGAx7C,OAFK0O,GAAA,IAChC+hC,GAAA,mBAAAllC,EAAA,QAAA,GAAAklC,GAAA,SAAAllC,EAAA,QAAA,EACA,CAAAA,EAAyB,SAAAklC,EAAA,CAAA,EAAgB8K,EAAA,UAEvCA,EAA6B,QAAAC,MAIvBC,UAA4B,KAKrB/vC,EAAAA,GAAAA,CACb,SAAiB6vC,EAAA,SAAAhwC,EACf,SAAwBjM,CAAAA,GAAAA,EAAAA,EAAAA,CACtBi8C,SAAAA,CAAAA,EAAAA,IACG,KAAA,iBACLA,QAAAA,EAAAA,GAA6B,EAAA,CAAA,CAC/B,EAAAh4C,EAAA43C,GAAA,CACAx7C,KAAc,yBAC2BL,EAAAA,CAAAA,CACvCiM,EAAAA,EAAAA,GAAAA,CACD,KAAA,aAED,QACShI,EAAA0/B,GAAA,EAAA,CAAA,CAAC13B,EAAAA,MACLvL,KAAAA,KACC0D,QACEH,EAAC43C,GAAK,EAAA,CAAA,CAAA,EAAM53C,EAAA43C,GAAA,CAAiBG,KAAS/3C,KACtCA,QAAMA,EAAAs/B,GAAA,EAAA,CAAA,CAAA,EAAMn+B,EAAAy2C,GAAA,CAAYG,KAAS/3C,KACjCA,SAAM,CAAAA,EAAA43C,GAAA,CAAM,MAAA,GAAsB53C,QAAAA,EAAY2rC,GAAA,EAAA,CAAA,CAC9C3rC,EAAAA,EAAM43C,GAAA,CAAM,KAAA,MAAc53C,QAAAA,EAAY6hC,GAAA,EAAA,CAAA,CACtC7hC,CAAAA,CAAM,CAAA,EAAMA,EAAA43C,GAAA,CAAKG,KAAS/3C,MAC1BmB,QAAMnB,EAAAy/B,GAAA,EAAA,CAAA,CAAA,CAAC1rB,CAAK,CAAI5T,EAAAA,EAAAA,GACdH,CAAM,KAAM,yBAAA,QAAUA,EAAAA,GAAQ,EAAA,CAAA,CAAE,EAAAA,EAChCA,GAAM,CAAA,KAAM,oBAAA,QAAeA,EAAAA,GAAO,EAAA,CAAA,CAAA,EAAEmB,EAAGy2C,GAAA,CAAA,KAEzC53C,gBAAM,SAAM,CAAAA,EAAA43C,GAAA,CAAMG,MAAS/3C,GAAwB,QAAAA,EAAAwnC,GAAA,EAAA,CAAA,CAGvDxnC,EAAAA,EAAM43C,GAAA,CAAM,KAAA,IAAkC53C,QAAAA,EAAUwnC,GAAA,CACxDxnC,MAAM,EAAA,CAAM,CAAA,CAA6BA,CAAAA,CAAkB,CAAI,EAC/DmB,EAAAA,GAAM,CAAC4S,KAAK,uBAAe5T,QAAAA,EACzBH,GAAM,EAAA,CAAA,CAAA,EAAC0e,EAAKk5B,GAAA,CAAA,KAAU53C,qBAAW,QAChC43C,EAAK7P,GAAA,EAAA,CAAA,CAAA,CAAA,CAAM,CAAIgQ,CAAgB,CCjcpC,gBAAiB/yC,SACPmzC,YAAAA,QACVC,YAAYD,UACG/kC,GAAA,CACPilC,MAAAA,EAAa,IAAIC,gBACvB/5C,kBAAW,IAAM85C,EAAWE,MAAM,EAAGnlC,CAAQ,EACtCilC,EAAWG,MAAAA,IAIxBtd,GACEl7B,EAACy4C,GAAU,CAAAt4C,SACTH,EAAC04C,GAAK,EAAA,CAAC,CACG,EACZx8C,SAASoL,eAAe,KAAK,CAC/B,EAGA/I,WAAW,IAAM,CACX,GAAA,CAEF0hB,OAAO/e,KAAKy3C,YAAY,EAAE7rC,QAAiB+J,GAAA,CACrCA,EAAIC,WAAW,SAAS,GAC1B6hC,aAAaC,WAAW/hC,CAAG,CAC7B,CACD,EACDoJ,OAAO/e,KAAK23C,cAAc,EAAE/rC,QAAiB+J,GAAA,CACvCA,EAAIC,WAAW,SAAS,GAC1B+hC,eAAeD,WAAW/hC,CAAG,CAC/B,CACD,EAGD8hC,aAAaC,WAAW,yBAAyB,OACvC,CAAC,CACf,EAAG,GAAI,EAEP5zC,OAAO8zC,UAAY,IAAM,CACdpjB,SAAAA,KAAKtR,UAAU20B,OAAO,OAAO,CACxC"}